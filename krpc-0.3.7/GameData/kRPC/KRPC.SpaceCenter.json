{
  "SpaceCenter": {
    "documentation": "<doc>\n<summary>\nProvides functionality to interact with Kerbal Space Program. This includes controlling\nthe active vessel, managing its resources, planning maneuver nodes and auto-piloting.\n</summary>\n</doc>",
    "procedures": {
      "ClearTarget": {
        "parameters": [],
        "attributes": [],
        "documentation": "<doc>\n<summary>\nClears the current target.\n</summary>\n</doc>"
      },
      "LaunchableVessels": {
        "parameters": [
          {
            "name": "craftDirectory",
            "type": "string"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "ReturnType.List(string)"
        ],
        "documentation": "<doc>\n<summary>\nReturns a list of vessels from the given <paramref name=\"craftDirectory\" /> that can be launched.\n</summary>\n<param name=\"craftDirectory\">Name of the directory in the current saves \"Ships\" directory. For example <c>\"VAB\"</c> or <c>\"SPH\"</c>.</param>\n</doc>"
      },
      "LaunchVessel": {
        "parameters": [
          {
            "name": "craftDirectory",
            "type": "string"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "launchSite",
            "type": "string"
          }
        ],
        "attributes": [],
        "documentation": "<doc>\n<summary>\nLaunch a vessel.\n</summary>\n<param name=\"craftDirectory\">Name of the directory in the current saves \"Ships\" directory, that contains the craft file. For example <c>\"VAB\"</c> or <c>\"SPH\"</c>.</param>\n<param name=\"name\">Name of the vessel to launch. This is the name of the \".craft\" file in the save directory, without the \".craft\" file extension.</param>\n<param name=\"launchSite\">Name of the launch site. For example <c>\"LaunchPad\"</c> or <c>\"Runway\"</c>.</param>\n</doc>"
      },
      "LaunchVesselFromVAB": {
        "parameters": [
          {
            "name": "name",
            "type": "string"
          }
        ],
        "attributes": [],
        "documentation": "<doc>\n<summary>\nLaunch a new vessel from the VAB onto the launchpad.\n</summary>\n<param name=\"name\">Name of the vessel to launch.</param>\n<remarks>\nThis is equivalent to calling <see cref=\"M:SpaceCenter.LaunchVessel\" /> with the craft directory set to \"VAB\" and the launch site set to \"LaunchPad\".\n</remarks>\n</doc>"
      },
      "LaunchVesselFromSPH": {
        "parameters": [
          {
            "name": "name",
            "type": "string"
          }
        ],
        "attributes": [],
        "documentation": "<doc>\n<summary>\nLaunch a new vessel from the SPH onto the runway.\n</summary>\n<param name=\"name\">Name of the vessel to launch.</param>\n<remarks>\nThis is equivalent to calling <see cref=\"M:SpaceCenter.LaunchVessel\" /> with the craft directory set to \"SPH\" and the launch site set to \"Runway\".\n</remarks>\n</doc>"
      },
      "Save": {
        "parameters": [
          {
            "name": "name",
            "type": "string"
          }
        ],
        "attributes": [],
        "documentation": "<doc>\n<summary>\nSave the game with a given name.\nThis will create a save file called <c>name.sfs</c> in the folder of the current save game.\n</summary>\n</doc>"
      },
      "Load": {
        "parameters": [
          {
            "name": "name",
            "type": "string"
          }
        ],
        "attributes": [],
        "documentation": "<doc>\n<summary>\nLoad the game with the given name.\nThis will create a load a save file called <c>name.sfs</c> from the folder of the current save game.\n</summary>\n</doc>"
      },
      "Quicksave": {
        "parameters": [],
        "attributes": [],
        "documentation": "<doc>\n<summary>\nSave a quicksave.\n</summary>\n<remarks>\nThis is the same as calling <see cref=\"M:SpaceCenter.Save\" /> with the name \"quicksave\".\n</remarks>\n</doc>"
      },
      "Quickload": {
        "parameters": [],
        "attributes": [],
        "documentation": "<doc>\n<summary>\nLoad a quicksave.\n</summary>\n<remarks>\nThis is the same as calling <see cref=\"M:SpaceCenter.Load\" /> with the name \"quicksave\".\n</remarks>\n</doc>"
      },
      "CanRailsWarpAt": {
        "parameters": [
          {
            "name": "factor",
            "type": "int32",
            "default_value": "AQ=="
          }
        ],
        "return_type": "bool",
        "attributes": [],
        "documentation": "<doc>\n<summary>\nReturns <c>true</c> if regular \"on-rails\" time warp can be used, at the specified warp\n<paramref name=\"factor\" />. The maximum time warp rate is limited by various things,\nincluding how close the active vessel is to a planet. See\n<a href=\"http://wiki.kerbalspaceprogram.com/wiki/Time_warp\">the KSP wiki</a> for details.\n</summary>\n<param name=\"factor\">The warp factor to check.</param>\n</doc>"
      },
      "WarpTo": {
        "parameters": [
          {
            "name": "ut",
            "type": "double"
          },
          {
            "name": "maxRailsRate",
            "type": "float",
            "default_value": "AFDDRw=="
          },
          {
            "name": "maxPhysicsRate",
            "type": "float",
            "default_value": "AAAAQA=="
          }
        ],
        "attributes": [],
        "documentation": "<doc>\n<summary>\nUses time acceleration to warp forward to a time in the future, specified\nby universal time <paramref name=\"ut\" />. This call blocks until the desired\ntime is reached. Uses regular \"on-rails\" or physical time warp as appropriate.\nFor example, physical time warp is used when the active vessel is traveling\nthrough an atmosphere. When using regular \"on-rails\" time warp, the warp\nrate is limited by <paramref name=\"maxRailsRate\" />, and when using physical\ntime warp, the warp rate is limited by <paramref name=\"maxPhysicsRate\" />.\n</summary>\n<param name=\"ut\">The universal time to warp to, in seconds.</param>\n<param name=\"maxRailsRate\">The maximum warp rate in regular \"on-rails\" time warp.</param>\n<param name=\"maxPhysicsRate\">The maximum warp rate in physical time warp.</param>\n<returns>When the time warp is complete.</returns>\n</doc>"
      },
      "TransformPosition": {
        "parameters": [
          {
            "name": "position",
            "type": "KRPC.Tuple"
          },
          {
            "name": "from",
            "type": "uint64"
          },
          {
            "name": "to",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "ParameterType(0).Tuple(double,double,double)",
          "ParameterType(1).Class(SpaceCenter.ReferenceFrame)",
          "ParameterType(2).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nConverts a position vector from one reference frame to another.\n</summary>\n<param name=\"position\">Position vector in reference frame <paramref name=\"from\" />.</param>\n<param name=\"from\">The reference frame that the position vector is in.</param>\n<param name=\"to\">The reference frame to covert the position vector to.</param>\n<returns>The corresponding position vector in reference frame <paramref name=\"to\" />.</returns>\n</doc>"
      },
      "TransformDirection": {
        "parameters": [
          {
            "name": "direction",
            "type": "KRPC.Tuple"
          },
          {
            "name": "from",
            "type": "uint64"
          },
          {
            "name": "to",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "ParameterType(0).Tuple(double,double,double)",
          "ParameterType(1).Class(SpaceCenter.ReferenceFrame)",
          "ParameterType(2).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nConverts a direction vector from one reference frame to another.\n</summary>\n<param name=\"direction\">Direction vector in reference frame <paramref name=\"from\" />.</param>\n<param name=\"from\">The reference frame that the direction vector is in.</param>\n<param name=\"to\">The reference frame to covert the direction vector to.</param>\n<returns>The corresponding direction vector in reference frame <paramref name=\"to\" />.</returns>\n</doc>"
      },
      "TransformRotation": {
        "parameters": [
          {
            "name": "rotation",
            "type": "KRPC.Tuple"
          },
          {
            "name": "from",
            "type": "uint64"
          },
          {
            "name": "to",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "ParameterType(0).Tuple(double,double,double,double)",
          "ParameterType(1).Class(SpaceCenter.ReferenceFrame)",
          "ParameterType(2).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(double,double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nConverts a rotation from one reference frame to another.\n</summary>\n<param name=\"rotation\">Rotation in reference frame <paramref name=\"from\" />.</param>\n<param name=\"from\">The reference frame that the rotation is in.</param>\n<param name=\"to\">The corresponding rotation in reference frame <paramref name=\"to\" />.</param>\n<returns>The corresponding rotation in reference frame <paramref name=\"to\" />.</returns>\n</doc>"
      },
      "TransformVelocity": {
        "parameters": [
          {
            "name": "position",
            "type": "KRPC.Tuple"
          },
          {
            "name": "velocity",
            "type": "KRPC.Tuple"
          },
          {
            "name": "from",
            "type": "uint64"
          },
          {
            "name": "to",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "ParameterType(0).Tuple(double,double,double)",
          "ParameterType(1).Tuple(double,double,double)",
          "ParameterType(2).Class(SpaceCenter.ReferenceFrame)",
          "ParameterType(3).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nConverts a velocity vector (acting at the specified position vector) from one\nreference frame to another. The position vector is required to take the\nrelative angular velocity of the reference frames into account.\n</summary>\n<param name=\"position\">Position vector in reference frame <paramref name=\"from\" />.</param>\n<param name=\"velocity\">Velocity vector in reference frame <paramref name=\"from\" />.</param>\n<param name=\"from\">The reference frame that the position and velocity vectors are in.</param>\n<param name=\"to\">The reference frame to covert the velocity vector to.</param>\n<returns>The corresponding velocity in reference frame <paramref name=\"to\" />.</returns>\n</doc>"
      },
      "get_ActiveVessel": {
        "parameters": [],
        "return_type": "uint64",
        "attributes": [
          "Property.Get(ActiveVessel)",
          "ReturnType.Class(SpaceCenter.Vessel)"
        ],
        "documentation": "<doc>\n<summary>\nThe currently active vessel.\n</summary>\n</doc>"
      },
      "set_ActiveVessel": {
        "parameters": [
          {
            "name": "value",
            "type": "uint64"
          }
        ],
        "attributes": [
          "Property.Set(ActiveVessel)",
          "ParameterType(0).Class(SpaceCenter.Vessel)"
        ],
        "documentation": "<doc>\n<summary>\nThe currently active vessel.\n</summary>\n</doc>"
      },
      "get_Vessels": {
        "parameters": [],
        "return_type": "KRPC.List",
        "attributes": [
          "Property.Get(Vessels)",
          "ReturnType.List(Class(SpaceCenter.Vessel))"
        ],
        "documentation": "<doc>\n<summary>\nA list of all the vessels in the game.\n</summary>\n</doc>"
      },
      "get_Bodies": {
        "parameters": [],
        "return_type": "KRPC.Dictionary",
        "attributes": [
          "Property.Get(Bodies)",
          "ReturnType.Dictionary(string,Class(SpaceCenter.CelestialBody))"
        ],
        "documentation": "<doc>\n<summary>\nA dictionary of all celestial bodies (planets, moons, etc.) in the game,\nkeyed by the name of the body.\n</summary>\n</doc>"
      },
      "get_TargetBody": {
        "parameters": [],
        "return_type": "uint64",
        "attributes": [
          "Property.Get(TargetBody)",
          "ReturnType.Class(SpaceCenter.CelestialBody)"
        ],
        "documentation": "<doc>\n<summary>\nThe currently targeted celestial body.\n</summary>\n</doc>"
      },
      "set_TargetBody": {
        "parameters": [
          {
            "name": "value",
            "type": "uint64"
          }
        ],
        "attributes": [
          "Property.Set(TargetBody)",
          "ParameterType(0).Class(SpaceCenter.CelestialBody)"
        ],
        "documentation": "<doc>\n<summary>\nThe currently targeted celestial body.\n</summary>\n</doc>"
      },
      "get_TargetVessel": {
        "parameters": [],
        "return_type": "uint64",
        "attributes": [
          "Property.Get(TargetVessel)",
          "ReturnType.Class(SpaceCenter.Vessel)"
        ],
        "documentation": "<doc>\n<summary>\nThe currently targeted vessel.\n</summary>\n</doc>"
      },
      "set_TargetVessel": {
        "parameters": [
          {
            "name": "value",
            "type": "uint64"
          }
        ],
        "attributes": [
          "Property.Set(TargetVessel)",
          "ParameterType(0).Class(SpaceCenter.Vessel)"
        ],
        "documentation": "<doc>\n<summary>\nThe currently targeted vessel.\n</summary>\n</doc>"
      },
      "get_TargetDockingPort": {
        "parameters": [],
        "return_type": "uint64",
        "attributes": [
          "Property.Get(TargetDockingPort)",
          "ReturnType.Class(SpaceCenter.DockingPort)"
        ],
        "documentation": "<doc>\n<summary>\nThe currently targeted docking port.\n</summary>\n</doc>"
      },
      "set_TargetDockingPort": {
        "parameters": [
          {
            "name": "value",
            "type": "uint64"
          }
        ],
        "attributes": [
          "Property.Set(TargetDockingPort)",
          "ParameterType(0).Class(SpaceCenter.DockingPort)"
        ],
        "documentation": "<doc>\n<summary>\nThe currently targeted docking port.\n</summary>\n</doc>"
      },
      "get_WaypointManager": {
        "parameters": [],
        "return_type": "uint64",
        "attributes": [
          "Property.Get(WaypointManager)",
          "ReturnType.Class(SpaceCenter.WaypointManager)"
        ],
        "documentation": "<doc>\n<summary>\nThe waypoint manager.\n</summary>\n</doc>"
      },
      "get_Camera": {
        "parameters": [],
        "return_type": "uint64",
        "attributes": [
          "Property.Get(Camera)",
          "ReturnType.Class(SpaceCenter.Camera)"
        ],
        "documentation": "<doc>\n<summary>\nAn object that can be used to control the camera.\n</summary>\n</doc>"
      },
      "get_UT": {
        "parameters": [],
        "return_type": "double",
        "attributes": [
          "Property.Get(UT)"
        ],
        "documentation": "<doc>\n<summary>\nThe current universal time in seconds.\n</summary>\n</doc>"
      },
      "get_G": {
        "parameters": [],
        "return_type": "double",
        "attributes": [
          "Property.Get(G)"
        ],
        "documentation": "<doc>\n<summary>\nThe value of the <a href=\"https://en.wikipedia.org/wiki/Gravitational_constant\">gravitational constant</a>\nG in <math>N(m/kg)^2</math>.\n</summary>\n</doc>"
      },
      "get_WarpMode": {
        "parameters": [],
        "return_type": "int32",
        "attributes": [
          "Property.Get(WarpMode)",
          "ReturnType.Enum(SpaceCenter.WarpMode)"
        ],
        "documentation": "<doc>\n<summary>\nThe current time warp mode. Returns <see cref=\"M:SpaceCenter.WarpMode.None\" /> if time\nwarp is not active, <see cref=\"M:SpaceCenter.WarpMode.Rails\" /> if regular \"on-rails\" time warp\nis active, or <see cref=\"M:SpaceCenter.WarpMode.Physics\" /> if physical time warp is active.\n</summary>\n</doc>"
      },
      "get_WarpRate": {
        "parameters": [],
        "return_type": "float",
        "attributes": [
          "Property.Get(WarpRate)"
        ],
        "documentation": "<doc>\n<summary>\nThe current warp rate. This is the rate at which time is passing for\neither on-rails or physical time warp. For example, a value of 10 means\ntime is passing 10x faster than normal. Returns 1 if time warp is not\nactive.\n</summary>\n</doc>"
      },
      "get_WarpFactor": {
        "parameters": [],
        "return_type": "float",
        "attributes": [
          "Property.Get(WarpFactor)"
        ],
        "documentation": "<doc>\n<summary>\nThe current warp factor. This is the index of the rate at which time\nis passing for either regular \"on-rails\" or physical time warp. Returns 0\nif time warp is not active. When in on-rails time warp, this is equal to\n<see cref=\"M:SpaceCenter.RailsWarpFactor\" />, and in physics time warp, this is equal to\n<see cref=\"M:SpaceCenter.PhysicsWarpFactor\" />.\n</summary>\n</doc>"
      },
      "get_RailsWarpFactor": {
        "parameters": [],
        "return_type": "int32",
        "attributes": [
          "Property.Get(RailsWarpFactor)"
        ],
        "documentation": "<doc>\n<summary>\nThe time warp rate, using regular \"on-rails\" time warp. A value between\n0 and 7 inclusive. 0 means no time warp. Returns 0 if physical time warp\nis active.\n\nIf requested time warp factor cannot be set, it will be set to the next\nlowest possible value. For example, if the vessel is too close to a\nplanet. See <a href=\"http://wiki.kerbalspaceprogram.com/wiki/Time_warp\">\nthe KSP wiki</a> for details.\n</summary>\n</doc>"
      },
      "set_RailsWarpFactor": {
        "parameters": [
          {
            "name": "value",
            "type": "int32"
          }
        ],
        "attributes": [
          "Property.Set(RailsWarpFactor)"
        ],
        "documentation": "<doc>\n<summary>\nThe time warp rate, using regular \"on-rails\" time warp. A value between\n0 and 7 inclusive. 0 means no time warp. Returns 0 if physical time warp\nis active.\n\nIf requested time warp factor cannot be set, it will be set to the next\nlowest possible value. For example, if the vessel is too close to a\nplanet. See <a href=\"http://wiki.kerbalspaceprogram.com/wiki/Time_warp\">\nthe KSP wiki</a> for details.\n</summary>\n</doc>"
      },
      "get_PhysicsWarpFactor": {
        "parameters": [],
        "return_type": "int32",
        "attributes": [
          "Property.Get(PhysicsWarpFactor)"
        ],
        "documentation": "<doc>\n<summary>\nThe physical time warp rate. A value between 0 and 3 inclusive. 0 means\nno time warp. Returns 0 if regular \"on-rails\" time warp is active.\n</summary>\n</doc>"
      },
      "set_PhysicsWarpFactor": {
        "parameters": [
          {
            "name": "value",
            "type": "int32"
          }
        ],
        "attributes": [
          "Property.Set(PhysicsWarpFactor)"
        ],
        "documentation": "<doc>\n<summary>\nThe physical time warp rate. A value between 0 and 3 inclusive. 0 means\nno time warp. Returns 0 if regular \"on-rails\" time warp is active.\n</summary>\n</doc>"
      },
      "get_MaximumRailsWarpFactor": {
        "parameters": [],
        "return_type": "int32",
        "attributes": [
          "Property.Get(MaximumRailsWarpFactor)"
        ],
        "documentation": "<doc>\n<summary>\nThe current maximum regular \"on-rails\" warp factor that can be set.\nA value between 0 and 7 inclusive.  See\n<a href=\"http://wiki.kerbalspaceprogram.com/wiki/Time_warp\">the KSP wiki</a> for details.\n</summary>\n</doc>"
      },
      "get_FARAvailable": {
        "parameters": [],
        "return_type": "bool",
        "attributes": [
          "Property.Get(FARAvailable)"
        ],
        "documentation": "<doc>\n<summary>\nWhether <a href=\"http://forum.kerbalspaceprogram.com/index.php?/topic/19321-105-ferram-aerospace-research-v01557-johnson-21816/\">Ferram Aerospace Research</a> is installed.\n</summary>\n</doc>"
      },
      "AutoPilot_Engage": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "attributes": [
          "Class.Method(SpaceCenter.AutoPilot,Engage)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)"
        ],
        "documentation": "<doc>\n<summary>\nEngage the auto-pilot.\n</summary>\n</doc>"
      },
      "AutoPilot_Disengage": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "attributes": [
          "Class.Method(SpaceCenter.AutoPilot,Disengage)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)"
        ],
        "documentation": "<doc>\n<summary>\nDisengage the auto-pilot.\n</summary>\n</doc>"
      },
      "AutoPilot_Wait": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "attributes": [
          "Class.Method(SpaceCenter.AutoPilot,Wait)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)"
        ],
        "documentation": "<doc>\n<summary>\nBlocks until the vessel is pointing in the target direction and has the target roll (if set).\n</summary>\n</doc>"
      },
      "AutoPilot_TargetPitchAndHeading": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "pitch",
            "type": "float"
          },
          {
            "name": "heading",
            "type": "float"
          }
        ],
        "attributes": [
          "Class.Method(SpaceCenter.AutoPilot,TargetPitchAndHeading)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)"
        ],
        "documentation": "<doc>\n<summary>\nSet target pitch and heading angles.\n</summary>\n<param name=\"pitch\">Target pitch angle, in degrees between -90° and +90°.</param>\n<param name=\"heading\">Target heading angle, in degrees between 0° and 360°.</param>\n</doc>"
      },
      "AutoPilot_get_Error": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.AutoPilot,Error)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)"
        ],
        "documentation": "<doc>\n<summary>\nThe error, in degrees, between the direction the ship has been asked\nto point in and the direction it is pointing in. Returns zero if the auto-pilot\nhas not been engaged and SAS is not enabled or is in stability assist mode.\n</summary>\n</doc>"
      },
      "AutoPilot_get_PitchError": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.AutoPilot,PitchError)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)"
        ],
        "documentation": "<doc>\n<summary>\nThe error, in degrees, between the vessels current and target pitch.\nReturns zero if the auto-pilot has not been engaged.\n</summary>\n</doc>"
      },
      "AutoPilot_get_HeadingError": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.AutoPilot,HeadingError)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)"
        ],
        "documentation": "<doc>\n<summary>\nThe error, in degrees, between the vessels current and target heading.\nReturns zero if the auto-pilot has not been engaged.\n</summary>\n</doc>"
      },
      "AutoPilot_get_RollError": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.AutoPilot,RollError)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)"
        ],
        "documentation": "<doc>\n<summary>\nThe error, in degrees, between the vessels current and target roll.\nReturns zero if the auto-pilot has not been engaged or no target roll is set.\n</summary>\n</doc>"
      },
      "AutoPilot_get_ReferenceFrame": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.AutoPilot,ReferenceFrame)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)",
          "ReturnType.Class(SpaceCenter.ReferenceFrame)"
        ],
        "documentation": "<doc>\n<summary>\nThe reference frame for the target direction (<see cref=\"M:SpaceCenter.AutoPilot.TargetDirection\" />).\n</summary>\n<remarks>\nAn error will be thrown if this property is set to a reference frame that rotates with the vessel being controlled,\nas it is impossible to rotate the vessel in such a reference frame. \n</remarks>\n</doc>"
      },
      "AutoPilot_set_ReferenceFrame": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "uint64"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.AutoPilot,ReferenceFrame)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)",
          "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
        ],
        "documentation": "<doc>\n<summary>\nThe reference frame for the target direction (<see cref=\"M:SpaceCenter.AutoPilot.TargetDirection\" />).\n</summary>\n<remarks>\nAn error will be thrown if this property is set to a reference frame that rotates with the vessel being controlled,\nas it is impossible to rotate the vessel in such a reference frame. \n</remarks>\n</doc>"
      },
      "AutoPilot_get_TargetPitch": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.AutoPilot,TargetPitch)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)"
        ],
        "documentation": "<doc>\n<summary>\nThe target pitch, in degrees, between -90° and +90°.\n</summary>\n</doc>"
      },
      "AutoPilot_set_TargetPitch": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "float"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.AutoPilot,TargetPitch)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)"
        ],
        "documentation": "<doc>\n<summary>\nThe target pitch, in degrees, between -90° and +90°.\n</summary>\n</doc>"
      },
      "AutoPilot_get_TargetHeading": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.AutoPilot,TargetHeading)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)"
        ],
        "documentation": "<doc>\n<summary>\nThe target heading, in degrees, between 0° and 360°.\n</summary>\n</doc>"
      },
      "AutoPilot_set_TargetHeading": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "float"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.AutoPilot,TargetHeading)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)"
        ],
        "documentation": "<doc>\n<summary>\nThe target heading, in degrees, between 0° and 360°.\n</summary>\n</doc>"
      },
      "AutoPilot_get_TargetRoll": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.AutoPilot,TargetRoll)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)"
        ],
        "documentation": "<doc>\n<summary>\nThe target roll, in degrees. <c>NaN</c> if no target roll is set.\n</summary>\n</doc>"
      },
      "AutoPilot_set_TargetRoll": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "float"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.AutoPilot,TargetRoll)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)"
        ],
        "documentation": "<doc>\n<summary>\nThe target roll, in degrees. <c>NaN</c> if no target roll is set.\n</summary>\n</doc>"
      },
      "AutoPilot_get_TargetDirection": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.AutoPilot,TargetDirection)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nDirection vector corresponding to the target pitch and heading.\n</summary>\n</doc>"
      },
      "AutoPilot_set_TargetDirection": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "KRPC.Tuple"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.AutoPilot,TargetDirection)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)",
          "ParameterType(1).Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nDirection vector corresponding to the target pitch and heading.\n</summary>\n</doc>"
      },
      "AutoPilot_get_SAS": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.AutoPilot,SAS)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)"
        ],
        "documentation": "<doc>\n<summary>\nThe state of SAS.\n</summary>\n<remarks>Equivalent to <see cref=\"M:SpaceCenter.Control.SAS\" /></remarks>\n</doc>"
      },
      "AutoPilot_set_SAS": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.AutoPilot,SAS)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)"
        ],
        "documentation": "<doc>\n<summary>\nThe state of SAS.\n</summary>\n<remarks>Equivalent to <see cref=\"M:SpaceCenter.Control.SAS\" /></remarks>\n</doc>"
      },
      "AutoPilot_get_SASMode": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "int32",
        "attributes": [
          "Class.Property.Get(SpaceCenter.AutoPilot,SASMode)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)",
          "ReturnType.Enum(SpaceCenter.SASMode)"
        ],
        "documentation": "<doc>\n<summary>\nThe current <see cref=\"T:SpaceCenter.SASMode\" />.\nThese modes are equivalent to the mode buttons to the left of the navball that appear when SAS is enabled.\n</summary>\n<remarks>Equivalent to <see cref=\"M:SpaceCenter.Control.SASMode\" /></remarks>\n</doc>"
      },
      "AutoPilot_set_SASMode": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "int32"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.AutoPilot,SASMode)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)",
          "ParameterType(1).Enum(SpaceCenter.SASMode)"
        ],
        "documentation": "<doc>\n<summary>\nThe current <see cref=\"T:SpaceCenter.SASMode\" />.\nThese modes are equivalent to the mode buttons to the left of the navball that appear when SAS is enabled.\n</summary>\n<remarks>Equivalent to <see cref=\"M:SpaceCenter.Control.SASMode\" /></remarks>\n</doc>"
      },
      "AutoPilot_get_RollThreshold": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.AutoPilot,RollThreshold)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)"
        ],
        "documentation": "<doc>\n<summary>\nThe threshold at which the autopilot will try to match the target roll angle, if any.\nDefaults to 5 degrees.\n</summary>\n</doc>"
      },
      "AutoPilot_set_RollThreshold": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "double"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.AutoPilot,RollThreshold)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)"
        ],
        "documentation": "<doc>\n<summary>\nThe threshold at which the autopilot will try to match the target roll angle, if any.\nDefaults to 5 degrees.\n</summary>\n</doc>"
      },
      "AutoPilot_get_StoppingTime": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.AutoPilot,StoppingTime)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe maximum amount of time that the vessel should need to come to a complete stop.\nThis determines the maximum angular velocity of the vessel.\nA vector of three stopping times, in seconds, one for each of the pitch, roll and yaw axes.\nDefaults to 0.5 seconds for each axis.\n</summary>\n</doc>"
      },
      "AutoPilot_set_StoppingTime": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "KRPC.Tuple"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.AutoPilot,StoppingTime)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)",
          "ParameterType(1).Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe maximum amount of time that the vessel should need to come to a complete stop.\nThis determines the maximum angular velocity of the vessel.\nA vector of three stopping times, in seconds, one for each of the pitch, roll and yaw axes.\nDefaults to 0.5 seconds for each axis.\n</summary>\n</doc>"
      },
      "AutoPilot_get_DecelerationTime": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.AutoPilot,DecelerationTime)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe time the vessel should take to come to a stop pointing in the target direction.\nThis determines the angular acceleration used to decelerate the vessel.\nA vector of three times, in seconds, one for each of the pitch, roll and yaw axes.\nDefaults to 5 seconds for each axis.\n</summary>\n</doc>"
      },
      "AutoPilot_set_DecelerationTime": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "KRPC.Tuple"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.AutoPilot,DecelerationTime)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)",
          "ParameterType(1).Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe time the vessel should take to come to a stop pointing in the target direction.\nThis determines the angular acceleration used to decelerate the vessel.\nA vector of three times, in seconds, one for each of the pitch, roll and yaw axes.\nDefaults to 5 seconds for each axis.\n</summary>\n</doc>"
      },
      "AutoPilot_get_AttenuationAngle": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.AutoPilot,AttenuationAngle)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe angle at which the autopilot considers the vessel to be pointing close to the target.\nThis determines the midpoint of the target velocity attenuation function.\nA vector of three angles, in degrees, one for each of the pitch, roll and yaw axes.\nDefaults to 1° for each axis.\n</summary>\n</doc>"
      },
      "AutoPilot_set_AttenuationAngle": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "KRPC.Tuple"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.AutoPilot,AttenuationAngle)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)",
          "ParameterType(1).Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe angle at which the autopilot considers the vessel to be pointing close to the target.\nThis determines the midpoint of the target velocity attenuation function.\nA vector of three angles, in degrees, one for each of the pitch, roll and yaw axes.\nDefaults to 1° for each axis.\n</summary>\n</doc>"
      },
      "AutoPilot_get_AutoTune": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.AutoPilot,AutoTune)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the rotation rate controllers PID parameters should be automatically tuned using the\nvessels moment of inertia and available torque. Defaults to <c>true</c>.\nSee <see cref=\"M:SpaceCenter.AutoPilot.TimeToPeak\" /> and  <see cref=\"M:SpaceCenter.AutoPilot.Overshoot\" />.\n</summary>\n</doc>"
      },
      "AutoPilot_set_AutoTune": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.AutoPilot,AutoTune)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the rotation rate controllers PID parameters should be automatically tuned using the\nvessels moment of inertia and available torque. Defaults to <c>true</c>.\nSee <see cref=\"M:SpaceCenter.AutoPilot.TimeToPeak\" /> and  <see cref=\"M:SpaceCenter.AutoPilot.Overshoot\" />.\n</summary>\n</doc>"
      },
      "AutoPilot_get_TimeToPeak": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.AutoPilot,TimeToPeak)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe target time to peak used to autotune the PID controllers.\nA vector of three times, in seconds, for each of the pitch, roll and yaw axes.\nDefaults to 3 seconds for each axis.\n</summary>\n</doc>"
      },
      "AutoPilot_set_TimeToPeak": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "KRPC.Tuple"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.AutoPilot,TimeToPeak)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)",
          "ParameterType(1).Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe target time to peak used to autotune the PID controllers.\nA vector of three times, in seconds, for each of the pitch, roll and yaw axes.\nDefaults to 3 seconds for each axis.\n</summary>\n</doc>"
      },
      "AutoPilot_get_Overshoot": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.AutoPilot,Overshoot)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe target overshoot percentage used to autotune the PID controllers.\nA vector of three values, between 0 and 1, for each of the pitch, roll and yaw axes.\nDefaults to 0.01 for each axis.\n</summary>\n</doc>"
      },
      "AutoPilot_set_Overshoot": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "KRPC.Tuple"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.AutoPilot,Overshoot)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)",
          "ParameterType(1).Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe target overshoot percentage used to autotune the PID controllers.\nA vector of three values, between 0 and 1, for each of the pitch, roll and yaw axes.\nDefaults to 0.01 for each axis.\n</summary>\n</doc>"
      },
      "AutoPilot_get_PitchPIDGains": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.AutoPilot,PitchPIDGains)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nGains for the pitch PID controller.\n</summary>\n<remarks>\nWhen <see cref=\"M:SpaceCenter.AutoPilot.AutoTune\" /> is true, these values are updated automatically, which will overwrite any manual changes.\n</remarks>\n</doc>"
      },
      "AutoPilot_set_PitchPIDGains": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "KRPC.Tuple"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.AutoPilot,PitchPIDGains)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)",
          "ParameterType(1).Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nGains for the pitch PID controller.\n</summary>\n<remarks>\nWhen <see cref=\"M:SpaceCenter.AutoPilot.AutoTune\" /> is true, these values are updated automatically, which will overwrite any manual changes.\n</remarks>\n</doc>"
      },
      "AutoPilot_get_RollPIDGains": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.AutoPilot,RollPIDGains)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nGains for the roll PID controller.\n</summary>\n<remarks>\nWhen <see cref=\"M:SpaceCenter.AutoPilot.AutoTune\" /> is true, these values are updated automatically, which will overwrite any manual changes.\n</remarks>\n</doc>"
      },
      "AutoPilot_set_RollPIDGains": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "KRPC.Tuple"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.AutoPilot,RollPIDGains)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)",
          "ParameterType(1).Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nGains for the roll PID controller.\n</summary>\n<remarks>\nWhen <see cref=\"M:SpaceCenter.AutoPilot.AutoTune\" /> is true, these values are updated automatically, which will overwrite any manual changes.\n</remarks>\n</doc>"
      },
      "AutoPilot_get_YawPIDGains": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.AutoPilot,YawPIDGains)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nGains for the yaw PID controller.\n</summary>\n<remarks>\nWhen <see cref=\"M:SpaceCenter.AutoPilot.AutoTune\" /> is true, these values are updated automatically, which will overwrite any manual changes.\n</remarks>\n</doc>"
      },
      "AutoPilot_set_YawPIDGains": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "KRPC.Tuple"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.AutoPilot,YawPIDGains)",
          "ParameterType(0).Class(SpaceCenter.AutoPilot)",
          "ParameterType(1).Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nGains for the yaw PID controller.\n</summary>\n<remarks>\nWhen <see cref=\"M:SpaceCenter.AutoPilot.AutoTune\" /> is true, these values are updated automatically, which will overwrite any manual changes.\n</remarks>\n</doc>"
      },
      "Camera_get_Mode": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "int32",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Camera,Mode)",
          "ParameterType(0).Class(SpaceCenter.Camera)",
          "ReturnType.Enum(SpaceCenter.CameraMode)"
        ],
        "documentation": "<doc>\n<summary>\nThe current mode of the camera.\n</summary>\n</doc>"
      },
      "Camera_set_Mode": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "int32"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Camera,Mode)",
          "ParameterType(0).Class(SpaceCenter.Camera)",
          "ParameterType(1).Enum(SpaceCenter.CameraMode)"
        ],
        "documentation": "<doc>\n<summary>\nThe current mode of the camera.\n</summary>\n</doc>"
      },
      "Camera_get_Pitch": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Camera,Pitch)",
          "ParameterType(0).Class(SpaceCenter.Camera)"
        ],
        "documentation": "<doc>\n<summary>\nThe pitch of the camera, in degrees.\nA value between <see cref=\"M:SpaceCenter.Camera.MinPitch\" /> and <see cref=\"M:SpaceCenter.Camera.MaxPitch\" /></summary>\n</doc>"
      },
      "Camera_set_Pitch": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "float"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Camera,Pitch)",
          "ParameterType(0).Class(SpaceCenter.Camera)"
        ],
        "documentation": "<doc>\n<summary>\nThe pitch of the camera, in degrees.\nA value between <see cref=\"M:SpaceCenter.Camera.MinPitch\" /> and <see cref=\"M:SpaceCenter.Camera.MaxPitch\" /></summary>\n</doc>"
      },
      "Camera_get_Heading": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Camera,Heading)",
          "ParameterType(0).Class(SpaceCenter.Camera)"
        ],
        "documentation": "<doc>\n<summary>\nThe heading of the camera, in degrees.\n</summary>\n</doc>"
      },
      "Camera_set_Heading": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "float"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Camera,Heading)",
          "ParameterType(0).Class(SpaceCenter.Camera)"
        ],
        "documentation": "<doc>\n<summary>\nThe heading of the camera, in degrees.\n</summary>\n</doc>"
      },
      "Camera_get_Distance": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Camera,Distance)",
          "ParameterType(0).Class(SpaceCenter.Camera)"
        ],
        "documentation": "<doc>\n<summary>\nThe distance from the camera to the subject, in meters.\nA value between <see cref=\"M:SpaceCenter.Camera.MinDistance\" /> and <see cref=\"M:SpaceCenter.Camera.MaxDistance\" />.\n</summary>\n</doc>"
      },
      "Camera_set_Distance": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "float"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Camera,Distance)",
          "ParameterType(0).Class(SpaceCenter.Camera)"
        ],
        "documentation": "<doc>\n<summary>\nThe distance from the camera to the subject, in meters.\nA value between <see cref=\"M:SpaceCenter.Camera.MinDistance\" /> and <see cref=\"M:SpaceCenter.Camera.MaxDistance\" />.\n</summary>\n</doc>"
      },
      "Camera_get_MinPitch": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Camera,MinPitch)",
          "ParameterType(0).Class(SpaceCenter.Camera)"
        ],
        "documentation": "<doc>\n<summary>\nThe minimum pitch of the camera.\n</summary>\n</doc>"
      },
      "Camera_get_MaxPitch": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Camera,MaxPitch)",
          "ParameterType(0).Class(SpaceCenter.Camera)"
        ],
        "documentation": "<doc>\n<summary>\nThe maximum pitch of the camera.\n</summary>\n</doc>"
      },
      "Camera_get_MinDistance": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Camera,MinDistance)",
          "ParameterType(0).Class(SpaceCenter.Camera)"
        ],
        "documentation": "<doc>\n<summary>\nMinimum distance from the camera to the subject, in meters.\n</summary>\n</doc>"
      },
      "Camera_get_MaxDistance": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Camera,MaxDistance)",
          "ParameterType(0).Class(SpaceCenter.Camera)"
        ],
        "documentation": "<doc>\n<summary>\nMaximum distance from the camera to the subject, in meters.\n</summary>\n</doc>"
      },
      "Camera_get_DefaultDistance": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Camera,DefaultDistance)",
          "ParameterType(0).Class(SpaceCenter.Camera)"
        ],
        "documentation": "<doc>\n<summary>\nDefault distance from the camera to the subject, in meters.\n</summary>\n</doc>"
      },
      "Camera_get_FocussedBody": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Camera,FocussedBody)",
          "ParameterType(0).Class(SpaceCenter.Camera)",
          "ReturnType.Class(SpaceCenter.CelestialBody)"
        ],
        "documentation": "<doc>\n<summary>\nIn map mode, the celestial body that the camera is focussed on.\nReturns <c>null</c> if the camera is not focussed on a celestial body.\nReturns an error is the camera is not in map mode.\n</summary>\n</doc>"
      },
      "Camera_set_FocussedBody": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "uint64"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Camera,FocussedBody)",
          "ParameterType(0).Class(SpaceCenter.Camera)",
          "ParameterType(1).Class(SpaceCenter.CelestialBody)"
        ],
        "documentation": "<doc>\n<summary>\nIn map mode, the celestial body that the camera is focussed on.\nReturns <c>null</c> if the camera is not focussed on a celestial body.\nReturns an error is the camera is not in map mode.\n</summary>\n</doc>"
      },
      "Camera_get_FocussedVessel": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Camera,FocussedVessel)",
          "ParameterType(0).Class(SpaceCenter.Camera)",
          "ReturnType.Class(SpaceCenter.Vessel)"
        ],
        "documentation": "<doc>\n<summary>\nIn map mode, the vessel that the camera is focussed on.\nReturns <c>null</c> if the camera is not focussed on a vessel.\nReturns an error is the camera is not in map mode.\n</summary>\n</doc>"
      },
      "Camera_set_FocussedVessel": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "uint64"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Camera,FocussedVessel)",
          "ParameterType(0).Class(SpaceCenter.Camera)",
          "ParameterType(1).Class(SpaceCenter.Vessel)"
        ],
        "documentation": "<doc>\n<summary>\nIn map mode, the vessel that the camera is focussed on.\nReturns <c>null</c> if the camera is not focussed on a vessel.\nReturns an error is the camera is not in map mode.\n</summary>\n</doc>"
      },
      "Camera_get_FocussedNode": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Camera,FocussedNode)",
          "ParameterType(0).Class(SpaceCenter.Camera)",
          "ReturnType.Class(SpaceCenter.Node)"
        ],
        "documentation": "<doc>\n<summary>\nIn map mode, the maneuver node that the camera is focussed on.\nReturns <c>null</c> if the camera is not focussed on a maneuver node.\nReturns an error is the camera is not in map mode.\n</summary>\n</doc>"
      },
      "Camera_set_FocussedNode": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "uint64"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Camera,FocussedNode)",
          "ParameterType(0).Class(SpaceCenter.Camera)",
          "ParameterType(1).Class(SpaceCenter.Node)"
        ],
        "documentation": "<doc>\n<summary>\nIn map mode, the maneuver node that the camera is focussed on.\nReturns <c>null</c> if the camera is not focussed on a maneuver node.\nReturns an error is the camera is not in map mode.\n</summary>\n</doc>"
      },
      "CelestialBody_SurfaceHeight": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "latitude",
            "type": "double"
          },
          {
            "name": "longitude",
            "type": "double"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Method(SpaceCenter.CelestialBody,SurfaceHeight)",
          "ParameterType(0).Class(SpaceCenter.CelestialBody)"
        ],
        "documentation": "<doc>\n<summary>\nThe height of the surface relative to mean sea level at the given position,\nin meters. When over water this is equal to 0.\n</summary>\n<param name=\"latitude\">Latitude in degrees</param>\n<param name=\"longitude\">Longitude in degrees</param>\n</doc>"
      },
      "CelestialBody_BedrockHeight": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "latitude",
            "type": "double"
          },
          {
            "name": "longitude",
            "type": "double"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Method(SpaceCenter.CelestialBody,BedrockHeight)",
          "ParameterType(0).Class(SpaceCenter.CelestialBody)"
        ],
        "documentation": "<doc>\n<summary>\nThe height of the surface relative to mean sea level at the given position,\nin meters. When over water, this is the height of the sea-bed and is therefore a\nnegative value.\n</summary>\n<param name=\"latitude\">Latitude in degrees</param>\n<param name=\"longitude\">Longitude in degrees</param>\n</doc>"
      },
      "CelestialBody_MSLPosition": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "latitude",
            "type": "double"
          },
          {
            "name": "longitude",
            "type": "double"
          },
          {
            "name": "referenceFrame",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Method(SpaceCenter.CelestialBody,MSLPosition)",
          "ParameterType(0).Class(SpaceCenter.CelestialBody)",
          "ParameterType(3).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe position at mean sea level at the given latitude and longitude, in the given reference frame.\n</summary>\n<param name=\"latitude\">Latitude in degrees</param>\n<param name=\"longitude\">Longitude in degrees</param>\n<param name=\"referenceFrame\">Reference frame for the returned position vector</param>\n</doc>"
      },
      "CelestialBody_SurfacePosition": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "latitude",
            "type": "double"
          },
          {
            "name": "longitude",
            "type": "double"
          },
          {
            "name": "referenceFrame",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Method(SpaceCenter.CelestialBody,SurfacePosition)",
          "ParameterType(0).Class(SpaceCenter.CelestialBody)",
          "ParameterType(3).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe position of the surface at the given latitude and longitude, in the given\nreference frame. When over water, this is the position of the surface of the water.\n</summary>\n<param name=\"latitude\">Latitude in degrees</param>\n<param name=\"longitude\">Longitude in degrees</param>\n<param name=\"referenceFrame\">Reference frame for the returned position vector</param>\n</doc>"
      },
      "CelestialBody_BedrockPosition": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "latitude",
            "type": "double"
          },
          {
            "name": "longitude",
            "type": "double"
          },
          {
            "name": "referenceFrame",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Method(SpaceCenter.CelestialBody,BedrockPosition)",
          "ParameterType(0).Class(SpaceCenter.CelestialBody)",
          "ParameterType(3).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe position of the surface at the given latitude and longitude, in the given\nreference frame. When over water, this is the position at the bottom of the sea-bed.\n</summary>\n<param name=\"latitude\">Latitude in degrees</param>\n<param name=\"longitude\">Longitude in degrees</param>\n<param name=\"referenceFrame\">Reference frame for the returned position vector</param>\n</doc>"
      },
      "CelestialBody_BiomeAt": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "latitude",
            "type": "double"
          },
          {
            "name": "longitude",
            "type": "double"
          }
        ],
        "return_type": "string",
        "attributes": [
          "Class.Method(SpaceCenter.CelestialBody,BiomeAt)",
          "ParameterType(0).Class(SpaceCenter.CelestialBody)"
        ],
        "documentation": "<doc>\n<summary>\nThe biomes at the given latitude and longitude, in degrees.\n</summary>\n</doc>"
      },
      "CelestialBody_Position": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "referenceFrame",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Method(SpaceCenter.CelestialBody,Position)",
          "ParameterType(0).Class(SpaceCenter.CelestialBody)",
          "ParameterType(1).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nReturns the position vector of the center of the body in the specified reference frame.\n</summary>\n<param name=\"referenceFrame\"></param>\n</doc>"
      },
      "CelestialBody_Velocity": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "referenceFrame",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Method(SpaceCenter.CelestialBody,Velocity)",
          "ParameterType(0).Class(SpaceCenter.CelestialBody)",
          "ParameterType(1).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nReturns the velocity vector of the body in the specified reference frame.\n</summary>\n<param name=\"referenceFrame\"></param>\n</doc>"
      },
      "CelestialBody_Rotation": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "referenceFrame",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Method(SpaceCenter.CelestialBody,Rotation)",
          "ParameterType(0).Class(SpaceCenter.CelestialBody)",
          "ParameterType(1).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(double,double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nReturns the rotation of the body in the specified reference frame.\n</summary>\n<param name=\"referenceFrame\"></param>\n</doc>"
      },
      "CelestialBody_Direction": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "referenceFrame",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Method(SpaceCenter.CelestialBody,Direction)",
          "ParameterType(0).Class(SpaceCenter.CelestialBody)",
          "ParameterType(1).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nReturns the direction in which the north pole of the celestial body is\npointing, as a unit vector, in the specified reference frame.\n</summary>\n<param name=\"referenceFrame\"></param>\n</doc>"
      },
      "CelestialBody_AngularVelocity": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "referenceFrame",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Method(SpaceCenter.CelestialBody,AngularVelocity)",
          "ParameterType(0).Class(SpaceCenter.CelestialBody)",
          "ParameterType(1).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nReturns the angular velocity of the body in the specified reference\nframe. The magnitude of the vector is the rotational speed of the body, in\nradians per second, and the direction of the vector indicates the axis of\nrotation, using the right-hand rule.\n</summary>\n<param name=\"referenceFrame\"></param>\n</doc>"
      },
      "CelestialBody_get_Name": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "string",
        "attributes": [
          "Class.Property.Get(SpaceCenter.CelestialBody,Name)",
          "ParameterType(0).Class(SpaceCenter.CelestialBody)"
        ],
        "documentation": "<doc>\n<summary>\nThe name of the body.\n</summary>\n</doc>"
      },
      "CelestialBody_get_Satellites": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.CelestialBody,Satellites)",
          "ParameterType(0).Class(SpaceCenter.CelestialBody)",
          "ReturnType.List(Class(SpaceCenter.CelestialBody))"
        ],
        "documentation": "<doc>\n<summary>\nA list of celestial bodies that are in orbit around this celestial body.\n</summary>\n</doc>"
      },
      "CelestialBody_get_Mass": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.CelestialBody,Mass)",
          "ParameterType(0).Class(SpaceCenter.CelestialBody)"
        ],
        "documentation": "<doc>\n<summary>\nThe mass of the body, in kilograms.\n</summary>\n</doc>"
      },
      "CelestialBody_get_GravitationalParameter": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.CelestialBody,GravitationalParameter)",
          "ParameterType(0).Class(SpaceCenter.CelestialBody)"
        ],
        "documentation": "<doc>\n<summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Standard_gravitational_parameter\">standard\ngravitational parameter</a> of the body in <math>m^3s^{-2}</math>.\n</summary>\n</doc>"
      },
      "CelestialBody_get_SurfaceGravity": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.CelestialBody,SurfaceGravity)",
          "ParameterType(0).Class(SpaceCenter.CelestialBody)"
        ],
        "documentation": "<doc>\n<summary>\nThe acceleration due to gravity at sea level (mean altitude) on the body, in <math>m/s^2</math>.\n</summary>\n</doc>"
      },
      "CelestialBody_get_RotationalPeriod": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.CelestialBody,RotationalPeriod)",
          "ParameterType(0).Class(SpaceCenter.CelestialBody)"
        ],
        "documentation": "<doc>\n<summary>\nThe sidereal rotational period of the body, in seconds.\n</summary>\n</doc>"
      },
      "CelestialBody_get_RotationalSpeed": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.CelestialBody,RotationalSpeed)",
          "ParameterType(0).Class(SpaceCenter.CelestialBody)"
        ],
        "documentation": "<doc>\n<summary>\nThe rotational speed of the body, in radians per second.\n</summary>\n</doc>"
      },
      "CelestialBody_get_EquatorialRadius": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.CelestialBody,EquatorialRadius)",
          "ParameterType(0).Class(SpaceCenter.CelestialBody)"
        ],
        "documentation": "<doc>\n<summary>\nThe equatorial radius of the body, in meters.\n</summary>\n</doc>"
      },
      "CelestialBody_get_SphereOfInfluence": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.CelestialBody,SphereOfInfluence)",
          "ParameterType(0).Class(SpaceCenter.CelestialBody)"
        ],
        "documentation": "<doc>\n<summary>\nThe radius of the sphere of influence of the body, in meters.\n</summary>\n</doc>"
      },
      "CelestialBody_get_Orbit": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.CelestialBody,Orbit)",
          "ParameterType(0).Class(SpaceCenter.CelestialBody)",
          "ReturnType.Class(SpaceCenter.Orbit)"
        ],
        "documentation": "<doc>\n<summary>\nThe orbit of the body.\n</summary>\n</doc>"
      },
      "CelestialBody_get_HasAtmosphere": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.CelestialBody,HasAtmosphere)",
          "ParameterType(0).Class(SpaceCenter.CelestialBody)"
        ],
        "documentation": "<doc>\n<summary><c>true</c> if the body has an atmosphere.\n</summary>\n</doc>"
      },
      "CelestialBody_get_AtmosphereDepth": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.CelestialBody,AtmosphereDepth)",
          "ParameterType(0).Class(SpaceCenter.CelestialBody)"
        ],
        "documentation": "<doc>\n<summary>\nThe depth of the atmosphere, in meters.\n</summary>\n</doc>"
      },
      "CelestialBody_get_HasAtmosphericOxygen": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.CelestialBody,HasAtmosphericOxygen)",
          "ParameterType(0).Class(SpaceCenter.CelestialBody)"
        ],
        "documentation": "<doc>\n<summary><c>true</c> if there is oxygen in the atmosphere, required for air-breathing engines.\n</summary>\n</doc>"
      },
      "CelestialBody_get_Biomes": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Set",
        "attributes": [
          "Class.Property.Get(SpaceCenter.CelestialBody,Biomes)",
          "ParameterType(0).Class(SpaceCenter.CelestialBody)",
          "ReturnType.Set(string)"
        ],
        "documentation": "<doc>\n<summary>\nThe biomes present on this body.\n</summary>\n</doc>"
      },
      "CelestialBody_get_FlyingHighAltitudeThreshold": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.CelestialBody,FlyingHighAltitudeThreshold)",
          "ParameterType(0).Class(SpaceCenter.CelestialBody)"
        ],
        "documentation": "<doc>\n<summary>\nThe altitude, in meters, above which a vessel is considered to be flying \"high\" when doing science.\n</summary>\n</doc>"
      },
      "CelestialBody_get_SpaceHighAltitudeThreshold": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.CelestialBody,SpaceHighAltitudeThreshold)",
          "ParameterType(0).Class(SpaceCenter.CelestialBody)"
        ],
        "documentation": "<doc>\n<summary>\nThe altitude, in meters, above which a vessel is considered to be in \"high\" space when doing science.\n</summary>\n</doc>"
      },
      "CelestialBody_get_ReferenceFrame": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.CelestialBody,ReferenceFrame)",
          "ParameterType(0).Class(SpaceCenter.CelestialBody)",
          "ReturnType.Class(SpaceCenter.ReferenceFrame)"
        ],
        "documentation": "<doc>\n<summary>\nThe reference frame that is fixed relative to the celestial body.\n<list type=\"bullet\"><item><description>The origin is at the center of the body.\n</description></item><item><description>The axes rotate with the body.</description></item><item><description>The x-axis points from the center of the body\ntowards the intersection of the prime meridian and equator (the\nposition at 0° longitude, 0° latitude).</description></item><item><description>The y-axis points from the center of the body\ntowards the north pole.</description></item><item><description>The z-axis points from the center of the body\ntowards the equator at 90°E longitude.</description></item></list></summary>\n</doc>"
      },
      "CelestialBody_get_NonRotatingReferenceFrame": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.CelestialBody,NonRotatingReferenceFrame)",
          "ParameterType(0).Class(SpaceCenter.CelestialBody)",
          "ReturnType.Class(SpaceCenter.ReferenceFrame)"
        ],
        "documentation": "<doc>\n<summary>\nThe reference frame that is fixed relative to this celestial body, and\norientated in a fixed direction (it does not rotate with the body).\n<list type=\"bullet\"><item><description>The origin is at the center of the body.</description></item><item><description>The axes do not rotate.</description></item><item><description>The x-axis points in an arbitrary direction through the\nequator.</description></item><item><description>The y-axis points from the center of the body towards\nthe north pole.</description></item><item><description>The z-axis points in an arbitrary direction through the\nequator.</description></item></list></summary>\n</doc>"
      },
      "CelestialBody_get_OrbitalReferenceFrame": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.CelestialBody,OrbitalReferenceFrame)",
          "ParameterType(0).Class(SpaceCenter.CelestialBody)",
          "ReturnType.Class(SpaceCenter.ReferenceFrame)"
        ],
        "documentation": "<doc>\n<summary>\nGets the reference frame that is fixed relative to this celestial body, but\norientated with the body's orbital prograde/normal/radial directions.\n<list type=\"bullet\"><item><description>The origin is at the center of the body.\n</description></item><item><description>The axes rotate with the orbital prograde/normal/radial\ndirections.</description></item><item><description>The x-axis points in the orbital anti-radial direction.\n</description></item><item><description>The y-axis points in the orbital prograde direction.\n</description></item><item><description>The z-axis points in the orbital normal direction.\n</description></item></list></summary>\n</doc>"
      },
      "Control_ActivateNextStage": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Method(SpaceCenter.Control,ActivateNextStage)",
          "ParameterType(0).Class(SpaceCenter.Control)",
          "ReturnType.List(Class(SpaceCenter.Vessel))"
        ],
        "documentation": "<doc>\n<summary>\nActivates the next stage. Equivalent to pressing the space bar in-game.\n</summary>\n<returns>A list of vessel objects that are jettisoned from the active vessel.</returns>\n</doc>"
      },
      "Control_GetActionGroup": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "group",
            "type": "uint32"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Method(SpaceCenter.Control,GetActionGroup)",
          "ParameterType(0).Class(SpaceCenter.Control)"
        ],
        "documentation": "<doc>\n<summary>\nReturns <c>true</c> if the given action group is enabled.\n</summary>\n<param name=\"group\">\nA number between 0 and 9 inclusive,\nor between 0 and 250 inclusive when the <a href=\"http://forum.kerbalspaceprogram.com/index.php?/topic/67235-12oct3116-action-groups-extended-250-action-groups-in-flight-editing-now-kosremotetech\">Extended Action Groups mod</a> is installed.\n</param>\n</doc>"
      },
      "Control_SetActionGroup": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "group",
            "type": "uint32"
          },
          {
            "name": "state",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Method(SpaceCenter.Control,SetActionGroup)",
          "ParameterType(0).Class(SpaceCenter.Control)"
        ],
        "documentation": "<doc>\n<summary>\nSets the state of the given action group.\n</summary>\n<param name=\"group\">\nA number between 0 and 9 inclusive,\nor between 0 and 250 inclusive when the <a href=\"http://forum.kerbalspaceprogram.com/index.php?/topic/67235-12oct3116-action-groups-extended-250-action-groups-in-flight-editing-now-kosremotetech\">Extended Action Groups mod</a> is installed.\n</param>\n<param name=\"state\"></param>\n</doc>"
      },
      "Control_ToggleActionGroup": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "group",
            "type": "uint32"
          }
        ],
        "attributes": [
          "Class.Method(SpaceCenter.Control,ToggleActionGroup)",
          "ParameterType(0).Class(SpaceCenter.Control)"
        ],
        "documentation": "<doc>\n<summary>\nToggles the state of the given action group.\n</summary>\n<param name=\"group\">\nA number between 0 and 9 inclusive,\nor between 0 and 250 inclusive when the <a href=\"http://forum.kerbalspaceprogram.com/index.php?/topic/67235-12oct3116-action-groups-extended-250-action-groups-in-flight-editing-now-kosremotetech\">Extended Action Groups mod</a> is installed.\n</param>\n</doc>"
      },
      "Control_AddNode": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "ut",
            "type": "double"
          },
          {
            "name": "prograde",
            "type": "float",
            "default_value": "AAAAAA=="
          },
          {
            "name": "normal",
            "type": "float",
            "default_value": "AAAAAA=="
          },
          {
            "name": "radial",
            "type": "float",
            "default_value": "AAAAAA=="
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Method(SpaceCenter.Control,AddNode)",
          "ParameterType(0).Class(SpaceCenter.Control)",
          "ReturnType.Class(SpaceCenter.Node)"
        ],
        "documentation": "<doc>\n<summary>\nCreates a maneuver node at the given universal time, and returns a\n<see cref=\"T:SpaceCenter.Node\" /> object that can be used to modify it.\nOptionally sets the magnitude of the delta-v for the maneuver node\nin the prograde, normal and radial directions.\n</summary>\n<param name=\"ut\">Universal time of the maneuver node.</param>\n<param name=\"prograde\">Delta-v in the prograde direction.</param>\n<param name=\"normal\">Delta-v in the normal direction.</param>\n<param name=\"radial\">Delta-v in the radial direction.</param>\n</doc>"
      },
      "Control_RemoveNodes": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "attributes": [
          "Class.Method(SpaceCenter.Control,RemoveNodes)",
          "ParameterType(0).Class(SpaceCenter.Control)"
        ],
        "documentation": "<doc>\n<summary>\nRemove all maneuver nodes.\n</summary>\n</doc>"
      },
      "Control_get_SAS": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Control,SAS)",
          "ParameterType(0).Class(SpaceCenter.Control)"
        ],
        "documentation": "<doc>\n<summary>\nThe state of SAS.\n</summary>\n<remarks>Equivalent to <see cref=\"M:SpaceCenter.AutoPilot.SAS\" /></remarks>\n</doc>"
      },
      "Control_set_SAS": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Control,SAS)",
          "ParameterType(0).Class(SpaceCenter.Control)"
        ],
        "documentation": "<doc>\n<summary>\nThe state of SAS.\n</summary>\n<remarks>Equivalent to <see cref=\"M:SpaceCenter.AutoPilot.SAS\" /></remarks>\n</doc>"
      },
      "Control_get_SASMode": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "int32",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Control,SASMode)",
          "ParameterType(0).Class(SpaceCenter.Control)",
          "ReturnType.Enum(SpaceCenter.SASMode)"
        ],
        "documentation": "<doc>\n<summary>\nThe current <see cref=\"T:SpaceCenter.SASMode\" />.\nThese modes are equivalent to the mode buttons to\nthe left of the navball that appear when SAS is enabled.\n</summary>\n<remarks>Equivalent to <see cref=\"M:SpaceCenter.AutoPilot.SASMode\" /></remarks>\n</doc>"
      },
      "Control_set_SASMode": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "int32"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Control,SASMode)",
          "ParameterType(0).Class(SpaceCenter.Control)",
          "ParameterType(1).Enum(SpaceCenter.SASMode)"
        ],
        "documentation": "<doc>\n<summary>\nThe current <see cref=\"T:SpaceCenter.SASMode\" />.\nThese modes are equivalent to the mode buttons to\nthe left of the navball that appear when SAS is enabled.\n</summary>\n<remarks>Equivalent to <see cref=\"M:SpaceCenter.AutoPilot.SASMode\" /></remarks>\n</doc>"
      },
      "Control_get_SpeedMode": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "int32",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Control,SpeedMode)",
          "ParameterType(0).Class(SpaceCenter.Control)",
          "ReturnType.Enum(SpaceCenter.SpeedMode)"
        ],
        "documentation": "<doc>\n<summary>\nThe current <see cref=\"T:SpaceCenter.SpeedMode\" /> of the navball.\nThis is the mode displayed next to the speed at the top of the navball.\n</summary>\n</doc>"
      },
      "Control_set_SpeedMode": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "int32"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Control,SpeedMode)",
          "ParameterType(0).Class(SpaceCenter.Control)",
          "ParameterType(1).Enum(SpaceCenter.SpeedMode)"
        ],
        "documentation": "<doc>\n<summary>\nThe current <see cref=\"T:SpaceCenter.SpeedMode\" /> of the navball.\nThis is the mode displayed next to the speed at the top of the navball.\n</summary>\n</doc>"
      },
      "Control_get_RCS": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Control,RCS)",
          "ParameterType(0).Class(SpaceCenter.Control)"
        ],
        "documentation": "<doc>\n<summary>\nThe state of RCS.\n</summary>\n</doc>"
      },
      "Control_set_RCS": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Control,RCS)",
          "ParameterType(0).Class(SpaceCenter.Control)"
        ],
        "documentation": "<doc>\n<summary>\nThe state of RCS.\n</summary>\n</doc>"
      },
      "Control_get_Gear": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Control,Gear)",
          "ParameterType(0).Class(SpaceCenter.Control)"
        ],
        "documentation": "<doc>\n<summary>\nThe state of the landing gear/legs.\n</summary>\n</doc>"
      },
      "Control_set_Gear": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Control,Gear)",
          "ParameterType(0).Class(SpaceCenter.Control)"
        ],
        "documentation": "<doc>\n<summary>\nThe state of the landing gear/legs.\n</summary>\n</doc>"
      },
      "Control_get_Lights": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Control,Lights)",
          "ParameterType(0).Class(SpaceCenter.Control)"
        ],
        "documentation": "<doc>\n<summary>\nThe state of the lights.\n</summary>\n</doc>"
      },
      "Control_set_Lights": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Control,Lights)",
          "ParameterType(0).Class(SpaceCenter.Control)"
        ],
        "documentation": "<doc>\n<summary>\nThe state of the lights.\n</summary>\n</doc>"
      },
      "Control_get_Brakes": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Control,Brakes)",
          "ParameterType(0).Class(SpaceCenter.Control)"
        ],
        "documentation": "<doc>\n<summary>\nThe state of the wheel brakes.\n</summary>\n</doc>"
      },
      "Control_set_Brakes": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Control,Brakes)",
          "ParameterType(0).Class(SpaceCenter.Control)"
        ],
        "documentation": "<doc>\n<summary>\nThe state of the wheel brakes.\n</summary>\n</doc>"
      },
      "Control_get_Abort": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Control,Abort)",
          "ParameterType(0).Class(SpaceCenter.Control)"
        ],
        "documentation": "<doc>\n<summary>\nThe state of the abort action group.\n</summary>\n</doc>"
      },
      "Control_set_Abort": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Control,Abort)",
          "ParameterType(0).Class(SpaceCenter.Control)"
        ],
        "documentation": "<doc>\n<summary>\nThe state of the abort action group.\n</summary>\n</doc>"
      },
      "Control_get_Throttle": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Control,Throttle)",
          "ParameterType(0).Class(SpaceCenter.Control)"
        ],
        "documentation": "<doc>\n<summary>\nThe state of the throttle. A value between 0 and 1.\n</summary>\n</doc>"
      },
      "Control_set_Throttle": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "float"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Control,Throttle)",
          "ParameterType(0).Class(SpaceCenter.Control)"
        ],
        "documentation": "<doc>\n<summary>\nThe state of the throttle. A value between 0 and 1.\n</summary>\n</doc>"
      },
      "Control_get_Pitch": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Control,Pitch)",
          "ParameterType(0).Class(SpaceCenter.Control)"
        ],
        "documentation": "<doc>\n<summary>\nThe state of the pitch control.\nA value between -1 and 1.\nEquivalent to the w and s keys.\n</summary>\n</doc>"
      },
      "Control_set_Pitch": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "float"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Control,Pitch)",
          "ParameterType(0).Class(SpaceCenter.Control)"
        ],
        "documentation": "<doc>\n<summary>\nThe state of the pitch control.\nA value between -1 and 1.\nEquivalent to the w and s keys.\n</summary>\n</doc>"
      },
      "Control_get_Yaw": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Control,Yaw)",
          "ParameterType(0).Class(SpaceCenter.Control)"
        ],
        "documentation": "<doc>\n<summary>\nThe state of the yaw control.\nA value between -1 and 1.\nEquivalent to the a and d keys.\n</summary>\n</doc>"
      },
      "Control_set_Yaw": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "float"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Control,Yaw)",
          "ParameterType(0).Class(SpaceCenter.Control)"
        ],
        "documentation": "<doc>\n<summary>\nThe state of the yaw control.\nA value between -1 and 1.\nEquivalent to the a and d keys.\n</summary>\n</doc>"
      },
      "Control_get_Roll": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Control,Roll)",
          "ParameterType(0).Class(SpaceCenter.Control)"
        ],
        "documentation": "<doc>\n<summary>\nThe state of the roll control.\nA value between -1 and 1.\nEquivalent to the q and e keys.\n</summary>\n</doc>"
      },
      "Control_set_Roll": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "float"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Control,Roll)",
          "ParameterType(0).Class(SpaceCenter.Control)"
        ],
        "documentation": "<doc>\n<summary>\nThe state of the roll control.\nA value between -1 and 1.\nEquivalent to the q and e keys.\n</summary>\n</doc>"
      },
      "Control_get_Forward": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Control,Forward)",
          "ParameterType(0).Class(SpaceCenter.Control)"
        ],
        "documentation": "<doc>\n<summary>\nThe state of the forward translational control.\nA value between -1 and 1.\nEquivalent to the h and n keys.\n</summary>\n</doc>"
      },
      "Control_set_Forward": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "float"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Control,Forward)",
          "ParameterType(0).Class(SpaceCenter.Control)"
        ],
        "documentation": "<doc>\n<summary>\nThe state of the forward translational control.\nA value between -1 and 1.\nEquivalent to the h and n keys.\n</summary>\n</doc>"
      },
      "Control_get_Up": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Control,Up)",
          "ParameterType(0).Class(SpaceCenter.Control)"
        ],
        "documentation": "<doc>\n<summary>\nThe state of the up translational control.\nA value between -1 and 1.\nEquivalent to the i and k keys.\n</summary>\n</doc>"
      },
      "Control_set_Up": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "float"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Control,Up)",
          "ParameterType(0).Class(SpaceCenter.Control)"
        ],
        "documentation": "<doc>\n<summary>\nThe state of the up translational control.\nA value between -1 and 1.\nEquivalent to the i and k keys.\n</summary>\n</doc>"
      },
      "Control_get_Right": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Control,Right)",
          "ParameterType(0).Class(SpaceCenter.Control)"
        ],
        "documentation": "<doc>\n<summary>\nThe state of the right translational control.\nA value between -1 and 1.\nEquivalent to the j and l keys.\n</summary>\n</doc>"
      },
      "Control_set_Right": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "float"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Control,Right)",
          "ParameterType(0).Class(SpaceCenter.Control)"
        ],
        "documentation": "<doc>\n<summary>\nThe state of the right translational control.\nA value between -1 and 1.\nEquivalent to the j and l keys.\n</summary>\n</doc>"
      },
      "Control_get_WheelThrottle": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Control,WheelThrottle)",
          "ParameterType(0).Class(SpaceCenter.Control)"
        ],
        "documentation": "<doc>\n<summary>\nThe state of the wheel throttle.\nA value between -1 and 1.\nA value of 1 rotates the wheels forwards, a value of -1 rotates\nthe wheels backwards.\n</summary>\n</doc>"
      },
      "Control_set_WheelThrottle": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "float"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Control,WheelThrottle)",
          "ParameterType(0).Class(SpaceCenter.Control)"
        ],
        "documentation": "<doc>\n<summary>\nThe state of the wheel throttle.\nA value between -1 and 1.\nA value of 1 rotates the wheels forwards, a value of -1 rotates\nthe wheels backwards.\n</summary>\n</doc>"
      },
      "Control_get_WheelSteering": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Control,WheelSteering)",
          "ParameterType(0).Class(SpaceCenter.Control)"
        ],
        "documentation": "<doc>\n<summary>\nThe state of the wheel steering.\nA value between -1 and 1.\nA value of 1 steers to the left, and a value of -1 steers to the right.\n</summary>\n</doc>"
      },
      "Control_set_WheelSteering": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "float"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Control,WheelSteering)",
          "ParameterType(0).Class(SpaceCenter.Control)"
        ],
        "documentation": "<doc>\n<summary>\nThe state of the wheel steering.\nA value between -1 and 1.\nA value of 1 steers to the left, and a value of -1 steers to the right.\n</summary>\n</doc>"
      },
      "Control_get_CurrentStage": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "int32",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Control,CurrentStage)",
          "ParameterType(0).Class(SpaceCenter.Control)"
        ],
        "documentation": "<doc>\n<summary>\nThe current stage of the vessel. Corresponds to the stage number in\nthe in-game UI.\n</summary>\n</doc>"
      },
      "Control_get_Nodes": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Control,Nodes)",
          "ParameterType(0).Class(SpaceCenter.Control)",
          "ReturnType.List(Class(SpaceCenter.Node))"
        ],
        "documentation": "<doc>\n<summary>\nReturns a list of all existing maneuver nodes, ordered by time from first to last.\n</summary>\n</doc>"
      },
      "Flight_get_GForce": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,GForce)",
          "ParameterType(0).Class(SpaceCenter.Flight)"
        ],
        "documentation": "<doc>\n<summary>\nThe current G force acting on the vessel in <math>m/s^2</math>.\n</summary>\n</doc>"
      },
      "Flight_get_MeanAltitude": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,MeanAltitude)",
          "ParameterType(0).Class(SpaceCenter.Flight)"
        ],
        "documentation": "<doc>\n<summary>\nThe altitude above sea level, in meters.\nMeasured from the center of mass of the vessel.\n</summary>\n</doc>"
      },
      "Flight_get_SurfaceAltitude": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,SurfaceAltitude)",
          "ParameterType(0).Class(SpaceCenter.Flight)"
        ],
        "documentation": "<doc>\n<summary>\nThe altitude above the surface of the body or sea level, whichever is closer, in meters.\nMeasured from the center of mass of the vessel.\n</summary>\n</doc>"
      },
      "Flight_get_BedrockAltitude": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,BedrockAltitude)",
          "ParameterType(0).Class(SpaceCenter.Flight)"
        ],
        "documentation": "<doc>\n<summary>\nThe altitude above the surface of the body, in meters. When over water, this is the altitude above the sea floor.\nMeasured from the center of mass of the vessel.\n</summary>\n</doc>"
      },
      "Flight_get_Elevation": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,Elevation)",
          "ParameterType(0).Class(SpaceCenter.Flight)"
        ],
        "documentation": "<doc>\n<summary>\nThe elevation of the terrain under the vessel, in meters. This is the height of the terrain above sea level,\nand is negative when the vessel is over the sea.\n</summary>\n</doc>"
      },
      "Flight_get_Latitude": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,Latitude)",
          "ParameterType(0).Class(SpaceCenter.Flight)"
        ],
        "documentation": "<doc>\n<summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Latitude\">latitude</a> of the vessel for the body being orbited, in degrees.\n</summary>\n</doc>"
      },
      "Flight_get_Longitude": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,Longitude)",
          "ParameterType(0).Class(SpaceCenter.Flight)"
        ],
        "documentation": "<doc>\n<summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Longitude\">longitude</a> of the vessel for the body being orbited, in degrees.\n</summary>\n</doc>"
      },
      "Flight_get_Velocity": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,Velocity)",
          "ParameterType(0).Class(SpaceCenter.Flight)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe velocity vector of the vessel. The magnitude of the vector is the speed of the vessel in meters per second.\nThe direction of the vector is the direction of the vessels motion.\n</summary>\n</doc>"
      },
      "Flight_get_Speed": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,Speed)",
          "ParameterType(0).Class(SpaceCenter.Flight)"
        ],
        "documentation": "<doc>\n<summary>\nThe speed of the vessel in meters per second.\n</summary>\n</doc>"
      },
      "Flight_get_HorizontalSpeed": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,HorizontalSpeed)",
          "ParameterType(0).Class(SpaceCenter.Flight)"
        ],
        "documentation": "<doc>\n<summary>\nThe horizontal speed of the vessel in meters per second.\n</summary>\n</doc>"
      },
      "Flight_get_VerticalSpeed": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,VerticalSpeed)",
          "ParameterType(0).Class(SpaceCenter.Flight)"
        ],
        "documentation": "<doc>\n<summary>\nThe vertical speed of the vessel in meters per second.\n</summary>\n</doc>"
      },
      "Flight_get_CenterOfMass": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,CenterOfMass)",
          "ParameterType(0).Class(SpaceCenter.Flight)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe position of the center of mass of the vessel.\n</summary>\n</doc>"
      },
      "Flight_get_Rotation": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,Rotation)",
          "ParameterType(0).Class(SpaceCenter.Flight)",
          "ReturnType.Tuple(double,double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe rotation of the vessel.\n</summary>\n</doc>"
      },
      "Flight_get_Direction": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,Direction)",
          "ParameterType(0).Class(SpaceCenter.Flight)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe direction vector that the vessel is pointing in.\n</summary>\n</doc>"
      },
      "Flight_get_Pitch": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,Pitch)",
          "ParameterType(0).Class(SpaceCenter.Flight)"
        ],
        "documentation": "<doc>\n<summary>\nThe pitch angle of the vessel relative to the horizon, in degrees. A value between -90° and +90°.\n</summary>\n</doc>"
      },
      "Flight_get_Heading": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,Heading)",
          "ParameterType(0).Class(SpaceCenter.Flight)"
        ],
        "documentation": "<doc>\n<summary>\nThe heading angle of the vessel relative to north, in degrees. A value between 0° and 360°.\n</summary>\n</doc>"
      },
      "Flight_get_Roll": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,Roll)",
          "ParameterType(0).Class(SpaceCenter.Flight)"
        ],
        "documentation": "<doc>\n<summary>\nThe roll angle of the vessel relative to the horizon, in degrees. A value between -180° and +180°.\n</summary>\n</doc>"
      },
      "Flight_get_Prograde": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,Prograde)",
          "ParameterType(0).Class(SpaceCenter.Flight)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe unit direction vector pointing in the prograde direction.\n</summary>\n</doc>"
      },
      "Flight_get_Retrograde": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,Retrograde)",
          "ParameterType(0).Class(SpaceCenter.Flight)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe unit direction vector pointing in the retrograde direction.\n</summary>\n</doc>"
      },
      "Flight_get_Normal": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,Normal)",
          "ParameterType(0).Class(SpaceCenter.Flight)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe unit direction vector pointing in the normal direction.\n</summary>\n</doc>"
      },
      "Flight_get_AntiNormal": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,AntiNormal)",
          "ParameterType(0).Class(SpaceCenter.Flight)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe unit direction vector pointing in the anti-normal direction.\n</summary>\n</doc>"
      },
      "Flight_get_Radial": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,Radial)",
          "ParameterType(0).Class(SpaceCenter.Flight)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe unit direction vector pointing in the radial direction.\n</summary>\n</doc>"
      },
      "Flight_get_AntiRadial": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,AntiRadial)",
          "ParameterType(0).Class(SpaceCenter.Flight)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe unit direction vector pointing in the anti-radial direction.\n</summary>\n</doc>"
      },
      "Flight_get_AtmosphereDensity": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,AtmosphereDensity)",
          "ParameterType(0).Class(SpaceCenter.Flight)"
        ],
        "documentation": "<doc>\n<summary>\nThe current density of the atmosphere around the vessel, in <math>kg/m^3</math>.\n</summary>\n</doc>"
      },
      "Flight_get_DynamicPressure": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,DynamicPressure)",
          "ParameterType(0).Class(SpaceCenter.Flight)"
        ],
        "documentation": "<doc>\n<summary>\nThe dynamic pressure acting on the vessel, in Pascals. This is a measure of the strength of the\naerodynamic forces. It is equal to <math>\\frac{1}{2} . \\mbox{air density} .  \\mbox{velocity}^2</math>.\nIt is commonly denoted <math>Q</math>.\n</summary>\n</doc>"
      },
      "Flight_get_StaticPressureAtMSL": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,StaticPressureAtMSL)",
          "ParameterType(0).Class(SpaceCenter.Flight)"
        ],
        "documentation": "<doc>\n<summary>\nThe static atmospheric pressure at mean sea level, in Pascals.\n</summary>\n</doc>"
      },
      "Flight_get_StaticPressure": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,StaticPressure)",
          "ParameterType(0).Class(SpaceCenter.Flight)"
        ],
        "documentation": "<doc>\n<summary>\nThe static atmospheric pressure acting on the vessel, in Pascals.\n</summary>\n</doc>"
      },
      "Flight_get_AerodynamicForce": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,AerodynamicForce)",
          "ParameterType(0).Class(SpaceCenter.Flight)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe total aerodynamic forces acting on the vessel, as a vector pointing in the direction of the force, with its\nmagnitude equal to the strength of the force in Newtons.\n</summary>\n</doc>"
      },
      "Flight_get_Lift": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,Lift)",
          "ParameterType(0).Class(SpaceCenter.Flight)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Aerodynamic_force\">aerodynamic lift</a> currently acting on the vessel,\nas a vector pointing in the direction of the force, with its magnitude equal to the strength of the force in Newtons.\n</summary>\n</doc>"
      },
      "Flight_get_Drag": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,Drag)",
          "ParameterType(0).Class(SpaceCenter.Flight)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Aerodynamic_force\">aerodynamic drag</a> currently acting on the vessel,\nas a vector pointing in the direction of the force, with its magnitude equal to the strength of the force in Newtons.\n</summary>\n</doc>"
      },
      "Flight_get_SpeedOfSound": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,SpeedOfSound)",
          "ParameterType(0).Class(SpaceCenter.Flight)"
        ],
        "documentation": "<doc>\n<summary>\nThe speed of sound, in the atmosphere around the vessel, in <math>m/s</math>.\n</summary>\n</doc>"
      },
      "Flight_get_Mach": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,Mach)",
          "ParameterType(0).Class(SpaceCenter.Flight)"
        ],
        "documentation": "<doc>\n<summary>\nThe speed of the vessel, in multiples of the speed of sound.\n</summary>\n</doc>"
      },
      "Flight_get_ReynoldsNumber": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,ReynoldsNumber)",
          "ParameterType(0).Class(SpaceCenter.Flight)"
        ],
        "documentation": "<doc>\n<summary>\nThe vessels Reynolds number.\n</summary>\n<remarks>\nRequires <a href=\"http://forum.kerbalspaceprogram.com/index.php?/topic/19321-105-ferram-aerospace-research-v01557-johnson-21816/\">Ferram Aerospace Research</a>.\n</remarks>\n</doc>"
      },
      "Flight_get_TrueAirSpeed": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,TrueAirSpeed)",
          "ParameterType(0).Class(SpaceCenter.Flight)"
        ],
        "documentation": "<doc>\n<summary>\nThe <a href=\"https://en.wikipedia.org/wiki/True_airspeed\">true air speed</a> of the vessel, in <math>m/s</math>.\n</summary>\n</doc>"
      },
      "Flight_get_EquivalentAirSpeed": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,EquivalentAirSpeed)",
          "ParameterType(0).Class(SpaceCenter.Flight)"
        ],
        "documentation": "<doc>\n<summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Equivalent_airspeed\">equivalent air speed</a> of the vessel, in <math>m/s</math>.\n</summary>\n</doc>"
      },
      "Flight_get_TerminalVelocity": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,TerminalVelocity)",
          "ParameterType(0).Class(SpaceCenter.Flight)"
        ],
        "documentation": "<doc>\n<summary>\nAn estimate of the current terminal velocity of the vessel, in <math>m/s</math>.\nThis is the speed at which the drag forces cancel out the force of gravity.\n</summary>\n</doc>"
      },
      "Flight_get_AngleOfAttack": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,AngleOfAttack)",
          "ParameterType(0).Class(SpaceCenter.Flight)"
        ],
        "documentation": "<doc>\n<summary>\nGets the pitch angle between the orientation of the vessel and its velocity vector, in degrees.\n</summary>\n</doc>"
      },
      "Flight_get_SideslipAngle": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,SideslipAngle)",
          "ParameterType(0).Class(SpaceCenter.Flight)"
        ],
        "documentation": "<doc>\n<summary>\nGets the yaw angle between the orientation of the vessel and its velocity vector, in degrees.\n</summary>\n</doc>"
      },
      "Flight_get_TotalAirTemperature": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,TotalAirTemperature)",
          "ParameterType(0).Class(SpaceCenter.Flight)"
        ],
        "documentation": "<doc>\n<summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Total_air_temperature\">total air temperature</a> of the atmosphere\naround the vessel, in Kelvin. This temperature includes the <see cref=\"M:SpaceCenter.Flight.StaticAirTemperature\" /> and the vessel's kinetic energy.\n</summary>\n</doc>"
      },
      "Flight_get_StaticAirTemperature": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,StaticAirTemperature)",
          "ParameterType(0).Class(SpaceCenter.Flight)"
        ],
        "documentation": "<doc>\n<summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Total_air_temperature\">static (ambient) temperature</a> of the\natmosphere around the vessel, in Kelvin.\n</summary>\n</doc>"
      },
      "Flight_get_StallFraction": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,StallFraction)",
          "ParameterType(0).Class(SpaceCenter.Flight)"
        ],
        "documentation": "<doc>\n<summary>\nGets the current amount of stall, between 0 and 1. A value greater than 0.005 indicates a minor stall\nand a value greater than 0.5 indicates a large-scale stall.\n</summary>\n<remarks>\nRequires <a href=\"http://forum.kerbalspaceprogram.com/index.php?/topic/19321-105-ferram-aerospace-research-v01557-johnson-21816/\">Ferram Aerospace Research</a>.\n</remarks>\n</doc>"
      },
      "Flight_get_DragCoefficient": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,DragCoefficient)",
          "ParameterType(0).Class(SpaceCenter.Flight)"
        ],
        "documentation": "<doc>\n<summary>\nGets the coefficient of drag. This is the amount of drag produced by the vessel. It depends on air speed,\nair density and wing area.\n</summary>\n<remarks>\nRequires <a href=\"http://forum.kerbalspaceprogram.com/index.php?/topic/19321-105-ferram-aerospace-research-v01557-johnson-21816/\">Ferram Aerospace Research</a>.\n</remarks>\n</doc>"
      },
      "Flight_get_LiftCoefficient": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,LiftCoefficient)",
          "ParameterType(0).Class(SpaceCenter.Flight)"
        ],
        "documentation": "<doc>\n<summary>\nGets the coefficient of lift. This is the amount of lift produced by the vessel, and depends on air speed, air density and wing area.\n</summary>\n<remarks>\nRequires <a href=\"http://forum.kerbalspaceprogram.com/index.php?/topic/19321-105-ferram-aerospace-research-v01557-johnson-21816/\">Ferram Aerospace Research</a>.\n</remarks>\n</doc>"
      },
      "Flight_get_BallisticCoefficient": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,BallisticCoefficient)",
          "ParameterType(0).Class(SpaceCenter.Flight)"
        ],
        "documentation": "<doc>\n<summary>\nGets the <a href=\"https://en.wikipedia.org/wiki/Ballistic_coefficient\">ballistic coefficient</a>.\n</summary>\n<remarks>\nRequires <a href=\"http://forum.kerbalspaceprogram.com/index.php?/topic/19321-105-ferram-aerospace-research-v01557-johnson-21816/\">Ferram Aerospace Research</a>.\n</remarks>\n</doc>"
      },
      "Flight_get_ThrustSpecificFuelConsumption": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Flight,ThrustSpecificFuelConsumption)",
          "ParameterType(0).Class(SpaceCenter.Flight)"
        ],
        "documentation": "<doc>\n<summary>\nGets the thrust specific fuel consumption for the jet engines on the vessel. This is a measure of the\nefficiency of the engines, with a lower value indicating a more efficient vessel. This value is the\nnumber of Newtons of fuel that are burned, per hour, to produce one newton of thrust.\n</summary>\n<remarks>\nRequires <a href=\"http://forum.kerbalspaceprogram.com/index.php?/topic/19321-105-ferram-aerospace-research-v01557-johnson-21816/\">Ferram Aerospace Research</a>.\n</remarks>\n</doc>"
      },
      "Node_BurnVector": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "referenceFrame",
            "type": "uint64",
            "default_value": "AA=="
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Method(SpaceCenter.Node,BurnVector)",
          "ParameterType(0).Class(SpaceCenter.Node)",
          "ParameterType(1).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nReturns a vector whose direction the direction of the maneuver node burn, and whose magnitude\nis the delta-v of the burn in m/s.\n</summary>\n<param name=\"referenceFrame\"></param>\n<remarks>\nDoes not change when executing the maneuver node. See <see cref=\"M:SpaceCenter.Node.RemainingBurnVector\" />.\n</remarks>\n</doc>"
      },
      "Node_RemainingBurnVector": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "referenceFrame",
            "type": "uint64",
            "default_value": "AA=="
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Method(SpaceCenter.Node,RemainingBurnVector)",
          "ParameterType(0).Class(SpaceCenter.Node)",
          "ParameterType(1).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nReturns a vector whose direction the direction of the maneuver node burn, and whose magnitude\nis the delta-v of the burn in m/s. The direction and magnitude change as the burn is executed.\n</summary>\n<param name=\"referenceFrame\"></param>\n</doc>"
      },
      "Node_Remove": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "attributes": [
          "Class.Method(SpaceCenter.Node,Remove)",
          "ParameterType(0).Class(SpaceCenter.Node)"
        ],
        "documentation": "<doc>\n<summary>\nRemoves the maneuver node.\n</summary>\n</doc>"
      },
      "Node_Position": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "referenceFrame",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Method(SpaceCenter.Node,Position)",
          "ParameterType(0).Class(SpaceCenter.Node)",
          "ParameterType(1).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nReturns the position vector of the maneuver node in the given reference frame.\n</summary>\n<param name=\"referenceFrame\"></param>\n</doc>"
      },
      "Node_Direction": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "referenceFrame",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Method(SpaceCenter.Node,Direction)",
          "ParameterType(0).Class(SpaceCenter.Node)",
          "ParameterType(1).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nReturns the unit direction vector of the maneuver nodes burn in the given reference frame.\n</summary>\n<param name=\"referenceFrame\"></param>\n</doc>"
      },
      "Node_get_Prograde": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Node,Prograde)",
          "ParameterType(0).Class(SpaceCenter.Node)"
        ],
        "documentation": "<doc>\n<summary>\nThe magnitude of the maneuver nodes delta-v in the prograde direction, in meters per second.\n</summary>\n</doc>"
      },
      "Node_set_Prograde": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "double"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Node,Prograde)",
          "ParameterType(0).Class(SpaceCenter.Node)"
        ],
        "documentation": "<doc>\n<summary>\nThe magnitude of the maneuver nodes delta-v in the prograde direction, in meters per second.\n</summary>\n</doc>"
      },
      "Node_get_Normal": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Node,Normal)",
          "ParameterType(0).Class(SpaceCenter.Node)"
        ],
        "documentation": "<doc>\n<summary>\nThe magnitude of the maneuver nodes delta-v in the normal direction, in meters per second.\n</summary>\n</doc>"
      },
      "Node_set_Normal": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "double"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Node,Normal)",
          "ParameterType(0).Class(SpaceCenter.Node)"
        ],
        "documentation": "<doc>\n<summary>\nThe magnitude of the maneuver nodes delta-v in the normal direction, in meters per second.\n</summary>\n</doc>"
      },
      "Node_get_Radial": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Node,Radial)",
          "ParameterType(0).Class(SpaceCenter.Node)"
        ],
        "documentation": "<doc>\n<summary>\nThe magnitude of the maneuver nodes delta-v in the radial direction, in meters per second.\n</summary>\n</doc>"
      },
      "Node_set_Radial": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "double"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Node,Radial)",
          "ParameterType(0).Class(SpaceCenter.Node)"
        ],
        "documentation": "<doc>\n<summary>\nThe magnitude of the maneuver nodes delta-v in the radial direction, in meters per second.\n</summary>\n</doc>"
      },
      "Node_get_DeltaV": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Node,DeltaV)",
          "ParameterType(0).Class(SpaceCenter.Node)"
        ],
        "documentation": "<doc>\n<summary>\nThe delta-v of the maneuver node, in meters per second.\n</summary>\n<remarks>\nDoes not change when executing the maneuver node. See <see cref=\"M:SpaceCenter.Node.RemainingDeltaV\" />.\n</remarks>\n</doc>"
      },
      "Node_set_DeltaV": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "double"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Node,DeltaV)",
          "ParameterType(0).Class(SpaceCenter.Node)"
        ],
        "documentation": "<doc>\n<summary>\nThe delta-v of the maneuver node, in meters per second.\n</summary>\n<remarks>\nDoes not change when executing the maneuver node. See <see cref=\"M:SpaceCenter.Node.RemainingDeltaV\" />.\n</remarks>\n</doc>"
      },
      "Node_get_RemainingDeltaV": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Node,RemainingDeltaV)",
          "ParameterType(0).Class(SpaceCenter.Node)"
        ],
        "documentation": "<doc>\n<summary>\nGets the remaining delta-v of the maneuver node, in meters per second. Changes as the node\nis executed. This is equivalent to the delta-v reported in-game.\n</summary>\n</doc>"
      },
      "Node_get_UT": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Node,UT)",
          "ParameterType(0).Class(SpaceCenter.Node)"
        ],
        "documentation": "<doc>\n<summary>\nThe universal time at which the maneuver will occur, in seconds.\n</summary>\n</doc>"
      },
      "Node_set_UT": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "double"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Node,UT)",
          "ParameterType(0).Class(SpaceCenter.Node)"
        ],
        "documentation": "<doc>\n<summary>\nThe universal time at which the maneuver will occur, in seconds.\n</summary>\n</doc>"
      },
      "Node_get_TimeTo": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Node,TimeTo)",
          "ParameterType(0).Class(SpaceCenter.Node)"
        ],
        "documentation": "<doc>\n<summary>\nThe time until the maneuver node will be encountered, in seconds.\n</summary>\n</doc>"
      },
      "Node_get_Orbit": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Node,Orbit)",
          "ParameterType(0).Class(SpaceCenter.Node)",
          "ReturnType.Class(SpaceCenter.Orbit)"
        ],
        "documentation": "<doc>\n<summary>\nThe orbit that results from executing the maneuver node.\n</summary>\n</doc>"
      },
      "Node_get_ReferenceFrame": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Node,ReferenceFrame)",
          "ParameterType(0).Class(SpaceCenter.Node)",
          "ReturnType.Class(SpaceCenter.ReferenceFrame)"
        ],
        "documentation": "<doc>\n<summary>\nGets the reference frame that is fixed relative to the maneuver node's burn.\n<list type=\"bullet\"><item><description>The origin is at the position of the maneuver node.</description></item><item><description>The y-axis points in the direction of the burn.</description></item><item><description>The x-axis and z-axis point in arbitrary but fixed directions.</description></item></list></summary>\n</doc>"
      },
      "Node_get_OrbitalReferenceFrame": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Node,OrbitalReferenceFrame)",
          "ParameterType(0).Class(SpaceCenter.Node)",
          "ReturnType.Class(SpaceCenter.ReferenceFrame)"
        ],
        "documentation": "<doc>\n<summary>\nGets the reference frame that is fixed relative to the maneuver node, and\norientated with the orbital prograde/normal/radial directions of the\noriginal orbit at the maneuver node's position.\n<list type=\"bullet\"><item><description>The origin is at the position of the maneuver node.</description></item><item><description>The x-axis points in the orbital anti-radial direction of the original\norbit, at the position of the maneuver node.</description></item><item><description>The y-axis points in the orbital prograde direction of the original\norbit, at the position of the maneuver node.</description></item><item><description>The z-axis points in the orbital normal direction of the original orbit,\nat the position of the maneuver node.</description></item></list></summary>\n</doc>"
      },
      "Orbit_ReferencePlaneNormal": {
        "parameters": [
          {
            "name": "referenceFrame",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.StaticMethod(SpaceCenter.Orbit,ReferencePlaneNormal)",
          "ParameterType(0).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe unit direction vector that is normal to the orbits reference plane, in the given\nreference frame. The reference plane is the plane from which the orbits inclination is measured.\n</summary>\n<param name=\"referenceFrame\"></param>\n</doc>"
      },
      "Orbit_ReferencePlaneDirection": {
        "parameters": [
          {
            "name": "referenceFrame",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.StaticMethod(SpaceCenter.Orbit,ReferencePlaneDirection)",
          "ParameterType(0).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe unit direction vector from which the orbits longitude of ascending node is measured,\nin the given reference frame.\n</summary>\n<param name=\"referenceFrame\"></param>\n</doc>"
      },
      "Orbit_RadiusAtTrueAnomaly": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "trueAnomaly",
            "type": "double"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Method(SpaceCenter.Orbit,RadiusAtTrueAnomaly)",
          "ParameterType(0).Class(SpaceCenter.Orbit)"
        ],
        "documentation": "<doc>\n<summary>\nThe orbital radius at the point in the orbit given by the true anomaly.\n</summary>\n<param name=\"trueAnomaly\">The true anomaly.</param>\n</doc>"
      },
      "Orbit_TrueAnomalyAtRadius": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "radius",
            "type": "double"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Method(SpaceCenter.Orbit,TrueAnomalyAtRadius)",
          "ParameterType(0).Class(SpaceCenter.Orbit)"
        ],
        "documentation": "<doc>\n<summary>\nThe true anomaly at the given orbital radius.\n</summary>\n<param name=\"radius\">The orbital radius in meters.</param>\n</doc>"
      },
      "Orbit_TrueAnomalyAtUT": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "ut",
            "type": "double"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Method(SpaceCenter.Orbit,TrueAnomalyAtUT)",
          "ParameterType(0).Class(SpaceCenter.Orbit)"
        ],
        "documentation": "<doc>\n<summary>\nThe true anomaly at the given time.\n</summary>\n<param name=\"ut\">The universal time in seconds.</param>\n</doc>"
      },
      "Orbit_UTAtTrueAnomaly": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "trueAnomaly",
            "type": "double"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Method(SpaceCenter.Orbit,UTAtTrueAnomaly)",
          "ParameterType(0).Class(SpaceCenter.Orbit)"
        ],
        "documentation": "<doc>\n<summary>\nThe universal time, in seconds, corresponding to the given true anomaly.\n</summary>\n<param name=\"trueAnomaly\">True anomaly.</param>\n</doc>"
      },
      "Orbit_EccentricAnomalyAtUT": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "ut",
            "type": "double"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Method(SpaceCenter.Orbit,EccentricAnomalyAtUT)",
          "ParameterType(0).Class(SpaceCenter.Orbit)"
        ],
        "documentation": "<doc>\n<summary>\nThe eccentric anomaly at the given universal time.\n</summary>\n<param name=\"ut\">The universal time, in seconds.</param>\n</doc>"
      },
      "Orbit_OrbitalSpeedAt": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "time",
            "type": "double"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Method(SpaceCenter.Orbit,OrbitalSpeedAt)",
          "ParameterType(0).Class(SpaceCenter.Orbit)"
        ],
        "documentation": "<doc>\n<summary>\nThe orbital speed at the given time, in meters per second.\n</summary>\n<param name=\"time\">Time from now, in seconds.</param>\n</doc>"
      },
      "Orbit_get_Body": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Orbit,Body)",
          "ParameterType(0).Class(SpaceCenter.Orbit)",
          "ReturnType.Class(SpaceCenter.CelestialBody)"
        ],
        "documentation": "<doc>\n<summary>\nThe celestial body (e.g. planet or moon) around which the object is orbiting.\n</summary>\n</doc>"
      },
      "Orbit_get_Apoapsis": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Orbit,Apoapsis)",
          "ParameterType(0).Class(SpaceCenter.Orbit)"
        ],
        "documentation": "<doc>\n<summary>\nGets the apoapsis of the orbit, in meters, from the center of mass of the body being orbited.\n</summary>\n<remarks>\nFor the apoapsis altitude reported on the in-game map view, use <see cref=\"M:SpaceCenter.Orbit.ApoapsisAltitude\" />.\n</remarks>\n</doc>"
      },
      "Orbit_get_Periapsis": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Orbit,Periapsis)",
          "ParameterType(0).Class(SpaceCenter.Orbit)"
        ],
        "documentation": "<doc>\n<summary>\nThe periapsis of the orbit, in meters, from the center of mass of the body being orbited.\n</summary>\n<remarks>\nFor the periapsis altitude reported on the in-game map view, use <see cref=\"M:SpaceCenter.Orbit.PeriapsisAltitude\" />.\n</remarks>\n</doc>"
      },
      "Orbit_get_ApoapsisAltitude": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Orbit,ApoapsisAltitude)",
          "ParameterType(0).Class(SpaceCenter.Orbit)"
        ],
        "documentation": "<doc>\n<summary>\nThe apoapsis of the orbit, in meters, above the sea level of the body being orbited.\n</summary>\n<remarks>\nThis is equal to <see cref=\"M:SpaceCenter.Orbit.Apoapsis\" /> minus the equatorial radius of the body.\n</remarks>\n</doc>"
      },
      "Orbit_get_PeriapsisAltitude": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Orbit,PeriapsisAltitude)",
          "ParameterType(0).Class(SpaceCenter.Orbit)"
        ],
        "documentation": "<doc>\n<summary>\nThe periapsis of the orbit, in meters, above the sea level of the body being orbited.\n</summary>\n<remarks>\nThis is equal to <see cref=\"M:SpaceCenter.Orbit.Periapsis\" /> minus the equatorial radius of the body.\n</remarks>\n</doc>"
      },
      "Orbit_get_SemiMajorAxis": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Orbit,SemiMajorAxis)",
          "ParameterType(0).Class(SpaceCenter.Orbit)"
        ],
        "documentation": "<doc>\n<summary>\nThe semi-major axis of the orbit, in meters.\n</summary>\n</doc>"
      },
      "Orbit_get_SemiMinorAxis": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Orbit,SemiMinorAxis)",
          "ParameterType(0).Class(SpaceCenter.Orbit)"
        ],
        "documentation": "<doc>\n<summary>\nThe semi-minor axis of the orbit, in meters.\n</summary>\n</doc>"
      },
      "Orbit_get_Radius": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Orbit,Radius)",
          "ParameterType(0).Class(SpaceCenter.Orbit)"
        ],
        "documentation": "<doc>\n<summary>\nThe current radius of the orbit, in meters. This is the distance between the center\nof mass of the object in orbit, and the center of mass of the body around which it is orbiting.\n</summary>\n<remarks>\nThis value will change over time if the orbit is elliptical.\n</remarks>\n</doc>"
      },
      "Orbit_get_Speed": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Orbit,Speed)",
          "ParameterType(0).Class(SpaceCenter.Orbit)"
        ],
        "documentation": "<doc>\n<summary>\nThe current orbital speed of the object in meters per second.\n</summary>\n<remarks>\nThis value will change over time if the orbit is elliptical.\n</remarks>\n</doc>"
      },
      "Orbit_get_Period": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Orbit,Period)",
          "ParameterType(0).Class(SpaceCenter.Orbit)"
        ],
        "documentation": "<doc>\n<summary>\nThe orbital period, in seconds.\n</summary>\n</doc>"
      },
      "Orbit_get_TimeToApoapsis": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Orbit,TimeToApoapsis)",
          "ParameterType(0).Class(SpaceCenter.Orbit)"
        ],
        "documentation": "<doc>\n<summary>\nThe time until the object reaches apoapsis, in seconds.\n</summary>\n</doc>"
      },
      "Orbit_get_TimeToPeriapsis": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Orbit,TimeToPeriapsis)",
          "ParameterType(0).Class(SpaceCenter.Orbit)"
        ],
        "documentation": "<doc>\n<summary>\nThe time until the object reaches periapsis, in seconds.\n</summary>\n</doc>"
      },
      "Orbit_get_Eccentricity": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Orbit,Eccentricity)",
          "ParameterType(0).Class(SpaceCenter.Orbit)"
        ],
        "documentation": "<doc>\n<summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Orbital_eccentricity\">eccentricity</a> of the orbit.\n</summary>\n</doc>"
      },
      "Orbit_get_Inclination": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Orbit,Inclination)",
          "ParameterType(0).Class(SpaceCenter.Orbit)"
        ],
        "documentation": "<doc>\n<summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Orbital_inclination\">inclination</a> of the orbit,\nin radians.\n</summary>\n</doc>"
      },
      "Orbit_get_LongitudeOfAscendingNode": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Orbit,LongitudeOfAscendingNode)",
          "ParameterType(0).Class(SpaceCenter.Orbit)"
        ],
        "documentation": "<doc>\n<summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Longitude_of_the_ascending_node\">longitude of the\nascending node</a>, in radians.\n</summary>\n</doc>"
      },
      "Orbit_get_ArgumentOfPeriapsis": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Orbit,ArgumentOfPeriapsis)",
          "ParameterType(0).Class(SpaceCenter.Orbit)"
        ],
        "documentation": "<doc>\n<summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Argument_of_periapsis\">argument of periapsis</a>, in radians.\n</summary>\n</doc>"
      },
      "Orbit_get_MeanAnomalyAtEpoch": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Orbit,MeanAnomalyAtEpoch)",
          "ParameterType(0).Class(SpaceCenter.Orbit)"
        ],
        "documentation": "<doc>\n<summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Mean_anomaly\">mean anomaly at epoch</a>.\n</summary>\n</doc>"
      },
      "Orbit_get_Epoch": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Orbit,Epoch)",
          "ParameterType(0).Class(SpaceCenter.Orbit)"
        ],
        "documentation": "<doc>\n<summary>\nThe time since the epoch (the point at which the\n<a href=\"https://en.wikipedia.org/wiki/Mean_anomaly\">mean anomaly at epoch</a> was measured, in seconds.\n</summary>\n</doc>"
      },
      "Orbit_get_MeanAnomaly": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Orbit,MeanAnomaly)",
          "ParameterType(0).Class(SpaceCenter.Orbit)"
        ],
        "documentation": "<doc>\n<summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Mean_anomaly\">mean anomaly</a>.\n</summary>\n</doc>"
      },
      "Orbit_get_EccentricAnomaly": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Orbit,EccentricAnomaly)",
          "ParameterType(0).Class(SpaceCenter.Orbit)"
        ],
        "documentation": "<doc>\n<summary>\nThe <a href=\"https://en.wikipedia.org/wiki/Eccentric_anomaly\">eccentric anomaly</a>.\n</summary>\n</doc>"
      },
      "Orbit_get_TrueAnomaly": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Orbit,TrueAnomaly)",
          "ParameterType(0).Class(SpaceCenter.Orbit)"
        ],
        "documentation": "<doc>\n<summary>\nThe <a href=\"https://en.wikipedia.org/wiki/True_anomaly\">true anomaly</a>.\n</summary>\n</doc>"
      },
      "Orbit_get_NextOrbit": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Orbit,NextOrbit)",
          "ParameterType(0).Class(SpaceCenter.Orbit)",
          "ReturnType.Class(SpaceCenter.Orbit)"
        ],
        "documentation": "<doc>\n<summary>\nIf the object is going to change sphere of influence in the future, returns the new orbit\nafter the change. Otherwise returns <c>null</c>.\n</summary>\n</doc>"
      },
      "Orbit_get_TimeToSOIChange": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Orbit,TimeToSOIChange)",
          "ParameterType(0).Class(SpaceCenter.Orbit)"
        ],
        "documentation": "<doc>\n<summary>\nThe time until the object changes sphere of influence, in seconds. Returns <c>NaN</c> if the\nobject is not going to change sphere of influence.\n</summary>\n</doc>"
      },
      "Orbit_get_OrbitalSpeed": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Orbit,OrbitalSpeed)",
          "ParameterType(0).Class(SpaceCenter.Orbit)"
        ],
        "documentation": "<doc>\n<summary>\nThe current orbital speed in meters per second.\n</summary>\n</doc>"
      },
      "CargoBay_get_Part": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.CargoBay,Part)",
          "ParameterType(0).Class(SpaceCenter.CargoBay)",
          "ReturnType.Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe part object for this cargo bay.\n</summary>\n</doc>"
      },
      "CargoBay_get_State": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "int32",
        "attributes": [
          "Class.Property.Get(SpaceCenter.CargoBay,State)",
          "ParameterType(0).Class(SpaceCenter.CargoBay)",
          "ReturnType.Enum(SpaceCenter.CargoBayState)"
        ],
        "documentation": "<doc>\n<summary>\nThe state of the cargo bay.\n</summary>\n</doc>"
      },
      "CargoBay_get_Open": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.CargoBay,Open)",
          "ParameterType(0).Class(SpaceCenter.CargoBay)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the cargo bay is open.\n</summary>\n</doc>"
      },
      "CargoBay_set_Open": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.CargoBay,Open)",
          "ParameterType(0).Class(SpaceCenter.CargoBay)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the cargo bay is open.\n</summary>\n</doc>"
      },
      "ControlSurface_get_Part": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.ControlSurface,Part)",
          "ParameterType(0).Class(SpaceCenter.ControlSurface)",
          "ReturnType.Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe part object for this control surface.\n</summary>\n</doc>"
      },
      "ControlSurface_get_PitchEnabled": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.ControlSurface,PitchEnabled)",
          "ParameterType(0).Class(SpaceCenter.ControlSurface)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the control surface has pitch control enabled.\n</summary>\n</doc>"
      },
      "ControlSurface_set_PitchEnabled": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.ControlSurface,PitchEnabled)",
          "ParameterType(0).Class(SpaceCenter.ControlSurface)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the control surface has pitch control enabled.\n</summary>\n</doc>"
      },
      "ControlSurface_get_YawEnabled": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.ControlSurface,YawEnabled)",
          "ParameterType(0).Class(SpaceCenter.ControlSurface)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the control surface has yaw control enabled.\n</summary>\n</doc>"
      },
      "ControlSurface_set_YawEnabled": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.ControlSurface,YawEnabled)",
          "ParameterType(0).Class(SpaceCenter.ControlSurface)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the control surface has yaw control enabled.\n</summary>\n</doc>"
      },
      "ControlSurface_get_RollEnabled": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.ControlSurface,RollEnabled)",
          "ParameterType(0).Class(SpaceCenter.ControlSurface)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the control surface has roll control enabled.\n</summary>\n</doc>"
      },
      "ControlSurface_set_RollEnabled": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.ControlSurface,RollEnabled)",
          "ParameterType(0).Class(SpaceCenter.ControlSurface)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the control surface has roll control enabled.\n</summary>\n</doc>"
      },
      "ControlSurface_get_Inverted": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.ControlSurface,Inverted)",
          "ParameterType(0).Class(SpaceCenter.ControlSurface)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the control surface movement is inverted.\n</summary>\n</doc>"
      },
      "ControlSurface_set_Inverted": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.ControlSurface,Inverted)",
          "ParameterType(0).Class(SpaceCenter.ControlSurface)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the control surface movement is inverted.\n</summary>\n</doc>"
      },
      "ControlSurface_get_Deployed": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.ControlSurface,Deployed)",
          "ParameterType(0).Class(SpaceCenter.ControlSurface)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the control surface has been fully deployed.\n</summary>\n</doc>"
      },
      "ControlSurface_set_Deployed": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.ControlSurface,Deployed)",
          "ParameterType(0).Class(SpaceCenter.ControlSurface)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the control surface has been fully deployed.\n</summary>\n</doc>"
      },
      "ControlSurface_get_SurfaceArea": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.ControlSurface,SurfaceArea)",
          "ParameterType(0).Class(SpaceCenter.ControlSurface)"
        ],
        "documentation": "<doc>\n<summary>\nSurface area of the control surface in <math>m^2</math>.\n</summary>\n</doc>"
      },
      "ControlSurface_get_AvailableTorque": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.ControlSurface,AvailableTorque)",
          "ParameterType(0).Class(SpaceCenter.ControlSurface)",
          "ReturnType.Tuple(Tuple(double,double,double),Tuple(double,double,double))"
        ],
        "documentation": "<doc>\n<summary>\nThe available torque in the positive pitch, roll and yaw axes and\nnegative pitch, roll and yaw axes of the vessel, in Newton meters.\nThese axes correspond to the coordinate axes of the <see cref=\"M:SpaceCenter.Vessel.ReferenceFrame\" />.\n</summary>\n</doc>"
      },
      "Decoupler_Decouple": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Method(SpaceCenter.Decoupler,Decouple)",
          "ParameterType(0).Class(SpaceCenter.Decoupler)",
          "ReturnType.Class(SpaceCenter.Vessel)"
        ],
        "documentation": "<doc>\n<summary>\nFires the decoupler. Returns the new vessel created when the decoupler fires.\nThrows an exception if the decoupler has already fired.\n</summary>\n</doc>"
      },
      "Decoupler_get_Part": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Decoupler,Part)",
          "ParameterType(0).Class(SpaceCenter.Decoupler)",
          "ReturnType.Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe part object for this decoupler.\n</summary>\n</doc>"
      },
      "Decoupler_get_Decoupled": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Decoupler,Decoupled)",
          "ParameterType(0).Class(SpaceCenter.Decoupler)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the decoupler has fired.\n</summary>\n</doc>"
      },
      "Decoupler_get_Staged": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Decoupler,Staged)",
          "ParameterType(0).Class(SpaceCenter.Decoupler)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the decoupler is enabled in the staging sequence.\n</summary>\n</doc>"
      },
      "Decoupler_get_Impulse": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Decoupler,Impulse)",
          "ParameterType(0).Class(SpaceCenter.Decoupler)"
        ],
        "documentation": "<doc>\n<summary>\nThe impulse that the decoupler imparts when it is fired, in Newton seconds.\n</summary>\n</doc>"
      },
      "DockingPort_Undock": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Method(SpaceCenter.DockingPort,Undock)",
          "ParameterType(0).Class(SpaceCenter.DockingPort)",
          "ReturnType.Class(SpaceCenter.Vessel)"
        ],
        "documentation": "<doc>\n<summary>\nUndocks the docking port and returns the new <see cref=\"T:SpaceCenter.Vessel\" /> that is created.\nThis method can be called for either docking port in a docked pair.\nThrows an exception if the docking port is not docked to anything.\n</summary>\n<remarks>\nAfter undocking, the active vessel may change. See <see cref=\"M:SpaceCenter.ActiveVessel\" />.\n</remarks>\n</doc>"
      },
      "DockingPort_Position": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "referenceFrame",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Method(SpaceCenter.DockingPort,Position)",
          "ParameterType(0).Class(SpaceCenter.DockingPort)",
          "ParameterType(1).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe position of the docking port in the given reference frame.\n</summary>\n</doc>"
      },
      "DockingPort_Direction": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "referenceFrame",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Method(SpaceCenter.DockingPort,Direction)",
          "ParameterType(0).Class(SpaceCenter.DockingPort)",
          "ParameterType(1).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe direction that docking port points in, in the given reference frame.\n</summary>\n</doc>"
      },
      "DockingPort_Rotation": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "referenceFrame",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Method(SpaceCenter.DockingPort,Rotation)",
          "ParameterType(0).Class(SpaceCenter.DockingPort)",
          "ParameterType(1).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(double,double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe rotation of the docking port, in the given reference frame.\n</summary>\n</doc>"
      },
      "DockingPort_get_Part": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.DockingPort,Part)",
          "ParameterType(0).Class(SpaceCenter.DockingPort)",
          "ReturnType.Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe part object for this docking port.\n</summary>\n</doc>"
      },
      "DockingPort_get_State": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "int32",
        "attributes": [
          "Class.Property.Get(SpaceCenter.DockingPort,State)",
          "ParameterType(0).Class(SpaceCenter.DockingPort)",
          "ReturnType.Enum(SpaceCenter.DockingPortState)"
        ],
        "documentation": "<doc>\n<summary>\nThe current state of the docking port.\n</summary>\n</doc>"
      },
      "DockingPort_get_DockedPart": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.DockingPort,DockedPart)",
          "ParameterType(0).Class(SpaceCenter.DockingPort)",
          "ReturnType.Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe part that this docking port is docked to. Returns <c>null</c> if this\ndocking port is not docked to anything.\n</summary>\n</doc>"
      },
      "DockingPort_get_ReengageDistance": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.DockingPort,ReengageDistance)",
          "ParameterType(0).Class(SpaceCenter.DockingPort)"
        ],
        "documentation": "<doc>\n<summary>\nThe distance a docking port must move away when it undocks before it\nbecomes ready to dock with another port, in meters.\n</summary>\n</doc>"
      },
      "DockingPort_get_HasShield": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.DockingPort,HasShield)",
          "ParameterType(0).Class(SpaceCenter.DockingPort)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the docking port has a shield.\n</summary>\n</doc>"
      },
      "DockingPort_get_Shielded": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.DockingPort,Shielded)",
          "ParameterType(0).Class(SpaceCenter.DockingPort)"
        ],
        "documentation": "<doc>\n<summary>\nThe state of the docking ports shield, if it has one.\n\nReturns <c>true</c> if the docking port has a shield, and the shield is\nclosed. Otherwise returns <c>false</c>. When set to <c>true</c>, the shield is\nclosed, and when set to <c>false</c> the shield is opened. If the docking\nport does not have a shield, setting this attribute has no effect.\n</summary>\n</doc>"
      },
      "DockingPort_set_Shielded": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.DockingPort,Shielded)",
          "ParameterType(0).Class(SpaceCenter.DockingPort)"
        ],
        "documentation": "<doc>\n<summary>\nThe state of the docking ports shield, if it has one.\n\nReturns <c>true</c> if the docking port has a shield, and the shield is\nclosed. Otherwise returns <c>false</c>. When set to <c>true</c>, the shield is\nclosed, and when set to <c>false</c> the shield is opened. If the docking\nport does not have a shield, setting this attribute has no effect.\n</summary>\n</doc>"
      },
      "DockingPort_get_ReferenceFrame": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.DockingPort,ReferenceFrame)",
          "ParameterType(0).Class(SpaceCenter.DockingPort)",
          "ReturnType.Class(SpaceCenter.ReferenceFrame)"
        ],
        "documentation": "<doc>\n<summary>\nThe reference frame that is fixed relative to this docking port, and\noriented with the port.\n<list type=\"bullet\"><item><description>The origin is at the position of the docking port.</description></item><item><description>The axes rotate with the docking port.</description></item><item><description>The x-axis points out to the right side of the docking port.</description></item><item><description>The y-axis points in the direction the docking port is facing.</description></item><item><description>The z-axis points out of the bottom off the docking port.</description></item></list></summary>\n<remarks>\nThis reference frame is not necessarily equivalent to the reference frame\nfor the part, returned by <see cref=\"M:SpaceCenter.Part.ReferenceFrame\" />.\n</remarks>\n</doc>"
      },
      "Engine_ToggleMode": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "attributes": [
          "Class.Method(SpaceCenter.Engine,ToggleMode)",
          "ParameterType(0).Class(SpaceCenter.Engine)"
        ],
        "documentation": "<doc>\n<summary>\nToggle the current engine mode.\n</summary>\n</doc>"
      },
      "Engine_get_Part": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Engine,Part)",
          "ParameterType(0).Class(SpaceCenter.Engine)",
          "ReturnType.Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe part object for this engine.\n</summary>\n</doc>"
      },
      "Engine_get_Active": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Engine,Active)",
          "ParameterType(0).Class(SpaceCenter.Engine)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the engine is active. Setting this attribute may have no effect,\ndepending on <see cref=\"M:SpaceCenter.Engine.CanShutdown\" /> and <see cref=\"M:SpaceCenter.Engine.CanRestart\" />.\n</summary>\n</doc>"
      },
      "Engine_set_Active": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Engine,Active)",
          "ParameterType(0).Class(SpaceCenter.Engine)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the engine is active. Setting this attribute may have no effect,\ndepending on <see cref=\"M:SpaceCenter.Engine.CanShutdown\" /> and <see cref=\"M:SpaceCenter.Engine.CanRestart\" />.\n</summary>\n</doc>"
      },
      "Engine_get_Thrust": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Engine,Thrust)",
          "ParameterType(0).Class(SpaceCenter.Engine)"
        ],
        "documentation": "<doc>\n<summary>\nThe current amount of thrust being produced by the engine, in Newtons.\n</summary>\n</doc>"
      },
      "Engine_get_AvailableThrust": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Engine,AvailableThrust)",
          "ParameterType(0).Class(SpaceCenter.Engine)"
        ],
        "documentation": "<doc>\n<summary>\nThe amount of thrust, in Newtons, that would be produced by the engine\nwhen activated and with its throttle set to 100%.\nReturns zero if the engine does not have any fuel.\nTakes the engine's current <see cref=\"M:SpaceCenter.Engine.ThrustLimit\" /> and atmospheric conditions into account.\n</summary>\n</doc>"
      },
      "Engine_get_MaxThrust": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Engine,MaxThrust)",
          "ParameterType(0).Class(SpaceCenter.Engine)"
        ],
        "documentation": "<doc>\n<summary>\nThe amount of thrust, in Newtons, that would be produced by the engine\nwhen activated and fueled, with its throttle and throttle limiter set to 100%.\n</summary>\n</doc>"
      },
      "Engine_get_MaxVacuumThrust": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Engine,MaxVacuumThrust)",
          "ParameterType(0).Class(SpaceCenter.Engine)"
        ],
        "documentation": "<doc>\n<summary>\nThe maximum amount of thrust that can be produced by the engine in a\nvacuum, in Newtons. This is the amount of thrust produced by the engine\nwhen activated, <see cref=\"M:SpaceCenter.Engine.ThrustLimit\" /> is set to 100%, the main\nvessel's throttle is set to 100% and the engine is in a vacuum.\n</summary>\n</doc>"
      },
      "Engine_get_ThrustLimit": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Engine,ThrustLimit)",
          "ParameterType(0).Class(SpaceCenter.Engine)"
        ],
        "documentation": "<doc>\n<summary>\nThe thrust limiter of the engine. A value between 0 and 1. Setting this\nattribute may have no effect, for example the thrust limit for a solid\nrocket booster cannot be changed in flight.\n</summary>\n</doc>"
      },
      "Engine_set_ThrustLimit": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "float"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Engine,ThrustLimit)",
          "ParameterType(0).Class(SpaceCenter.Engine)"
        ],
        "documentation": "<doc>\n<summary>\nThe thrust limiter of the engine. A value between 0 and 1. Setting this\nattribute may have no effect, for example the thrust limit for a solid\nrocket booster cannot be changed in flight.\n</summary>\n</doc>"
      },
      "Engine_get_Thrusters": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Engine,Thrusters)",
          "ParameterType(0).Class(SpaceCenter.Engine)",
          "ReturnType.List(Class(SpaceCenter.Thruster))"
        ],
        "documentation": "<doc>\n<summary>\nThe components of the engine that generate thrust.\n</summary>\n<remarks>\nFor example, this corresponds to the rocket nozzel on a solid rocket booster,\nor the individual nozzels on a RAPIER engine.\nThe overall thrust produced by the engine, as reported by <see cref=\"M:SpaceCenter.Engine.AvailableThrust\" />,\n<see cref=\"M:SpaceCenter.Engine.MaxThrust\" /> and others, is the sum of the thrust generated by each thruster.\n</remarks>\n</doc>"
      },
      "Engine_get_SpecificImpulse": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Engine,SpecificImpulse)",
          "ParameterType(0).Class(SpaceCenter.Engine)"
        ],
        "documentation": "<doc>\n<summary>\nThe current specific impulse of the engine, in seconds. Returns zero\nif the engine is not active.\n</summary>\n</doc>"
      },
      "Engine_get_VacuumSpecificImpulse": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Engine,VacuumSpecificImpulse)",
          "ParameterType(0).Class(SpaceCenter.Engine)"
        ],
        "documentation": "<doc>\n<summary>\nThe vacuum specific impulse of the engine, in seconds.\n</summary>\n</doc>"
      },
      "Engine_get_KerbinSeaLevelSpecificImpulse": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Engine,KerbinSeaLevelSpecificImpulse)",
          "ParameterType(0).Class(SpaceCenter.Engine)"
        ],
        "documentation": "<doc>\n<summary>\nThe specific impulse of the engine at sea level on Kerbin, in seconds.\n</summary>\n</doc>"
      },
      "Engine_get_PropellantNames": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Engine,PropellantNames)",
          "ParameterType(0).Class(SpaceCenter.Engine)",
          "ReturnType.List(string)"
        ],
        "documentation": "<doc>\n<summary>\nThe names of the propellants that the engine consumes.\n</summary>\n</doc>"
      },
      "Engine_get_Propellants": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Engine,Propellants)",
          "ParameterType(0).Class(SpaceCenter.Engine)",
          "ReturnType.List(Class(SpaceCenter.Propellant))"
        ],
        "documentation": "<doc>\n<summary>\nThe propellants that the engine consumes.\n</summary>\n</doc>"
      },
      "Engine_get_PropellantRatios": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Dictionary",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Engine,PropellantRatios)",
          "ParameterType(0).Class(SpaceCenter.Engine)",
          "ReturnType.Dictionary(string,float)"
        ],
        "documentation": "<doc>\n<summary>\nThe ratio of resources that the engine consumes. A dictionary mapping resource names\nto the ratio at which they are consumed by the engine.\n</summary>\n<remarks>\nFor example, if the ratios are 0.6 for LiquidFuel and 0.4 for Oxidizer, then for every 0.6 units of\nLiquidFuel that the engine burns, it will burn 0.4 units of Oxidizer.\n</remarks>\n</doc>"
      },
      "Engine_get_HasFuel": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Engine,HasFuel)",
          "ParameterType(0).Class(SpaceCenter.Engine)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the engine has any fuel available.\n</summary>\n<remarks>\nThe engine must be activated for this property to update correctly.\n</remarks>\n</doc>"
      },
      "Engine_get_Throttle": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Engine,Throttle)",
          "ParameterType(0).Class(SpaceCenter.Engine)"
        ],
        "documentation": "<doc>\n<summary>\nThe current throttle setting for the engine. A value between 0 and 1.\nThis is not necessarily the same as the vessel's main throttle\nsetting, as some engines take time to adjust their throttle\n(such as jet engines).\n</summary>\n</doc>"
      },
      "Engine_get_ThrottleLocked": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Engine,ThrottleLocked)",
          "ParameterType(0).Class(SpaceCenter.Engine)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the <see cref=\"M:SpaceCenter.Control.Throttle\" /> affects the engine. For example,\nthis is <c>true</c> for liquid fueled rockets, and <c>false</c> for solid rocket\nboosters.\n</summary>\n</doc>"
      },
      "Engine_get_CanRestart": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Engine,CanRestart)",
          "ParameterType(0).Class(SpaceCenter.Engine)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the engine can be restarted once shutdown. If the engine cannot be shutdown,\nreturns <c>false</c>. For example, this is <c>true</c> for liquid fueled rockets\nand <c>false</c> for solid rocket boosters.\n</summary>\n</doc>"
      },
      "Engine_get_CanShutdown": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Engine,CanShutdown)",
          "ParameterType(0).Class(SpaceCenter.Engine)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the engine can be shutdown once activated. For example, this is\n<c>true</c> for liquid fueled rockets and <c>false</c> for solid rocket boosters.\n</summary>\n</doc>"
      },
      "Engine_get_HasModes": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Engine,HasModes)",
          "ParameterType(0).Class(SpaceCenter.Engine)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the engine has multiple modes of operation.\n</summary>\n</doc>"
      },
      "Engine_get_Mode": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "string",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Engine,Mode)",
          "ParameterType(0).Class(SpaceCenter.Engine)"
        ],
        "documentation": "<doc>\n<summary>\nThe name of the current engine mode.\n</summary>\n</doc>"
      },
      "Engine_set_Mode": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "string"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Engine,Mode)",
          "ParameterType(0).Class(SpaceCenter.Engine)"
        ],
        "documentation": "<doc>\n<summary>\nThe name of the current engine mode.\n</summary>\n</doc>"
      },
      "Engine_get_Modes": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Dictionary",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Engine,Modes)",
          "ParameterType(0).Class(SpaceCenter.Engine)",
          "ReturnType.Dictionary(string,Class(SpaceCenter.Engine))"
        ],
        "documentation": "<doc>\n<summary>\nThe available modes for the engine.\nA dictionary mapping mode names to <see cref=\"T:SpaceCenter.Engine\" /> objects.\n</summary>\n</doc>"
      },
      "Engine_get_AutoModeSwitch": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Engine,AutoModeSwitch)",
          "ParameterType(0).Class(SpaceCenter.Engine)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the engine will automatically switch modes.\n</summary>\n</doc>"
      },
      "Engine_set_AutoModeSwitch": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Engine,AutoModeSwitch)",
          "ParameterType(0).Class(SpaceCenter.Engine)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the engine will automatically switch modes.\n</summary>\n</doc>"
      },
      "Engine_get_Gimballed": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Engine,Gimballed)",
          "ParameterType(0).Class(SpaceCenter.Engine)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the engine is gimballed.\n</summary>\n</doc>"
      },
      "Engine_get_GimbalRange": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Engine,GimbalRange)",
          "ParameterType(0).Class(SpaceCenter.Engine)"
        ],
        "documentation": "<doc>\n<summary>\nThe range over which the gimbal can move, in degrees.\nReturns 0 if the engine is not gimballed.\n</summary>\n</doc>"
      },
      "Engine_get_GimbalLocked": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Engine,GimbalLocked)",
          "ParameterType(0).Class(SpaceCenter.Engine)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the engines gimbal is locked in place. Setting this attribute has\nno effect if the engine is not gimballed.\n</summary>\n</doc>"
      },
      "Engine_set_GimbalLocked": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Engine,GimbalLocked)",
          "ParameterType(0).Class(SpaceCenter.Engine)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the engines gimbal is locked in place. Setting this attribute has\nno effect if the engine is not gimballed.\n</summary>\n</doc>"
      },
      "Engine_get_GimbalLimit": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Engine,GimbalLimit)",
          "ParameterType(0).Class(SpaceCenter.Engine)"
        ],
        "documentation": "<doc>\n<summary>\nThe gimbal limiter of the engine. A value between 0 and 1.\nReturns 0 if the gimbal is locked.\n</summary>\n</doc>"
      },
      "Engine_set_GimbalLimit": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "float"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Engine,GimbalLimit)",
          "ParameterType(0).Class(SpaceCenter.Engine)"
        ],
        "documentation": "<doc>\n<summary>\nThe gimbal limiter of the engine. A value between 0 and 1.\nReturns 0 if the gimbal is locked.\n</summary>\n</doc>"
      },
      "Engine_get_AvailableTorque": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Engine,AvailableTorque)",
          "ParameterType(0).Class(SpaceCenter.Engine)",
          "ReturnType.Tuple(Tuple(double,double,double),Tuple(double,double,double))"
        ],
        "documentation": "<doc>\n<summary>\nThe available torque in the pitch, roll and yaw axes of the vessel, in Newton meters.\nThese axes correspond to the coordinate axes of the <see cref=\"M:SpaceCenter.Vessel.ReferenceFrame\" />.\nReturns zero if the engine is inactive, or not gimballed.\n</summary>\n</doc>"
      },
      "Experiment_Run": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "attributes": [
          "Class.Method(SpaceCenter.Experiment,Run)",
          "ParameterType(0).Class(SpaceCenter.Experiment)"
        ],
        "documentation": "<doc>\n<summary>\nRun the experiment.\n</summary>\n</doc>"
      },
      "Experiment_Transmit": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "attributes": [
          "Class.Method(SpaceCenter.Experiment,Transmit)",
          "ParameterType(0).Class(SpaceCenter.Experiment)"
        ],
        "documentation": "<doc>\n<summary>\nTransmit all experimental data contained by this part.\n</summary>\n</doc>"
      },
      "Experiment_Dump": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "attributes": [
          "Class.Method(SpaceCenter.Experiment,Dump)",
          "ParameterType(0).Class(SpaceCenter.Experiment)"
        ],
        "documentation": "<doc>\n<summary>\nDump the experimental data contained by the experiment.\n</summary>\n</doc>"
      },
      "Experiment_Reset": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "attributes": [
          "Class.Method(SpaceCenter.Experiment,Reset)",
          "ParameterType(0).Class(SpaceCenter.Experiment)"
        ],
        "documentation": "<doc>\n<summary>\nReset the experiment.\n</summary>\n</doc>"
      },
      "Experiment_get_Part": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Experiment,Part)",
          "ParameterType(0).Class(SpaceCenter.Experiment)",
          "ReturnType.Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe part object for this experiment.\n</summary>\n</doc>"
      },
      "Experiment_get_Inoperable": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Experiment,Inoperable)",
          "ParameterType(0).Class(SpaceCenter.Experiment)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the experiment is inoperable.\n</summary>\n</doc>"
      },
      "Experiment_get_Deployed": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Experiment,Deployed)",
          "ParameterType(0).Class(SpaceCenter.Experiment)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the experiment has been deployed.\n</summary>\n</doc>"
      },
      "Experiment_get_Rerunnable": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Experiment,Rerunnable)",
          "ParameterType(0).Class(SpaceCenter.Experiment)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the experiment can be re-run.\n</summary>\n</doc>"
      },
      "Experiment_get_HasData": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Experiment,HasData)",
          "ParameterType(0).Class(SpaceCenter.Experiment)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the experiment contains data.\n</summary>\n</doc>"
      },
      "Experiment_get_Data": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Experiment,Data)",
          "ParameterType(0).Class(SpaceCenter.Experiment)",
          "ReturnType.List(Class(SpaceCenter.ScienceData))"
        ],
        "documentation": "<doc>\n<summary>\nThe data contained in this experiment.\n</summary>\n</doc>"
      },
      "Experiment_get_Available": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Experiment,Available)",
          "ParameterType(0).Class(SpaceCenter.Experiment)"
        ],
        "documentation": "<doc>\n<summary>\nDetermines if the experiment is available given the current conditions.\n</summary>\n</doc>"
      },
      "Experiment_get_Biome": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "string",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Experiment,Biome)",
          "ParameterType(0).Class(SpaceCenter.Experiment)"
        ],
        "documentation": "<doc>\n<summary>\nThe name of the biome the experiment is currently in.\n</summary>\n</doc>"
      },
      "Experiment_get_ScienceSubject": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Experiment,ScienceSubject)",
          "ParameterType(0).Class(SpaceCenter.Experiment)",
          "ReturnType.Class(SpaceCenter.ScienceSubject)"
        ],
        "documentation": "<doc>\n<summary>\nContaining information on the corresponding specific science result for the current conditions.\nReturns null if experiment is unavailable.\n</summary>\n</doc>"
      },
      "Fairing_Jettison": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "attributes": [
          "Class.Method(SpaceCenter.Fairing,Jettison)",
          "ParameterType(0).Class(SpaceCenter.Fairing)"
        ],
        "documentation": "<doc>\n<summary>\nJettison the fairing. Has no effect if it has already been jettisoned.\n</summary>\n</doc>"
      },
      "Fairing_get_Part": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Fairing,Part)",
          "ParameterType(0).Class(SpaceCenter.Fairing)",
          "ReturnType.Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe part object for this fairing.\n</summary>\n</doc>"
      },
      "Fairing_get_Jettisoned": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Fairing,Jettisoned)",
          "ParameterType(0).Class(SpaceCenter.Fairing)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the fairing has been jettisoned.\n</summary>\n</doc>"
      },
      "Force_Remove": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "attributes": [
          "Class.Method(SpaceCenter.Force,Remove)",
          "ParameterType(0).Class(SpaceCenter.Force)"
        ],
        "documentation": "<doc>\n<summary>\nRemove the force.\n</summary>\n</doc>"
      },
      "Force_get_Part": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Force,Part)",
          "ParameterType(0).Class(SpaceCenter.Force)",
          "ReturnType.Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe part that this force is applied to.\n</summary>\n</doc>"
      },
      "Force_get_ForceVector": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Force,ForceVector)",
          "ParameterType(0).Class(SpaceCenter.Force)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe force vector. The magnitude of the vector is the strength of the force in Newtons.\n</summary>\n</doc>"
      },
      "Force_set_ForceVector": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "KRPC.Tuple"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Force,ForceVector)",
          "ParameterType(0).Class(SpaceCenter.Force)",
          "ParameterType(1).Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe force vector. The magnitude of the vector is the strength of the force in Newtons.\n</summary>\n</doc>"
      },
      "Force_get_Position": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Force,Position)",
          "ParameterType(0).Class(SpaceCenter.Force)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe position at which the force acts.\n</summary>\n</doc>"
      },
      "Force_set_Position": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "KRPC.Tuple"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Force,Position)",
          "ParameterType(0).Class(SpaceCenter.Force)",
          "ParameterType(1).Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe position at which the force acts.\n</summary>\n</doc>"
      },
      "Force_get_ReferenceFrame": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Force,ReferenceFrame)",
          "ParameterType(0).Class(SpaceCenter.Force)",
          "ReturnType.Class(SpaceCenter.ReferenceFrame)"
        ],
        "documentation": "<doc>\n<summary>\nThe reference frame of the force vector and position.\n</summary>\n</doc>"
      },
      "Force_set_ReferenceFrame": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "uint64"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Force,ReferenceFrame)",
          "ParameterType(0).Class(SpaceCenter.Force)",
          "ParameterType(1).Class(SpaceCenter.ReferenceFrame)"
        ],
        "documentation": "<doc>\n<summary>\nThe reference frame of the force vector and position.\n</summary>\n</doc>"
      },
      "Intake_get_Part": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Intake,Part)",
          "ParameterType(0).Class(SpaceCenter.Intake)",
          "ReturnType.Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe part object for this intake.\n</summary>\n</doc>"
      },
      "Intake_get_Open": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Intake,Open)",
          "ParameterType(0).Class(SpaceCenter.Intake)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the intake is open.\n</summary>\n</doc>"
      },
      "Intake_set_Open": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Intake,Open)",
          "ParameterType(0).Class(SpaceCenter.Intake)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the intake is open.\n</summary>\n</doc>"
      },
      "Intake_get_Speed": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Intake,Speed)",
          "ParameterType(0).Class(SpaceCenter.Intake)"
        ],
        "documentation": "<doc>\n<summary>\nSpeed of the flow into the intake, in <math>m/s</math>.\n</summary>\n</doc>"
      },
      "Intake_get_Flow": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Intake,Flow)",
          "ParameterType(0).Class(SpaceCenter.Intake)"
        ],
        "documentation": "<doc>\n<summary>\nThe rate of flow into the intake, in units of resource per second.\n</summary>\n</doc>"
      },
      "Intake_get_Area": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Intake,Area)",
          "ParameterType(0).Class(SpaceCenter.Intake)"
        ],
        "documentation": "<doc>\n<summary>\nThe area of the intake's opening, in square meters.\n</summary>\n</doc>"
      },
      "LandingGear_get_Part": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.LandingGear,Part)",
          "ParameterType(0).Class(SpaceCenter.LandingGear)",
          "ReturnType.Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe part object for this landing gear.\n</summary>\n</doc>"
      },
      "LandingGear_get_Deployable": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.LandingGear,Deployable)",
          "ParameterType(0).Class(SpaceCenter.LandingGear)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the landing gear is deployable.\n</summary>\n</doc>"
      },
      "LandingGear_get_State": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "int32",
        "attributes": [
          "Class.Property.Get(SpaceCenter.LandingGear,State)",
          "ParameterType(0).Class(SpaceCenter.LandingGear)",
          "ReturnType.Enum(SpaceCenter.LandingGearState)"
        ],
        "documentation": "<doc>\n<summary>\nGets the current state of the landing gear.\n</summary>\n<remarks>\nFixed landing gear are always deployed.\n</remarks>\n</doc>"
      },
      "LandingGear_get_Deployed": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.LandingGear,Deployed)",
          "ParameterType(0).Class(SpaceCenter.LandingGear)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the landing gear is deployed.\n</summary>\n<remarks>\nFixed landing gear are always deployed.\nReturns an error if you try to deploy fixed landing gear.\n</remarks>\n</doc>"
      },
      "LandingGear_set_Deployed": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.LandingGear,Deployed)",
          "ParameterType(0).Class(SpaceCenter.LandingGear)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the landing gear is deployed.\n</summary>\n<remarks>\nFixed landing gear are always deployed.\nReturns an error if you try to deploy fixed landing gear.\n</remarks>\n</doc>"
      },
      "LandingGear_get_IsGrounded": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.LandingGear,IsGrounded)",
          "ParameterType(0).Class(SpaceCenter.LandingGear)"
        ],
        "documentation": "<doc>\n<summary>\nReturns whether the gear is touching the ground.\n</summary>\n</doc>"
      },
      "LandingLeg_get_Part": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.LandingLeg,Part)",
          "ParameterType(0).Class(SpaceCenter.LandingLeg)",
          "ReturnType.Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe part object for this landing leg.\n</summary>\n</doc>"
      },
      "LandingLeg_get_State": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "int32",
        "attributes": [
          "Class.Property.Get(SpaceCenter.LandingLeg,State)",
          "ParameterType(0).Class(SpaceCenter.LandingLeg)",
          "ReturnType.Enum(SpaceCenter.LandingLegState)"
        ],
        "documentation": "<doc>\n<summary>\nThe current state of the landing leg.\n</summary>\n</doc>"
      },
      "LandingLeg_get_Deployed": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.LandingLeg,Deployed)",
          "ParameterType(0).Class(SpaceCenter.LandingLeg)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the landing leg is deployed.\n</summary>\n<remarks>\nFixed landing legs are always deployed.\nReturns an error if you try to deploy fixed landing gear.\n</remarks>\n</doc>"
      },
      "LandingLeg_set_Deployed": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.LandingLeg,Deployed)",
          "ParameterType(0).Class(SpaceCenter.LandingLeg)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the landing leg is deployed.\n</summary>\n<remarks>\nFixed landing legs are always deployed.\nReturns an error if you try to deploy fixed landing gear.\n</remarks>\n</doc>"
      },
      "LandingLeg_get_IsGrounded": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.LandingLeg,IsGrounded)",
          "ParameterType(0).Class(SpaceCenter.LandingLeg)"
        ],
        "documentation": "<doc>\n<summary>\nReturns whether the leg is touching the ground.\n</summary>\n</doc>"
      },
      "LaunchClamp_Release": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "attributes": [
          "Class.Method(SpaceCenter.LaunchClamp,Release)",
          "ParameterType(0).Class(SpaceCenter.LaunchClamp)"
        ],
        "documentation": "<doc>\n<summary>\nReleases the docking clamp. Has no effect if the clamp has already been released.\n</summary>\n</doc>"
      },
      "LaunchClamp_get_Part": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.LaunchClamp,Part)",
          "ParameterType(0).Class(SpaceCenter.LaunchClamp)",
          "ReturnType.Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe part object for this launch clamp.\n</summary>\n</doc>"
      },
      "Light_get_Part": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Light,Part)",
          "ParameterType(0).Class(SpaceCenter.Light)",
          "ReturnType.Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe part object for this light.\n</summary>\n</doc>"
      },
      "Light_get_Active": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Light,Active)",
          "ParameterType(0).Class(SpaceCenter.Light)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the light is switched on.\n</summary>\n</doc>"
      },
      "Light_set_Active": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Light,Active)",
          "ParameterType(0).Class(SpaceCenter.Light)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the light is switched on.\n</summary>\n</doc>"
      },
      "Light_get_Color": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Light,Color)",
          "ParameterType(0).Class(SpaceCenter.Light)",
          "ReturnType.Tuple(float,float,float)"
        ],
        "documentation": "<doc>\n<summary>\nThe color of the light, as an RGB triple.\n</summary>\n</doc>"
      },
      "Light_set_Color": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "KRPC.Tuple"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Light,Color)",
          "ParameterType(0).Class(SpaceCenter.Light)",
          "ParameterType(1).Tuple(float,float,float)"
        ],
        "documentation": "<doc>\n<summary>\nThe color of the light, as an RGB triple.\n</summary>\n</doc>"
      },
      "Light_get_PowerUsage": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Light,PowerUsage)",
          "ParameterType(0).Class(SpaceCenter.Light)"
        ],
        "documentation": "<doc>\n<summary>\nThe current power usage, in units of charge per second.\n</summary>\n</doc>"
      },
      "Module_HasField": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "name",
            "type": "string"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Method(SpaceCenter.Module,HasField)",
          "ParameterType(0).Class(SpaceCenter.Module)"
        ],
        "documentation": "<doc>\n<summary>\nReturns <c>true</c> if the module has a field with the given name.\n</summary>\n<param name=\"name\">Name of the field.</param>\n</doc>"
      },
      "Module_GetField": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "name",
            "type": "string"
          }
        ],
        "return_type": "string",
        "attributes": [
          "Class.Method(SpaceCenter.Module,GetField)",
          "ParameterType(0).Class(SpaceCenter.Module)"
        ],
        "documentation": "<doc>\n<summary>\nReturns the value of a field.\n</summary>\n<param name=\"name\">Name of the field.</param>\n</doc>"
      },
      "Module_SetFieldInt": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "value",
            "type": "int32"
          }
        ],
        "attributes": [
          "Class.Method(SpaceCenter.Module,SetFieldInt)",
          "ParameterType(0).Class(SpaceCenter.Module)"
        ],
        "documentation": "<doc>\n<summary>\nSet the value of a field to the given integer number.\n</summary>\n<param name=\"name\">Name of the field.</param>\n<param name=\"value\">Value to set.</param>\n</doc>"
      },
      "Module_SetFieldFloat": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "value",
            "type": "float"
          }
        ],
        "attributes": [
          "Class.Method(SpaceCenter.Module,SetFieldFloat)",
          "ParameterType(0).Class(SpaceCenter.Module)"
        ],
        "documentation": "<doc>\n<summary>\nSet the value of a field to the given floating point number.\n</summary>\n<param name=\"name\">Name of the field.</param>\n<param name=\"value\">Value to set.</param>\n</doc>"
      },
      "Module_SetFieldString": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "value",
            "type": "string"
          }
        ],
        "attributes": [
          "Class.Method(SpaceCenter.Module,SetFieldString)",
          "ParameterType(0).Class(SpaceCenter.Module)"
        ],
        "documentation": "<doc>\n<summary>\nSet the value of a field to the given string.\n</summary>\n<param name=\"name\">Name of the field.</param>\n<param name=\"value\">Value to set.</param>\n</doc>"
      },
      "Module_ResetField": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "name",
            "type": "string"
          }
        ],
        "attributes": [
          "Class.Method(SpaceCenter.Module,ResetField)",
          "ParameterType(0).Class(SpaceCenter.Module)"
        ],
        "documentation": "<doc>\n<summary>\nSet the value of a field to its original value.\n</summary>\n<param name=\"name\">Name of the field.</param>\n</doc>"
      },
      "Module_HasEvent": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "name",
            "type": "string"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Method(SpaceCenter.Module,HasEvent)",
          "ParameterType(0).Class(SpaceCenter.Module)"
        ],
        "documentation": "<doc>\n<summary><c>true</c> if the module has an event with the given name.\n</summary>\n<param name=\"name\"></param>\n</doc>"
      },
      "Module_TriggerEvent": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "name",
            "type": "string"
          }
        ],
        "attributes": [
          "Class.Method(SpaceCenter.Module,TriggerEvent)",
          "ParameterType(0).Class(SpaceCenter.Module)"
        ],
        "documentation": "<doc>\n<summary>\nTrigger the named event. Equivalent to clicking the button in the right-click menu of the part.\n</summary>\n<param name=\"name\"></param>\n</doc>"
      },
      "Module_HasAction": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "name",
            "type": "string"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Method(SpaceCenter.Module,HasAction)",
          "ParameterType(0).Class(SpaceCenter.Module)"
        ],
        "documentation": "<doc>\n<summary><c>true</c> if the part has an action with the given name.\n</summary>\n<param name=\"name\"></param>\n</doc>"
      },
      "Module_SetAction": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "value",
            "type": "bool",
            "default_value": "AQ=="
          }
        ],
        "attributes": [
          "Class.Method(SpaceCenter.Module,SetAction)",
          "ParameterType(0).Class(SpaceCenter.Module)"
        ],
        "documentation": "<doc>\n<summary>\nSet the value of an action with the given name.\n</summary>\n<param name=\"name\"></param>\n<param name=\"value\"></param>\n</doc>"
      },
      "Module_get_Name": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "string",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Module,Name)",
          "ParameterType(0).Class(SpaceCenter.Module)"
        ],
        "documentation": "<doc>\n<summary>\nName of the PartModule. For example, \"ModuleEngines\".\n</summary>\n</doc>"
      },
      "Module_get_Part": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Module,Part)",
          "ParameterType(0).Class(SpaceCenter.Module)",
          "ReturnType.Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe part that contains this module.\n</summary>\n</doc>"
      },
      "Module_get_Fields": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Dictionary",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Module,Fields)",
          "ParameterType(0).Class(SpaceCenter.Module)",
          "ReturnType.Dictionary(string,string)"
        ],
        "documentation": "<doc>\n<summary>\nThe modules field names and their associated values, as a dictionary.\nThese are the values visible in the right-click menu of the part.\n</summary>\n</doc>"
      },
      "Module_get_Events": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Module,Events)",
          "ParameterType(0).Class(SpaceCenter.Module)",
          "ReturnType.List(string)"
        ],
        "documentation": "<doc>\n<summary>\nA list of the names of all of the modules events. Events are the clickable buttons\nvisible in the right-click menu of the part.\n</summary>\n</doc>"
      },
      "Module_get_Actions": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Module,Actions)",
          "ParameterType(0).Class(SpaceCenter.Module)",
          "ReturnType.List(string)"
        ],
        "documentation": "<doc>\n<summary>\nA list of all the names of the modules actions. These are the parts actions that can be assigned\nto action groups in the in-game editor.\n</summary>\n</doc>"
      },
      "Parachute_Deploy": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "attributes": [
          "Class.Method(SpaceCenter.Parachute,Deploy)",
          "ParameterType(0).Class(SpaceCenter.Parachute)"
        ],
        "documentation": "<doc>\n<summary>\nDeploys the parachute. This has no effect if the parachute has already\nbeen deployed.\n</summary>\n</doc>"
      },
      "Parachute_get_Part": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Parachute,Part)",
          "ParameterType(0).Class(SpaceCenter.Parachute)",
          "ReturnType.Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe part object for this parachute.\n</summary>\n</doc>"
      },
      "Parachute_get_Deployed": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Parachute,Deployed)",
          "ParameterType(0).Class(SpaceCenter.Parachute)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the parachute has been deployed.\n</summary>\n</doc>"
      },
      "Parachute_get_State": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "int32",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Parachute,State)",
          "ParameterType(0).Class(SpaceCenter.Parachute)",
          "ReturnType.Enum(SpaceCenter.ParachuteState)"
        ],
        "documentation": "<doc>\n<summary>\nThe current state of the parachute.\n</summary>\n</doc>"
      },
      "Parachute_get_DeployAltitude": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Parachute,DeployAltitude)",
          "ParameterType(0).Class(SpaceCenter.Parachute)"
        ],
        "documentation": "<doc>\n<summary>\nThe altitude at which the parachute will full deploy, in meters.\n</summary>\n</doc>"
      },
      "Parachute_set_DeployAltitude": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "float"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Parachute,DeployAltitude)",
          "ParameterType(0).Class(SpaceCenter.Parachute)"
        ],
        "documentation": "<doc>\n<summary>\nThe altitude at which the parachute will full deploy, in meters.\n</summary>\n</doc>"
      },
      "Parachute_get_DeployMinPressure": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Parachute,DeployMinPressure)",
          "ParameterType(0).Class(SpaceCenter.Parachute)"
        ],
        "documentation": "<doc>\n<summary>\nThe minimum pressure at which the parachute will semi-deploy, in atmospheres.\n</summary>\n</doc>"
      },
      "Parachute_set_DeployMinPressure": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "float"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Parachute,DeployMinPressure)",
          "ParameterType(0).Class(SpaceCenter.Parachute)"
        ],
        "documentation": "<doc>\n<summary>\nThe minimum pressure at which the parachute will semi-deploy, in atmospheres.\n</summary>\n</doc>"
      },
      "Part_Position": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "referenceFrame",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Method(SpaceCenter.Part,Position)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ParameterType(1).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe position of the part in the given reference frame.\n</summary>\n<remarks>\nThis is a fixed position in the part, defined by the parts model.\nIt s not necessarily the same as the parts center of mass.\nUse <see cref=\"M:SpaceCenter.Part.CenterOfMass\" /> to get the parts center of mass.\n</remarks>\n<param name=\"referenceFrame\"></param>\n</doc>"
      },
      "Part_CenterOfMass": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "referenceFrame",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Method(SpaceCenter.Part,CenterOfMass)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ParameterType(1).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe position of the parts center of mass in the given reference frame.\nIf the part is physicsless, this is equivalent to <see cref=\"M:SpaceCenter.Part.Position\" />.\n</summary>\n<param name=\"referenceFrame\"></param>\n</doc>"
      },
      "Part_BoundingBox": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "referenceFrame",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Method(SpaceCenter.Part,BoundingBox)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ParameterType(1).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(Tuple(double,double,double),Tuple(double,double,double))"
        ],
        "documentation": "<doc>\n<summary>\nThe axis-aligned bounding box of the vessel in the given reference frame.\nReturns the minimum and maximum vertices of the box.\n</summary>\n<param name=\"referenceFrame\"></param>\n<remarks>\nThis is computed from the collision meshes of the part.\nIf the part is not collidable, the box has zero volume and is centered on\nthe <see cref=\"M:SpaceCenter.Part.Position\" /> of the part.\n</remarks>\n</doc>"
      },
      "Part_Direction": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "referenceFrame",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Method(SpaceCenter.Part,Direction)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ParameterType(1).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe direction of the part in the given reference frame.\n</summary>\n<param name=\"referenceFrame\"></param>\n</doc>"
      },
      "Part_Velocity": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "referenceFrame",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Method(SpaceCenter.Part,Velocity)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ParameterType(1).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe velocity of the part in the given reference frame.\n</summary>\n<param name=\"referenceFrame\"></param>\n</doc>"
      },
      "Part_Rotation": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "referenceFrame",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Method(SpaceCenter.Part,Rotation)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ParameterType(1).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(double,double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe rotation of the part in the given reference frame.\n</summary>\n<param name=\"referenceFrame\"></param>\n</doc>"
      },
      "Part_AddForce": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "force",
            "type": "KRPC.Tuple"
          },
          {
            "name": "position",
            "type": "KRPC.Tuple"
          },
          {
            "name": "referenceFrame",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Method(SpaceCenter.Part,AddForce)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ParameterType(1).Tuple(double,double,double)",
          "ParameterType(2).Tuple(double,double,double)",
          "ParameterType(3).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Class(SpaceCenter.Force)"
        ],
        "documentation": "<doc>\n<summary>\nExert a constant force on the part, acting at the given position.\nReturns an object that can be used to remove or modify the force.\n</summary>\n</doc>"
      },
      "Part_InstantaneousForce": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "force",
            "type": "KRPC.Tuple"
          },
          {
            "name": "position",
            "type": "KRPC.Tuple"
          },
          {
            "name": "referenceFrame",
            "type": "uint64"
          }
        ],
        "attributes": [
          "Class.Method(SpaceCenter.Part,InstantaneousForce)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ParameterType(1).Tuple(double,double,double)",
          "ParameterType(2).Tuple(double,double,double)",
          "ParameterType(3).Class(SpaceCenter.ReferenceFrame)"
        ],
        "documentation": "<doc>\n<summary>\nExert an instantaneous force on the part, acting at the given position.\n</summary>\n<remarks>\nThe force is applied instantaneously in a single physics update.\n</remarks>\n</doc>"
      },
      "Part_get_Name": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "string",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,Name)",
          "ParameterType(0).Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nInternal name of the part, as used in\n<a href=\"http://wiki.kerbalspaceprogram.com/wiki/CFG_File_Documentation\">part cfg files</a>.\nFor example \"Mark1-2Pod\".\n</summary>\n</doc>"
      },
      "Part_get_Title": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "string",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,Title)",
          "ParameterType(0).Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nTitle of the part, as shown when the part is right clicked in-game. For example \"Mk1-2 Command Pod\".\n</summary>\n</doc>"
      },
      "Part_get_Tag": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "string",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,Tag)",
          "ParameterType(0).Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe name tag for the part. Can be set to a custom string using the in-game user interface.\n</summary>\n<remarks>\nThis requires either the <a href=\"http://github.com/krpc/NameTag/releases/latest\">NameTag</a> or\n<a href=\"http://forum.kerbalspaceprogram.com/index.php?/topic/61827-/\">kOS</a> mods to be installed.\n</remarks>\n</doc>"
      },
      "Part_set_Tag": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "string"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Part,Tag)",
          "ParameterType(0).Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe name tag for the part. Can be set to a custom string using the in-game user interface.\n</summary>\n<remarks>\nThis requires either the <a href=\"http://github.com/krpc/NameTag/releases/latest\">NameTag</a> or\n<a href=\"http://forum.kerbalspaceprogram.com/index.php?/topic/61827-/\">kOS</a> mods to be installed.\n</remarks>\n</doc>"
      },
      "Part_get_Highlighted": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,Highlighted)",
          "ParameterType(0).Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the part is highlighted.\n</summary>\n</doc>"
      },
      "Part_set_Highlighted": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Part,Highlighted)",
          "ParameterType(0).Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the part is highlighted.\n</summary>\n</doc>"
      },
      "Part_get_HighlightColor": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,HighlightColor)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe color used to highlight the part.\n</summary>\n</doc>"
      },
      "Part_set_HighlightColor": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "KRPC.Tuple"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Part,HighlightColor)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ParameterType(1).Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe color used to highlight the part.\n</summary>\n</doc>"
      },
      "Part_get_Cost": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,Cost)",
          "ParameterType(0).Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe cost of the part, in units of funds.\n</summary>\n</doc>"
      },
      "Part_get_Vessel": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,Vessel)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ReturnType.Class(SpaceCenter.Vessel)"
        ],
        "documentation": "<doc>\n<summary>\nThe vessel that contains this part.\n</summary>\n</doc>"
      },
      "Part_get_Parent": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,Parent)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ReturnType.Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe parts parent. Returns <c>null</c> if the part does not have a parent.\nThis, in combination with <see cref=\"M:SpaceCenter.Part.Children\" />, can be used to traverse the vessels parts tree.\n</summary>\n</doc>"
      },
      "Part_get_Children": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,Children)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ReturnType.List(Class(SpaceCenter.Part))"
        ],
        "documentation": "<doc>\n<summary>\nThe parts children. Returns an empty list if the part has no children.\nThis, in combination with <see cref=\"M:SpaceCenter.Part.Parent\" />, can be used to traverse the vessels parts tree.\n</summary>\n</doc>"
      },
      "Part_get_AxiallyAttached": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,AxiallyAttached)",
          "ParameterType(0).Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the part is axially attached to its parent, i.e. on the top\nor bottom of its parent. If the part has no parent, returns <c>false</c>.\n</summary>\n</doc>"
      },
      "Part_get_RadiallyAttached": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,RadiallyAttached)",
          "ParameterType(0).Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the part is radially attached to its parent, i.e. on the side of its parent.\nIf the part has no parent, returns <c>false</c>.\n</summary>\n</doc>"
      },
      "Part_get_Stage": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "int32",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,Stage)",
          "ParameterType(0).Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe stage in which this part will be activated. Returns -1 if the part is not activated by staging.\n</summary>\n</doc>"
      },
      "Part_get_DecoupleStage": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "int32",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,DecoupleStage)",
          "ParameterType(0).Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe stage in which this part will be decoupled. Returns -1 if the part is never decoupled from the vessel.\n</summary>\n</doc>"
      },
      "Part_get_Massless": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,Massless)",
          "ParameterType(0).Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the part is <a href=\"http://wiki.kerbalspaceprogram.com/wiki/Massless_part\">massless</a>.\n</summary>\n</doc>"
      },
      "Part_get_Mass": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,Mass)",
          "ParameterType(0).Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe current mass of the part, including resources it contains, in kilograms.\nReturns zero if the part is massless.\n</summary>\n</doc>"
      },
      "Part_get_DryMass": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,DryMass)",
          "ParameterType(0).Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe mass of the part, not including any resources it contains, in kilograms. Returns zero if the part is massless.\n</summary>\n</doc>"
      },
      "Part_get_Shielded": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,Shielded)",
          "ParameterType(0).Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the part is shielded from the exterior of the vessel, for example by a fairing.\n</summary>\n</doc>"
      },
      "Part_get_DynamicPressure": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,DynamicPressure)",
          "ParameterType(0).Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe dynamic pressure acting on the part, in Pascals.\n</summary>\n</doc>"
      },
      "Part_get_ImpactTolerance": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,ImpactTolerance)",
          "ParameterType(0).Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe impact tolerance of the part, in meters per second.\n</summary>\n</doc>"
      },
      "Part_get_Temperature": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,Temperature)",
          "ParameterType(0).Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nTemperature of the part, in Kelvin.\n</summary>\n</doc>"
      },
      "Part_get_SkinTemperature": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,SkinTemperature)",
          "ParameterType(0).Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nTemperature of the skin of the part, in Kelvin.\n</summary>\n</doc>"
      },
      "Part_get_MaxTemperature": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,MaxTemperature)",
          "ParameterType(0).Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nMaximum temperature that the part can survive, in Kelvin.\n</summary>\n</doc>"
      },
      "Part_get_MaxSkinTemperature": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,MaxSkinTemperature)",
          "ParameterType(0).Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nMaximum temperature that the skin of the part can survive, in Kelvin.\n</summary>\n</doc>"
      },
      "Part_get_ThermalMass": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,ThermalMass)",
          "ParameterType(0).Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nA measure of how much energy it takes to increase the internal temperature of the part, in Joules per Kelvin.\n</summary>\n</doc>"
      },
      "Part_get_ThermalSkinMass": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,ThermalSkinMass)",
          "ParameterType(0).Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nA measure of how much energy it takes to increase the skin temperature of the part, in Joules per Kelvin.\n</summary>\n</doc>"
      },
      "Part_get_ThermalResourceMass": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,ThermalResourceMass)",
          "ParameterType(0).Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nA measure of how much energy it takes to increase the temperature of the resources contained in the part, in Joules per Kelvin.\n</summary>\n</doc>"
      },
      "Part_get_ThermalInternalFlux": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,ThermalInternalFlux)",
          "ParameterType(0).Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe rate at which heat energy is begin generated by the part.\nFor example, some engines generate heat by combusting fuel.\nMeasured in energy per unit time, or power, in Watts.\nA positive value means the part is gaining heat energy, and negative means it is losing heat energy.\n</summary>\n</doc>"
      },
      "Part_get_ThermalConductionFlux": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,ThermalConductionFlux)",
          "ParameterType(0).Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe rate at which heat energy is conducting into or out of the part via contact with other parts.\nMeasured in energy per unit time, or power, in Watts.\nA positive value means the part is gaining heat energy, and negative means it is losing heat energy.\n</summary>\n</doc>"
      },
      "Part_get_ThermalConvectionFlux": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,ThermalConvectionFlux)",
          "ParameterType(0).Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe rate at which heat energy is convecting into or out of the part from the surrounding atmosphere.\nMeasured in energy per unit time, or power, in Watts.\nA positive value means the part is gaining heat energy, and negative means it is losing heat energy.\n</summary>\n</doc>"
      },
      "Part_get_ThermalRadiationFlux": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,ThermalRadiationFlux)",
          "ParameterType(0).Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe rate at which heat energy is radiating into or out of the part from the surrounding environment.\nMeasured in energy per unit time, or power, in Watts.\nA positive value means the part is gaining heat energy, and negative means it is losing heat energy.\n</summary>\n</doc>"
      },
      "Part_get_ThermalSkinToInternalFlux": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,ThermalSkinToInternalFlux)",
          "ParameterType(0).Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe rate at which heat energy is transferring between the part's skin and its internals.\nMeasured in energy per unit time, or power, in Watts.\nA positive value means the part's internals are gaining heat energy,\nand negative means its skin is gaining heat energy.\n</summary>\n</doc>"
      },
      "Part_get_Resources": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,Resources)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ReturnType.Class(SpaceCenter.Resources)"
        ],
        "documentation": "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.Resources\" /> object for the part.\n</summary>\n</doc>"
      },
      "Part_get_Crossfeed": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,Crossfeed)",
          "ParameterType(0).Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nWhether this part is crossfeed capable.\n</summary>\n</doc>"
      },
      "Part_get_IsFuelLine": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,IsFuelLine)",
          "ParameterType(0).Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nWhether this part is a fuel line.\n</summary>\n</doc>"
      },
      "Part_get_FuelLinesFrom": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,FuelLinesFrom)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ReturnType.List(Class(SpaceCenter.Part))"
        ],
        "documentation": "<doc>\n<summary>\nThe parts that are connected to this part via fuel lines, where the direction of the fuel line is into this part.\n</summary>\n</doc>"
      },
      "Part_get_FuelLinesTo": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,FuelLinesTo)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ReturnType.List(Class(SpaceCenter.Part))"
        ],
        "documentation": "<doc>\n<summary>\nThe parts that are connected to this part via fuel lines, where the direction of the fuel line is out of this part.\n</summary>\n</doc>"
      },
      "Part_get_Modules": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,Modules)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ReturnType.List(Class(SpaceCenter.Module))"
        ],
        "documentation": "<doc>\n<summary>\nThe modules for this part.\n</summary>\n</doc>"
      },
      "Part_get_CargoBay": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,CargoBay)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ReturnType.Class(SpaceCenter.CargoBay)"
        ],
        "documentation": "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.CargoBay\" /> if the part is a cargo bay, otherwise <c>null</c>.\n</summary>\n</doc>"
      },
      "Part_get_ControlSurface": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,ControlSurface)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ReturnType.Class(SpaceCenter.ControlSurface)"
        ],
        "documentation": "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.ControlSurface\" /> if the part is an aerodynamic control surface, otherwise <c>null</c>.\n</summary>\n</doc>"
      },
      "Part_get_Decoupler": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,Decoupler)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ReturnType.Class(SpaceCenter.Decoupler)"
        ],
        "documentation": "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.Decoupler\" /> if the part is a decoupler, otherwise <c>null</c>.\n</summary>\n</doc>"
      },
      "Part_get_DockingPort": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,DockingPort)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ReturnType.Class(SpaceCenter.DockingPort)"
        ],
        "documentation": "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.DockingPort\" /> if the part is a docking port, otherwise <c>null</c>.\n</summary>\n</doc>"
      },
      "Part_get_Engine": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,Engine)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ReturnType.Class(SpaceCenter.Engine)"
        ],
        "documentation": "<doc>\n<summary>\nAn <see cref=\"T:SpaceCenter.Engine\" /> if the part is an engine, otherwise <c>null</c>.\n</summary>\n</doc>"
      },
      "Part_get_Experiment": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,Experiment)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ReturnType.Class(SpaceCenter.Experiment)"
        ],
        "documentation": "<doc>\n<summary>\nAn <see cref=\"T:SpaceCenter.Experiment\" /> if the part is a science experiment, otherwise <c>null</c>.\n</summary>\n</doc>"
      },
      "Part_get_Fairing": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,Fairing)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ReturnType.Class(SpaceCenter.Fairing)"
        ],
        "documentation": "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.Fairing\" /> if the part is a fairing, otherwise <c>null</c>.\n</summary>\n</doc>"
      },
      "Part_get_Intake": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,Intake)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ReturnType.Class(SpaceCenter.Intake)"
        ],
        "documentation": "<doc>\n<summary>\nAn <see cref=\"T:SpaceCenter.Intake\" /> if the part is an intake, otherwise <c>null</c>.\n</summary>\n<remarks>\nThis includes any part that generates thrust. This covers many different types of engine,\nincluding liquid fuel rockets, solid rocket boosters and jet engines.\nFor RCS thrusters see <see cref=\"T:SpaceCenter.RCS\" />.\n</remarks>\n</doc>"
      },
      "Part_get_LandingGear": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,LandingGear)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ReturnType.Class(SpaceCenter.LandingGear)"
        ],
        "documentation": "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.LandingGear\" /> if the part is a landing gear, otherwise <c>null</c>.\n</summary>\n</doc>"
      },
      "Part_get_LandingLeg": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,LandingLeg)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ReturnType.Class(SpaceCenter.LandingLeg)"
        ],
        "documentation": "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.LandingLeg\" /> if the part is a landing leg, otherwise <c>null</c>.\n</summary>\n</doc>"
      },
      "Part_get_LaunchClamp": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,LaunchClamp)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ReturnType.Class(SpaceCenter.LaunchClamp)"
        ],
        "documentation": "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.LaunchClamp\" /> if the part is a launch clamp, otherwise <c>null</c>.\n</summary>\n</doc>"
      },
      "Part_get_Light": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,Light)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ReturnType.Class(SpaceCenter.Light)"
        ],
        "documentation": "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.Light\" /> if the part is a light, otherwise <c>null</c>.\n</summary>\n</doc>"
      },
      "Part_get_Parachute": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,Parachute)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ReturnType.Class(SpaceCenter.Parachute)"
        ],
        "documentation": "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.Parachute\" /> if the part is a parachute, otherwise <c>null</c>.\n</summary>\n</doc>"
      },
      "Part_get_Radiator": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,Radiator)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ReturnType.Class(SpaceCenter.Radiator)"
        ],
        "documentation": "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.Radiator\" /> if the part is a radiator, otherwise <c>null</c>.\n</summary>\n</doc>"
      },
      "Part_get_RCS": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,RCS)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ReturnType.Class(SpaceCenter.RCS)"
        ],
        "documentation": "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.RCS\" /> if the part is an RCS block/thruster, otherwise <c>null</c>.\n</summary>\n</doc>"
      },
      "Part_get_ReactionWheel": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,ReactionWheel)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ReturnType.Class(SpaceCenter.ReactionWheel)"
        ],
        "documentation": "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.ReactionWheel\" /> if the part is a reaction wheel, otherwise <c>null</c>.\n</summary>\n</doc>"
      },
      "Part_get_ResourceConverter": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,ResourceConverter)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ReturnType.Class(SpaceCenter.ResourceConverter)"
        ],
        "documentation": "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.ResourceConverter\" /> if the part is a resource converter, otherwise <c>null</c>.\n</summary>\n</doc>"
      },
      "Part_get_ResourceHarvester": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,ResourceHarvester)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ReturnType.Class(SpaceCenter.ResourceHarvester)"
        ],
        "documentation": "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.ResourceHarvester\" /> if the part is a resource harvester, otherwise <c>null</c>.\n</summary>\n</doc>"
      },
      "Part_get_Sensor": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,Sensor)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ReturnType.Class(SpaceCenter.Sensor)"
        ],
        "documentation": "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.Sensor\" /> if the part is a sensor, otherwise <c>null</c>.\n</summary>\n</doc>"
      },
      "Part_get_SolarPanel": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,SolarPanel)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ReturnType.Class(SpaceCenter.SolarPanel)"
        ],
        "documentation": "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.SolarPanel\" /> if the part is a solar panel, otherwise <c>null</c>.\n</summary>\n</doc>"
      },
      "Part_get_MomentOfInertia": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,MomentOfInertia)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe moment of inertia of the part in <math>kg.m^2</math> around its center of mass\nin the parts reference frame (<see cref=\"T:SpaceCenter.ReferenceFrame\" />).\n</summary>\n</doc>"
      },
      "Part_get_InertiaTensor": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,InertiaTensor)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ReturnType.List(double)"
        ],
        "documentation": "<doc>\n<summary>\nThe inertia tensor of the part in the parts reference frame (<see cref=\"T:SpaceCenter.ReferenceFrame\" />).\nReturns the 3x3 matrix as a list of elements, in row-major order.\n</summary>\n</doc>"
      },
      "Part_get_ReferenceFrame": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,ReferenceFrame)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ReturnType.Class(SpaceCenter.ReferenceFrame)"
        ],
        "documentation": "<doc>\n<summary>\nThe reference frame that is fixed relative to this part, and centered on a fixed position within the part, defined by the parts model.\n<list type=\"bullet\"><item><description>The origin is at the position of the part, as returned by <see cref=\"M:SpaceCenter.Part.Position\" />.</description></item><item><description>The axes rotate with the part.</description></item><item><description>The x, y and z axis directions depend on the design of the part.</description></item></list></summary>\n<remarks>\nFor docking port parts, this reference frame is not necessarily equivalent to the reference frame\nfor the docking port, returned by <see cref=\"M:SpaceCenter.DockingPort.ReferenceFrame\" />.\n</remarks>\n</doc>"
      },
      "Part_get_CenterOfMassReferenceFrame": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Part,CenterOfMassReferenceFrame)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ReturnType.Class(SpaceCenter.ReferenceFrame)"
        ],
        "documentation": "<doc>\n<summary>\nThe reference frame that is fixed relative to this part, and centered on its center of mass.\n<list type=\"bullet\"><item><description>The origin is at the center of mass of the part, as returned by <see cref=\"M:SpaceCenter.Part.CenterOfMass\" />.</description></item><item><description>The axes rotate with the part.</description></item><item><description>The x, y and z axis directions depend on the design of the part.</description></item></list></summary>\n<remarks>\nFor docking port parts, this reference frame is not necessarily equivalent to the reference frame\nfor the docking port, returned by <see cref=\"M:SpaceCenter.DockingPort.ReferenceFrame\" />.\n</remarks>\n</doc>"
      },
      "Parts_WithName": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "name",
            "type": "string"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Method(SpaceCenter.Parts,WithName)",
          "ParameterType(0).Class(SpaceCenter.Parts)",
          "ReturnType.List(Class(SpaceCenter.Part))"
        ],
        "documentation": "<doc>\n<summary>\nA list of parts whose <see cref=\"M:SpaceCenter.Part.Name\" /> is <paramref name=\"name\" />.\n</summary>\n<param name=\"name\"></param>\n</doc>"
      },
      "Parts_WithTitle": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "title",
            "type": "string"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Method(SpaceCenter.Parts,WithTitle)",
          "ParameterType(0).Class(SpaceCenter.Parts)",
          "ReturnType.List(Class(SpaceCenter.Part))"
        ],
        "documentation": "<doc>\n<summary>\nA list of all parts whose <see cref=\"M:SpaceCenter.Part.Title\" /> is <paramref name=\"title\" />.\n</summary>\n<param name=\"title\"></param>\n</doc>"
      },
      "Parts_WithTag": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "tag",
            "type": "string"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Method(SpaceCenter.Parts,WithTag)",
          "ParameterType(0).Class(SpaceCenter.Parts)",
          "ReturnType.List(Class(SpaceCenter.Part))"
        ],
        "documentation": "<doc>\n<summary>\nA list of all parts whose <see cref=\"M:SpaceCenter.Part.Tag\" /> is <paramref name=\"tag\" />.\n</summary>\n<param name=\"tag\"></param>\n</doc>"
      },
      "Parts_WithModule": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "moduleName",
            "type": "string"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Method(SpaceCenter.Parts,WithModule)",
          "ParameterType(0).Class(SpaceCenter.Parts)",
          "ReturnType.List(Class(SpaceCenter.Part))"
        ],
        "documentation": "<doc>\n<summary>\nA list of all parts that contain a <see cref=\"T:SpaceCenter.Module\" /> whose\n<see cref=\"M:SpaceCenter.Module.Name\" /> is <paramref name=\"moduleName\" />.\n</summary>\n<param name=\"moduleName\"></param>\n</doc>"
      },
      "Parts_InStage": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "stage",
            "type": "int32"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Method(SpaceCenter.Parts,InStage)",
          "ParameterType(0).Class(SpaceCenter.Parts)",
          "ReturnType.List(Class(SpaceCenter.Part))"
        ],
        "documentation": "<doc>\n<summary>\nA list of all parts that are activated in the given <paramref name=\"stage\" />.\n</summary>\n<param name=\"stage\"></param>\n</doc>"
      },
      "Parts_InDecoupleStage": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "stage",
            "type": "int32"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Method(SpaceCenter.Parts,InDecoupleStage)",
          "ParameterType(0).Class(SpaceCenter.Parts)",
          "ReturnType.List(Class(SpaceCenter.Part))"
        ],
        "documentation": "<doc>\n<summary>\nA list of all parts that are decoupled in the given <paramref name=\"stage\" />.\n</summary>\n<param name=\"stage\"></param>\n</doc>"
      },
      "Parts_ModulesWithName": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "moduleName",
            "type": "string"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Method(SpaceCenter.Parts,ModulesWithName)",
          "ParameterType(0).Class(SpaceCenter.Parts)",
          "ReturnType.List(Class(SpaceCenter.Module))"
        ],
        "documentation": "<doc>\n<summary>\nA list of modules (combined across all parts in the vessel) whose\n<see cref=\"M:SpaceCenter.Module.Name\" /> is <paramref name=\"moduleName\" />.\n</summary>\n<param name=\"moduleName\"></param>\n</doc>"
      },
      "Parts_get_All": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Parts,All)",
          "ParameterType(0).Class(SpaceCenter.Parts)",
          "ReturnType.List(Class(SpaceCenter.Part))"
        ],
        "documentation": "<doc>\n<summary>\nA list of all of the vessels parts.\n</summary>\n</doc>"
      },
      "Parts_get_Root": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Parts,Root)",
          "ParameterType(0).Class(SpaceCenter.Parts)",
          "ReturnType.Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe vessels root part.\n</summary>\n</doc>"
      },
      "Parts_get_Controlling": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Parts,Controlling)",
          "ParameterType(0).Class(SpaceCenter.Parts)",
          "ReturnType.Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe part from which the vessel is controlled.\n</summary>\n</doc>"
      },
      "Parts_set_Controlling": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "uint64"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Parts,Controlling)",
          "ParameterType(0).Class(SpaceCenter.Parts)",
          "ParameterType(1).Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe part from which the vessel is controlled.\n</summary>\n</doc>"
      },
      "Parts_get_ControlSurfaces": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Parts,ControlSurfaces)",
          "ParameterType(0).Class(SpaceCenter.Parts)",
          "ReturnType.List(Class(SpaceCenter.ControlSurface))"
        ],
        "documentation": "<doc>\n<summary>\nA list of all control surfaces in the vessel.\n</summary>\n</doc>"
      },
      "Parts_get_CargoBays": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Parts,CargoBays)",
          "ParameterType(0).Class(SpaceCenter.Parts)",
          "ReturnType.List(Class(SpaceCenter.CargoBay))"
        ],
        "documentation": "<doc>\n<summary>\nA list of all cargo bays in the vessel.\n</summary>\n</doc>"
      },
      "Parts_get_Decouplers": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Parts,Decouplers)",
          "ParameterType(0).Class(SpaceCenter.Parts)",
          "ReturnType.List(Class(SpaceCenter.Decoupler))"
        ],
        "documentation": "<doc>\n<summary>\nA list of all decouplers in the vessel.\n</summary>\n</doc>"
      },
      "Parts_get_DockingPorts": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Parts,DockingPorts)",
          "ParameterType(0).Class(SpaceCenter.Parts)",
          "ReturnType.List(Class(SpaceCenter.DockingPort))"
        ],
        "documentation": "<doc>\n<summary>\nA list of all docking ports in the vessel.\n</summary>\n</doc>"
      },
      "Parts_get_Engines": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Parts,Engines)",
          "ParameterType(0).Class(SpaceCenter.Parts)",
          "ReturnType.List(Class(SpaceCenter.Engine))"
        ],
        "documentation": "<doc>\n<summary>\nA list of all engines in the vessel.\n</summary>\n<remarks>\nThis includes any part that generates thrust. This covers many different types of engine,\nincluding liquid fuel rockets, solid rocket boosters, jet engines and RCS thrusters.\n</remarks>\n</doc>"
      },
      "Parts_get_Experiments": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Parts,Experiments)",
          "ParameterType(0).Class(SpaceCenter.Parts)",
          "ReturnType.List(Class(SpaceCenter.Experiment))"
        ],
        "documentation": "<doc>\n<summary>\nA list of all science experiments in the vessel.\n</summary>\n</doc>"
      },
      "Parts_get_Fairings": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Parts,Fairings)",
          "ParameterType(0).Class(SpaceCenter.Parts)",
          "ReturnType.List(Class(SpaceCenter.Fairing))"
        ],
        "documentation": "<doc>\n<summary>\nA list of all fairings in the vessel.\n</summary>\n</doc>"
      },
      "Parts_get_Intakes": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Parts,Intakes)",
          "ParameterType(0).Class(SpaceCenter.Parts)",
          "ReturnType.List(Class(SpaceCenter.Intake))"
        ],
        "documentation": "<doc>\n<summary>\nA list of all intakes in the vessel.\n</summary>\n</doc>"
      },
      "Parts_get_LandingGear": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Parts,LandingGear)",
          "ParameterType(0).Class(SpaceCenter.Parts)",
          "ReturnType.List(Class(SpaceCenter.LandingGear))"
        ],
        "documentation": "<doc>\n<summary>\nA list of all landing gear attached to the vessel.\n</summary>\n</doc>"
      },
      "Parts_get_LandingLegs": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Parts,LandingLegs)",
          "ParameterType(0).Class(SpaceCenter.Parts)",
          "ReturnType.List(Class(SpaceCenter.LandingLeg))"
        ],
        "documentation": "<doc>\n<summary>\nA list of all landing legs attached to the vessel.\n</summary>\n</doc>"
      },
      "Parts_get_LaunchClamps": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Parts,LaunchClamps)",
          "ParameterType(0).Class(SpaceCenter.Parts)",
          "ReturnType.List(Class(SpaceCenter.LaunchClamp))"
        ],
        "documentation": "<doc>\n<summary>\nA list of all launch clamps attached to the vessel.\n</summary>\n</doc>"
      },
      "Parts_get_Lights": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Parts,Lights)",
          "ParameterType(0).Class(SpaceCenter.Parts)",
          "ReturnType.List(Class(SpaceCenter.Light))"
        ],
        "documentation": "<doc>\n<summary>\nA list of all lights in the vessel.\n</summary>\n</doc>"
      },
      "Parts_get_Parachutes": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Parts,Parachutes)",
          "ParameterType(0).Class(SpaceCenter.Parts)",
          "ReturnType.List(Class(SpaceCenter.Parachute))"
        ],
        "documentation": "<doc>\n<summary>\nA list of all parachutes in the vessel.\n</summary>\n</doc>"
      },
      "Parts_get_Radiators": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Parts,Radiators)",
          "ParameterType(0).Class(SpaceCenter.Parts)",
          "ReturnType.List(Class(SpaceCenter.Radiator))"
        ],
        "documentation": "<doc>\n<summary>\nA list of all radiators in the vessel.\n</summary>\n</doc>"
      },
      "Parts_get_RCS": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Parts,RCS)",
          "ParameterType(0).Class(SpaceCenter.Parts)",
          "ReturnType.List(Class(SpaceCenter.RCS))"
        ],
        "documentation": "<doc>\n<summary>\nA list of all RCS blocks/thrusters in the vessel.\n</summary>\n</doc>"
      },
      "Parts_get_ReactionWheels": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Parts,ReactionWheels)",
          "ParameterType(0).Class(SpaceCenter.Parts)",
          "ReturnType.List(Class(SpaceCenter.ReactionWheel))"
        ],
        "documentation": "<doc>\n<summary>\nA list of all reaction wheels in the vessel.\n</summary>\n</doc>"
      },
      "Parts_get_ResourceConverters": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Parts,ResourceConverters)",
          "ParameterType(0).Class(SpaceCenter.Parts)",
          "ReturnType.List(Class(SpaceCenter.ResourceConverter))"
        ],
        "documentation": "<doc>\n<summary>\nA list of all resource converters in the vessel.\n</summary>\n</doc>"
      },
      "Parts_get_ResourceHarvesters": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Parts,ResourceHarvesters)",
          "ParameterType(0).Class(SpaceCenter.Parts)",
          "ReturnType.List(Class(SpaceCenter.ResourceHarvester))"
        ],
        "documentation": "<doc>\n<summary>\nA list of all resource harvesters in the vessel.\n</summary>\n</doc>"
      },
      "Parts_get_Sensors": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Parts,Sensors)",
          "ParameterType(0).Class(SpaceCenter.Parts)",
          "ReturnType.List(Class(SpaceCenter.Sensor))"
        ],
        "documentation": "<doc>\n<summary>\nA list of all sensors in the vessel.\n</summary>\n</doc>"
      },
      "Parts_get_SolarPanels": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Parts,SolarPanels)",
          "ParameterType(0).Class(SpaceCenter.Parts)",
          "ReturnType.List(Class(SpaceCenter.SolarPanel))"
        ],
        "documentation": "<doc>\n<summary>\nA list of all solar panels in the vessel.\n</summary>\n</doc>"
      },
      "Propellant_get_Name": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "string",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Propellant,Name)",
          "ParameterType(0).Class(SpaceCenter.Propellant)"
        ],
        "documentation": "<doc>\n<summary>\nThe name of the propellant.\n</summary>\n</doc>"
      },
      "Propellant_get_CurrentAmount": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Propellant,CurrentAmount)",
          "ParameterType(0).Class(SpaceCenter.Propellant)"
        ],
        "documentation": "<doc>\n<summary>\nThe current amount of propellant.\n</summary>\n</doc>"
      },
      "Propellant_get_CurrentRequirement": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Propellant,CurrentRequirement)",
          "ParameterType(0).Class(SpaceCenter.Propellant)"
        ],
        "documentation": "<doc>\n<summary>\nThe required amount of propellant.\n</summary>\n</doc>"
      },
      "Propellant_get_TotalResourceAvailable": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Propellant,TotalResourceAvailable)",
          "ParameterType(0).Class(SpaceCenter.Propellant)"
        ],
        "documentation": "<doc>\n<summary>\nThe total amount of the underlying resource currently reachable given resource flow rules.\n</summary>\n</doc>"
      },
      "Propellant_get_TotalResourceCapacity": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Propellant,TotalResourceCapacity)",
          "ParameterType(0).Class(SpaceCenter.Propellant)"
        ],
        "documentation": "<doc>\n<summary>\nThe total vehicle capacity for the underlying propellant resource, restricted by resource flow rules.\n</summary>\n</doc>"
      },
      "Propellant_get_IgnoreForIsp": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Propellant,IgnoreForIsp)",
          "ParameterType(0).Class(SpaceCenter.Propellant)"
        ],
        "documentation": "<doc>\n<summary>\nIf this propellant should be ignored when calculating required mass flow given specific impulse.\n</summary>\n</doc>"
      },
      "Propellant_get_IgnoreForThrustCurve": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Propellant,IgnoreForThrustCurve)",
          "ParameterType(0).Class(SpaceCenter.Propellant)"
        ],
        "documentation": "<doc>\n<summary>\nIf this propellant should be ignored for thrust curve calculations.\n</summary>\n</doc>"
      },
      "Propellant_get_DrawStackGauge": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Propellant,DrawStackGauge)",
          "ParameterType(0).Class(SpaceCenter.Propellant)"
        ],
        "documentation": "<doc>\n<summary>\nIf this propellant has a stack gauge or not.\n</summary>\n</doc>"
      },
      "Propellant_get_IsDeprived": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Propellant,IsDeprived)",
          "ParameterType(0).Class(SpaceCenter.Propellant)"
        ],
        "documentation": "<doc>\n<summary>\nIf this propellant is deprived.\n</summary>\n</doc>"
      },
      "Propellant_get_Ratio": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Propellant,Ratio)",
          "ParameterType(0).Class(SpaceCenter.Propellant)"
        ],
        "documentation": "<doc>\n<summary>\nThe propellant ratio.\n</summary>\n</doc>"
      },
      "RCS_get_Part": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.RCS,Part)",
          "ParameterType(0).Class(SpaceCenter.RCS)",
          "ReturnType.Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe part object for this RCS.\n</summary>\n</doc>"
      },
      "RCS_get_Active": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.RCS,Active)",
          "ParameterType(0).Class(SpaceCenter.RCS)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the RCS thrusters are active.\nAn RCS thruster is inactive if the RCS action group is disabled (<see cref=\"M:SpaceCenter.Control.RCS\" />),\nthe RCS thruster itself is not enabled (<see cref=\"M:SpaceCenter.RCS.Enabled\" />) or\nit is covered by a fairing (<see cref=\"M:SpaceCenter.Part.Shielded\" />).\n</summary>\n</doc>"
      },
      "RCS_get_Enabled": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.RCS,Enabled)",
          "ParameterType(0).Class(SpaceCenter.RCS)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the RCS thrusters are enabled.\n</summary>\n</doc>"
      },
      "RCS_set_Enabled": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.RCS,Enabled)",
          "ParameterType(0).Class(SpaceCenter.RCS)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the RCS thrusters are enabled.\n</summary>\n</doc>"
      },
      "RCS_get_PitchEnabled": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.RCS,PitchEnabled)",
          "ParameterType(0).Class(SpaceCenter.RCS)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the RCS thruster will fire when pitch control input is given.\n</summary>\n</doc>"
      },
      "RCS_set_PitchEnabled": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.RCS,PitchEnabled)",
          "ParameterType(0).Class(SpaceCenter.RCS)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the RCS thruster will fire when pitch control input is given.\n</summary>\n</doc>"
      },
      "RCS_get_YawEnabled": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.RCS,YawEnabled)",
          "ParameterType(0).Class(SpaceCenter.RCS)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the RCS thruster will fire when yaw control input is given.\n</summary>\n</doc>"
      },
      "RCS_set_YawEnabled": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.RCS,YawEnabled)",
          "ParameterType(0).Class(SpaceCenter.RCS)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the RCS thruster will fire when yaw control input is given.\n</summary>\n</doc>"
      },
      "RCS_get_RollEnabled": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.RCS,RollEnabled)",
          "ParameterType(0).Class(SpaceCenter.RCS)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the RCS thruster will fire when roll control input is given.\n</summary>\n</doc>"
      },
      "RCS_set_RollEnabled": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.RCS,RollEnabled)",
          "ParameterType(0).Class(SpaceCenter.RCS)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the RCS thruster will fire when roll control input is given.\n</summary>\n</doc>"
      },
      "RCS_get_ForwardEnabled": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.RCS,ForwardEnabled)",
          "ParameterType(0).Class(SpaceCenter.RCS)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the RCS thruster will fire when pitch control input is given.\n</summary>\n</doc>"
      },
      "RCS_set_ForwardEnabled": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.RCS,ForwardEnabled)",
          "ParameterType(0).Class(SpaceCenter.RCS)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the RCS thruster will fire when pitch control input is given.\n</summary>\n</doc>"
      },
      "RCS_get_UpEnabled": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.RCS,UpEnabled)",
          "ParameterType(0).Class(SpaceCenter.RCS)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the RCS thruster will fire when yaw control input is given.\n</summary>\n</doc>"
      },
      "RCS_set_UpEnabled": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.RCS,UpEnabled)",
          "ParameterType(0).Class(SpaceCenter.RCS)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the RCS thruster will fire when yaw control input is given.\n</summary>\n</doc>"
      },
      "RCS_get_RightEnabled": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.RCS,RightEnabled)",
          "ParameterType(0).Class(SpaceCenter.RCS)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the RCS thruster will fire when roll control input is given.\n</summary>\n</doc>"
      },
      "RCS_set_RightEnabled": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.RCS,RightEnabled)",
          "ParameterType(0).Class(SpaceCenter.RCS)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the RCS thruster will fire when roll control input is given.\n</summary>\n</doc>"
      },
      "RCS_get_AvailableTorque": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.RCS,AvailableTorque)",
          "ParameterType(0).Class(SpaceCenter.RCS)",
          "ReturnType.Tuple(Tuple(double,double,double),Tuple(double,double,double))"
        ],
        "documentation": "<doc>\n<summary>\nThe available torque in the pitch, roll and yaw axes of the vessel, in Newton meters.\nThese axes correspond to the coordinate axes of the <see cref=\"M:SpaceCenter.Vessel.ReferenceFrame\" />.\nReturns zero if the RCS is inactive.\n</summary>\n</doc>"
      },
      "RCS_get_MaxThrust": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.RCS,MaxThrust)",
          "ParameterType(0).Class(SpaceCenter.RCS)"
        ],
        "documentation": "<doc>\n<summary>\nThe maximum amount of thrust that can be produced by the RCS thrusters when active, in Newtons.\n</summary>\n</doc>"
      },
      "RCS_get_MaxVacuumThrust": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.RCS,MaxVacuumThrust)",
          "ParameterType(0).Class(SpaceCenter.RCS)"
        ],
        "documentation": "<doc>\n<summary>\nThe maximum amount of thrust that can be produced by the RCS thrusters when active in a vacuum, in Newtons.\n</summary>\n</doc>"
      },
      "RCS_get_Thrusters": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.RCS,Thrusters)",
          "ParameterType(0).Class(SpaceCenter.RCS)",
          "ReturnType.List(Class(SpaceCenter.Thruster))"
        ],
        "documentation": "<doc>\n<summary>\nA list of thrusters, one of each nozzel in the RCS part.\n</summary>\n</doc>"
      },
      "RCS_get_SpecificImpulse": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.RCS,SpecificImpulse)",
          "ParameterType(0).Class(SpaceCenter.RCS)"
        ],
        "documentation": "<doc>\n<summary>\nThe current specific impulse of the RCS, in seconds. Returns zero\nif the RCS is not active.\n</summary>\n</doc>"
      },
      "RCS_get_VacuumSpecificImpulse": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.RCS,VacuumSpecificImpulse)",
          "ParameterType(0).Class(SpaceCenter.RCS)"
        ],
        "documentation": "<doc>\n<summary>\nThe vacuum specific impulse of the RCS, in seconds.\n</summary>\n</doc>"
      },
      "RCS_get_KerbinSeaLevelSpecificImpulse": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.RCS,KerbinSeaLevelSpecificImpulse)",
          "ParameterType(0).Class(SpaceCenter.RCS)"
        ],
        "documentation": "<doc>\n<summary>\nThe specific impulse of the RCS at sea level on Kerbin, in seconds.\n</summary>\n</doc>"
      },
      "RCS_get_Propellants": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.RCS,Propellants)",
          "ParameterType(0).Class(SpaceCenter.RCS)",
          "ReturnType.List(string)"
        ],
        "documentation": "<doc>\n<summary>\nThe names of resources that the RCS consumes.\n</summary>\n</doc>"
      },
      "RCS_get_PropellantRatios": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Dictionary",
        "attributes": [
          "Class.Property.Get(SpaceCenter.RCS,PropellantRatios)",
          "ParameterType(0).Class(SpaceCenter.RCS)",
          "ReturnType.Dictionary(string,float)"
        ],
        "documentation": "<doc>\n<summary>\nThe ratios of resources that the RCS consumes. A dictionary mapping resource names\nto the ratios at which they are consumed by the RCS.\n</summary>\n</doc>"
      },
      "RCS_get_HasFuel": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.RCS,HasFuel)",
          "ParameterType(0).Class(SpaceCenter.RCS)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the RCS has fuel available.\n</summary>\n<remarks>\nThe RCS thruster must be activated for this property to update correctly.\n</remarks>\n</doc>"
      },
      "Radiator_get_Part": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Radiator,Part)",
          "ParameterType(0).Class(SpaceCenter.Radiator)",
          "ReturnType.Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe part object for this radiator.\n</summary>\n</doc>"
      },
      "Radiator_get_Deployable": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Radiator,Deployable)",
          "ParameterType(0).Class(SpaceCenter.Radiator)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the radiator is deployable.\n</summary>\n</doc>"
      },
      "Radiator_get_Deployed": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Radiator,Deployed)",
          "ParameterType(0).Class(SpaceCenter.Radiator)"
        ],
        "documentation": "<doc>\n<summary>\nFor a deployable radiator, <c>true</c> if the radiator is extended.\nIf the radiator is not deployable, this is always <c>true</c>.\n</summary>\n</doc>"
      },
      "Radiator_set_Deployed": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Radiator,Deployed)",
          "ParameterType(0).Class(SpaceCenter.Radiator)"
        ],
        "documentation": "<doc>\n<summary>\nFor a deployable radiator, <c>true</c> if the radiator is extended.\nIf the radiator is not deployable, this is always <c>true</c>.\n</summary>\n</doc>"
      },
      "Radiator_get_State": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "int32",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Radiator,State)",
          "ParameterType(0).Class(SpaceCenter.Radiator)",
          "ReturnType.Enum(SpaceCenter.RadiatorState)"
        ],
        "documentation": "<doc>\n<summary>\nThe current state of the radiator.\n</summary>\n<remarks>\nA fixed radiator is always <see cref=\"M:SpaceCenter.RadiatorState.Extended\" />.\n</remarks>\n</doc>"
      },
      "ReactionWheel_get_Part": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.ReactionWheel,Part)",
          "ParameterType(0).Class(SpaceCenter.ReactionWheel)",
          "ReturnType.Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe part object for this reaction wheel.\n</summary>\n</doc>"
      },
      "ReactionWheel_get_Active": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.ReactionWheel,Active)",
          "ParameterType(0).Class(SpaceCenter.ReactionWheel)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the reaction wheel is active.\n</summary>\n</doc>"
      },
      "ReactionWheel_set_Active": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.ReactionWheel,Active)",
          "ParameterType(0).Class(SpaceCenter.ReactionWheel)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the reaction wheel is active.\n</summary>\n</doc>"
      },
      "ReactionWheel_get_Broken": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.ReactionWheel,Broken)",
          "ParameterType(0).Class(SpaceCenter.ReactionWheel)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the reaction wheel is broken.\n</summary>\n</doc>"
      },
      "ReactionWheel_get_AvailableTorque": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.ReactionWheel,AvailableTorque)",
          "ParameterType(0).Class(SpaceCenter.ReactionWheel)",
          "ReturnType.Tuple(Tuple(double,double,double),Tuple(double,double,double))"
        ],
        "documentation": "<doc>\n<summary>\nThe available torque in the pitch, roll and yaw axes of the vessel, in Newton meters.\nThese axes correspond to the coordinate axes of the <see cref=\"M:SpaceCenter.Vessel.ReferenceFrame\" />.\nReturns zero if the reaction wheel is inactive or broken.\n</summary>\n</doc>"
      },
      "ReactionWheel_get_MaxTorque": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.ReactionWheel,MaxTorque)",
          "ParameterType(0).Class(SpaceCenter.ReactionWheel)",
          "ReturnType.Tuple(Tuple(double,double,double),Tuple(double,double,double))"
        ],
        "documentation": "<doc>\n<summary>\nThe maximum torque the reaction wheel can provide, is it active,\nin the pitch, roll and yaw axes of the vessel, in Newton meters.\nThese axes correspond to the coordinate axes of the <see cref=\"M:SpaceCenter.Vessel.ReferenceFrame\" />.\n</summary>\n</doc>"
      },
      "ResourceConverter_Active": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "index",
            "type": "int32"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Method(SpaceCenter.ResourceConverter,Active)",
          "ParameterType(0).Class(SpaceCenter.ResourceConverter)"
        ],
        "documentation": "<doc>\n<summary>\nTrue if the specified converter is active.\n</summary>\n<param name=\"index\">Index of the converter.</param>\n</doc>"
      },
      "ResourceConverter_Name": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "index",
            "type": "int32"
          }
        ],
        "return_type": "string",
        "attributes": [
          "Class.Method(SpaceCenter.ResourceConverter,Name)",
          "ParameterType(0).Class(SpaceCenter.ResourceConverter)"
        ],
        "documentation": "<doc>\n<summary>\nThe name of the specified converter.\n</summary>\n<param name=\"index\">Index of the converter.</param>\n</doc>"
      },
      "ResourceConverter_Start": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "index",
            "type": "int32"
          }
        ],
        "attributes": [
          "Class.Method(SpaceCenter.ResourceConverter,Start)",
          "ParameterType(0).Class(SpaceCenter.ResourceConverter)"
        ],
        "documentation": "<doc>\n<summary>\nStart the specified converter.\n</summary>\n<param name=\"index\">Index of the converter.</param>\n</doc>"
      },
      "ResourceConverter_Stop": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "index",
            "type": "int32"
          }
        ],
        "attributes": [
          "Class.Method(SpaceCenter.ResourceConverter,Stop)",
          "ParameterType(0).Class(SpaceCenter.ResourceConverter)"
        ],
        "documentation": "<doc>\n<summary>\nStop the specified converter.\n</summary>\n<param name=\"index\">Index of the converter.</param>\n</doc>"
      },
      "ResourceConverter_State": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "index",
            "type": "int32"
          }
        ],
        "return_type": "int32",
        "attributes": [
          "Class.Method(SpaceCenter.ResourceConverter,State)",
          "ParameterType(0).Class(SpaceCenter.ResourceConverter)",
          "ReturnType.Enum(SpaceCenter.ResourceConverterState)"
        ],
        "documentation": "<doc>\n<summary>\nThe state of the specified converter.\n</summary>\n<param name=\"index\">Index of the converter.</param>\n</doc>"
      },
      "ResourceConverter_StatusInfo": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "index",
            "type": "int32"
          }
        ],
        "return_type": "string",
        "attributes": [
          "Class.Method(SpaceCenter.ResourceConverter,StatusInfo)",
          "ParameterType(0).Class(SpaceCenter.ResourceConverter)"
        ],
        "documentation": "<doc>\n<summary>\nStatus information for the specified converter.\nThis is the full status message shown in the in-game UI.\n</summary>\n<param name=\"index\">Index of the converter.</param>\n</doc>"
      },
      "ResourceConverter_Inputs": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "index",
            "type": "int32"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Method(SpaceCenter.ResourceConverter,Inputs)",
          "ParameterType(0).Class(SpaceCenter.ResourceConverter)",
          "ReturnType.List(string)"
        ],
        "documentation": "<doc>\n<summary>\nList of the names of resources consumed by the specified converter.\n</summary>\n<param name=\"index\">Index of the converter.</param>\n</doc>"
      },
      "ResourceConverter_Outputs": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "index",
            "type": "int32"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Method(SpaceCenter.ResourceConverter,Outputs)",
          "ParameterType(0).Class(SpaceCenter.ResourceConverter)",
          "ReturnType.List(string)"
        ],
        "documentation": "<doc>\n<summary>\nList of the names of resources produced by the specified converter.\n</summary>\n<param name=\"index\">Index of the converter.</param>\n</doc>"
      },
      "ResourceConverter_get_Part": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.ResourceConverter,Part)",
          "ParameterType(0).Class(SpaceCenter.ResourceConverter)",
          "ReturnType.Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe part object for this converter.\n</summary>\n</doc>"
      },
      "ResourceConverter_get_Count": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "int32",
        "attributes": [
          "Class.Property.Get(SpaceCenter.ResourceConverter,Count)",
          "ParameterType(0).Class(SpaceCenter.ResourceConverter)"
        ],
        "documentation": "<doc>\n<summary>\nThe number of converters in the part.\n</summary>\n</doc>"
      },
      "ResourceHarvester_get_Part": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.ResourceHarvester,Part)",
          "ParameterType(0).Class(SpaceCenter.ResourceHarvester)",
          "ReturnType.Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe part object for this harvester.\n</summary>\n</doc>"
      },
      "ResourceHarvester_get_State": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "int32",
        "attributes": [
          "Class.Property.Get(SpaceCenter.ResourceHarvester,State)",
          "ParameterType(0).Class(SpaceCenter.ResourceHarvester)",
          "ReturnType.Enum(SpaceCenter.ResourceHarvesterState)"
        ],
        "documentation": "<doc>\n<summary>\nThe state of the harvester.\n</summary>\n</doc>"
      },
      "ResourceHarvester_get_Deployed": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.ResourceHarvester,Deployed)",
          "ParameterType(0).Class(SpaceCenter.ResourceHarvester)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the harvester is deployed.\n</summary>\n</doc>"
      },
      "ResourceHarvester_set_Deployed": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.ResourceHarvester,Deployed)",
          "ParameterType(0).Class(SpaceCenter.ResourceHarvester)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the harvester is deployed.\n</summary>\n</doc>"
      },
      "ResourceHarvester_get_Active": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.ResourceHarvester,Active)",
          "ParameterType(0).Class(SpaceCenter.ResourceHarvester)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the harvester is actively drilling.\n</summary>\n</doc>"
      },
      "ResourceHarvester_set_Active": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.ResourceHarvester,Active)",
          "ParameterType(0).Class(SpaceCenter.ResourceHarvester)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the harvester is actively drilling.\n</summary>\n</doc>"
      },
      "ResourceHarvester_get_ExtractionRate": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.ResourceHarvester,ExtractionRate)",
          "ParameterType(0).Class(SpaceCenter.ResourceHarvester)"
        ],
        "documentation": "<doc>\n<summary>\nThe rate at which the drill is extracting ore, in units per second.\n</summary>\n</doc>"
      },
      "ResourceHarvester_get_ThermalEfficiency": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.ResourceHarvester,ThermalEfficiency)",
          "ParameterType(0).Class(SpaceCenter.ResourceHarvester)"
        ],
        "documentation": "<doc>\n<summary>\nThe thermal efficiency of the drill, as a percentage of its maximum.\n</summary>\n</doc>"
      },
      "ResourceHarvester_get_CoreTemperature": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.ResourceHarvester,CoreTemperature)",
          "ParameterType(0).Class(SpaceCenter.ResourceHarvester)"
        ],
        "documentation": "<doc>\n<summary>\nThe core temperature of the drill, in Kelvin.\n</summary>\n</doc>"
      },
      "ResourceHarvester_get_OptimumCoreTemperature": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.ResourceHarvester,OptimumCoreTemperature)",
          "ParameterType(0).Class(SpaceCenter.ResourceHarvester)"
        ],
        "documentation": "<doc>\n<summary>\nThe core temperature at which the drill will operate with peak efficiency, in Kelvin.\n</summary>\n</doc>"
      },
      "ScienceData_get_DataAmount": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.ScienceData,DataAmount)",
          "ParameterType(0).Class(SpaceCenter.ScienceData)"
        ],
        "documentation": "<doc>\n<summary>\nData amount.\n</summary>\n</doc>"
      },
      "ScienceData_get_ScienceValue": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.ScienceData,ScienceValue)",
          "ParameterType(0).Class(SpaceCenter.ScienceData)"
        ],
        "documentation": "<doc>\n<summary>\nScience value.\n</summary>\n</doc>"
      },
      "ScienceData_get_TransmitValue": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.ScienceData,TransmitValue)",
          "ParameterType(0).Class(SpaceCenter.ScienceData)"
        ],
        "documentation": "<doc>\n<summary>\nTransmit value.\n</summary>\n</doc>"
      },
      "ScienceSubject_get_Science": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.ScienceSubject,Science)",
          "ParameterType(0).Class(SpaceCenter.ScienceSubject)"
        ],
        "documentation": "<doc>\n<summary>\nAmount of science already earned from this subject, not updated until after transmission/recovery.\n</summary>\n</doc>"
      },
      "ScienceSubject_get_ScienceCap": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.ScienceSubject,ScienceCap)",
          "ParameterType(0).Class(SpaceCenter.ScienceSubject)"
        ],
        "documentation": "<doc>\n<summary>\nTotal science allowable for this subject.\n</summary>\n</doc>"
      },
      "ScienceSubject_get_IsComplete": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.ScienceSubject,IsComplete)",
          "ParameterType(0).Class(SpaceCenter.ScienceSubject)"
        ],
        "documentation": "<doc>\n<summary>\n Whether the experiment has been completed.\n</summary>\n</doc>"
      },
      "ScienceSubject_get_DataScale": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.ScienceSubject,DataScale)",
          "ParameterType(0).Class(SpaceCenter.ScienceSubject)"
        ],
        "documentation": "<doc>\n<summary>\nMultiply science value by this to determine data amount in mits.\n</summary>\n</doc>"
      },
      "ScienceSubject_get_ScientificValue": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.ScienceSubject,ScientificValue)",
          "ParameterType(0).Class(SpaceCenter.ScienceSubject)"
        ],
        "documentation": "<doc>\n<summary>\nDiminishing value multiplier for decreasing the science value returned from repeated experiments.\n</summary>\n</doc>"
      },
      "ScienceSubject_get_SubjectValue": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.ScienceSubject,SubjectValue)",
          "ParameterType(0).Class(SpaceCenter.ScienceSubject)"
        ],
        "documentation": "<doc>\n<summary>\nMultiplier for specific Celestial Body/Experiment Situation combination.\n</summary>\n</doc>"
      },
      "ScienceSubject_get_Title": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "string",
        "attributes": [
          "Class.Property.Get(SpaceCenter.ScienceSubject,Title)",
          "ParameterType(0).Class(SpaceCenter.ScienceSubject)"
        ],
        "documentation": "<doc>\n<summary>\nTitle of science subject, displayed in science archives\n</summary>\n</doc>"
      },
      "Sensor_get_Part": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Sensor,Part)",
          "ParameterType(0).Class(SpaceCenter.Sensor)",
          "ReturnType.Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe part object for this sensor.\n</summary>\n</doc>"
      },
      "Sensor_get_Active": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Sensor,Active)",
          "ParameterType(0).Class(SpaceCenter.Sensor)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the sensor is active.\n</summary>\n</doc>"
      },
      "Sensor_set_Active": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Sensor,Active)",
          "ParameterType(0).Class(SpaceCenter.Sensor)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the sensor is active.\n</summary>\n</doc>"
      },
      "Sensor_get_Value": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "string",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Sensor,Value)",
          "ParameterType(0).Class(SpaceCenter.Sensor)"
        ],
        "documentation": "<doc>\n<summary>\nThe current value of the sensor.\n</summary>\n</doc>"
      },
      "SolarPanel_get_Part": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.SolarPanel,Part)",
          "ParameterType(0).Class(SpaceCenter.SolarPanel)",
          "ReturnType.Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe part object for this solar panel.\n</summary>\n</doc>"
      },
      "SolarPanel_get_Deployed": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.SolarPanel,Deployed)",
          "ParameterType(0).Class(SpaceCenter.SolarPanel)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the solar panel is extended.\n</summary>\n</doc>"
      },
      "SolarPanel_set_Deployed": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.SolarPanel,Deployed)",
          "ParameterType(0).Class(SpaceCenter.SolarPanel)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the solar panel is extended.\n</summary>\n</doc>"
      },
      "SolarPanel_get_State": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "int32",
        "attributes": [
          "Class.Property.Get(SpaceCenter.SolarPanel,State)",
          "ParameterType(0).Class(SpaceCenter.SolarPanel)",
          "ReturnType.Enum(SpaceCenter.SolarPanelState)"
        ],
        "documentation": "<doc>\n<summary>\nThe current state of the solar panel.\n</summary>\n</doc>"
      },
      "SolarPanel_get_EnergyFlow": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.SolarPanel,EnergyFlow)",
          "ParameterType(0).Class(SpaceCenter.SolarPanel)"
        ],
        "documentation": "<doc>\n<summary>\nThe current amount of energy being generated by the solar panel, in\nunits of charge per second.\n</summary>\n</doc>"
      },
      "SolarPanel_get_SunExposure": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.SolarPanel,SunExposure)",
          "ParameterType(0).Class(SpaceCenter.SolarPanel)"
        ],
        "documentation": "<doc>\n<summary>\nThe current amount of sunlight that is incident on the solar panel,\nas a percentage. A value between 0 and 1.\n</summary>\n</doc>"
      },
      "Thruster_ThrustPosition": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "referenceFrame",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Method(SpaceCenter.Thruster,ThrustPosition)",
          "ParameterType(0).Class(SpaceCenter.Thruster)",
          "ParameterType(1).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe position at which the thruster generates thrust, in the given reference frame.\nFor gimballed engines, this takes into account the current rotation of the gimbal.\n</summary>\n<param name=\"referenceFrame\"></param>\n</doc>"
      },
      "Thruster_ThrustDirection": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "referenceFrame",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Method(SpaceCenter.Thruster,ThrustDirection)",
          "ParameterType(0).Class(SpaceCenter.Thruster)",
          "ParameterType(1).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe direction of the force generated by the thruster, in the given reference frame.\nThis is opposite to the direction in which the thruster expels propellant.\nFor gimballed engines, this takes into account the current rotation of the gimbal.\n</summary>\n<param name=\"referenceFrame\"></param>\n</doc>"
      },
      "Thruster_InitialThrustPosition": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "referenceFrame",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Method(SpaceCenter.Thruster,InitialThrustPosition)",
          "ParameterType(0).Class(SpaceCenter.Thruster)",
          "ParameterType(1).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe position at which the thruster generates thrust, when the engine is in its\ninitial position (no gimballing), in the given reference frame.\n</summary>\n<param name=\"referenceFrame\"></param>\n<remarks>\nThis position can move when the gimbal rotates. This is because the thrust position and\ngimbal position are not necessarily the same.\n</remarks>\n</doc>"
      },
      "Thruster_InitialThrustDirection": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "referenceFrame",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Method(SpaceCenter.Thruster,InitialThrustDirection)",
          "ParameterType(0).Class(SpaceCenter.Thruster)",
          "ParameterType(1).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe direction of the force generated by the thruster, when the engine is in its\ninitial position (no gimballing), in the given reference frame.\nThis is opposite to the direction in which the thruster expels propellant.\n</summary>\n<param name=\"referenceFrame\"></param>\n</doc>"
      },
      "Thruster_GimbalPosition": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "referenceFrame",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Method(SpaceCenter.Thruster,GimbalPosition)",
          "ParameterType(0).Class(SpaceCenter.Thruster)",
          "ParameterType(1).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nPosition around which the gimbal pivots.\n</summary>\n</doc>"
      },
      "Thruster_get_Part": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Thruster,Part)",
          "ParameterType(0).Class(SpaceCenter.Thruster)",
          "ReturnType.Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe <see cref=\"T:SpaceCenter.Part\" /> that contains this thruster.\n</summary>\n</doc>"
      },
      "Thruster_get_ThrustReferenceFrame": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Thruster,ThrustReferenceFrame)",
          "ParameterType(0).Class(SpaceCenter.Thruster)",
          "ReturnType.Class(SpaceCenter.ReferenceFrame)"
        ],
        "documentation": "<doc>\n<summary>\nA reference frame that is fixed relative to the thruster and orientated with\nits thrust direction (<see cref=\"M:SpaceCenter.Thruster.ThrustDirection\" />).\nFor gimballed engines, this takes into account the current rotation of the gimbal.\n<list type=\"bullet\"><item><description>\nThe origin is at the position of thrust for this thruster (<see cref=\"M:SpaceCenter.Thruster.ThrustPosition\" />).\n</description></item><item><description>\nThe axes rotate with the thrust direction.\nThis is the direction in which the thruster expels propellant, including any gimballing.\n</description></item><item><description>The y-axis points along the thrust direction.</description></item><item><description>The x-axis and z-axis are perpendicular to the thrust direction.</description></item></list></summary>\n</doc>"
      },
      "Thruster_get_Gimballed": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Thruster,Gimballed)",
          "ParameterType(0).Class(SpaceCenter.Thruster)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the thruster is gimballed.\n</summary>\n</doc>"
      },
      "Thruster_get_GimbalAngle": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Thruster,GimbalAngle)",
          "ParameterType(0).Class(SpaceCenter.Thruster)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe current gimbal angle in the pitch, roll and yaw axes.\n</summary>\n</doc>"
      },
      "ReferenceFrame_CreateRelative": {
        "parameters": [
          {
            "name": "referenceFrame",
            "type": "uint64"
          },
          {
            "name": "position",
            "type": "KRPC.Tuple",
            "default_value": "CggAAAAAAAAAAAoIAAAAAAAAAAAKCAAAAAAAAAAA"
          },
          {
            "name": "rotation",
            "type": "KRPC.Tuple",
            "default_value": "CggAAAAAAAAAAAoIAAAAAAAAAAAKCAAAAAAAAAAACggAAAAAAADwPw=="
          },
          {
            "name": "velocity",
            "type": "KRPC.Tuple",
            "default_value": "CggAAAAAAAAAAAoIAAAAAAAAAAAKCAAAAAAAAAAA"
          },
          {
            "name": "angularVelocity",
            "type": "KRPC.Tuple",
            "default_value": "CggAAAAAAAAAAAoIAAAAAAAAAAAKCAAAAAAAAAAA"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.StaticMethod(SpaceCenter.ReferenceFrame,CreateRelative)",
          "ParameterType(0).Class(SpaceCenter.ReferenceFrame)",
          "ParameterType(1).Tuple(double,double,double)",
          "ParameterType(2).Tuple(double,double,double,double)",
          "ParameterType(3).Tuple(double,double,double)",
          "ParameterType(4).Tuple(double,double,double)",
          "ReturnType.Class(SpaceCenter.ReferenceFrame)"
        ],
        "documentation": "<doc>\n<summary>\nCreate a relative reference frame.\n</summary>\n<param name=\"referenceFrame\">The parent reference frame.</param>\n<param name=\"position\">The offset of the position of the origin.</param>\n<param name=\"rotation\">The rotation to apply to the parent frames rotation, as a quaternion. Defaults to zero.</param>\n<param name=\"velocity\">The linear velocity to offset the parent frame by. Defaults to zero.</param>\n<param name=\"angularVelocity\">The angular velocity to offset the parent frame by. Defaults to zero.</param>\n</doc>"
      },
      "ReferenceFrame_CreateHybrid": {
        "parameters": [
          {
            "name": "position",
            "type": "uint64"
          },
          {
            "name": "rotation",
            "type": "uint64",
            "default_value": "AA=="
          },
          {
            "name": "velocity",
            "type": "uint64",
            "default_value": "AA=="
          },
          {
            "name": "angularVelocity",
            "type": "uint64",
            "default_value": "AA=="
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.StaticMethod(SpaceCenter.ReferenceFrame,CreateHybrid)",
          "ParameterType(0).Class(SpaceCenter.ReferenceFrame)",
          "ParameterType(1).Class(SpaceCenter.ReferenceFrame)",
          "ParameterType(2).Class(SpaceCenter.ReferenceFrame)",
          "ParameterType(3).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Class(SpaceCenter.ReferenceFrame)"
        ],
        "documentation": "<doc>\n<summary>\nCreate a hybrid reference frame, which is a custom reference frame\nwhose components are inherited from other reference frames.\n</summary>\n<param name=\"position\">The reference frame providing the position of the origin.</param>\n<param name=\"rotation\">The reference frame providing the orientation of the frame.</param>\n<param name=\"velocity\">The reference frame providing the linear velocity of the frame.</param>\n<param name=\"angularVelocity\">The reference frame providing the angular velocity of the frame.</param>\n<remarks>\nThe <paramref name=\"position\" /> is required but all other reference frames are optional.\nIf omitted, they are set to the <paramref name=\"position\" /> reference frame.\n</remarks>\n</doc>"
      },
      "Resource_get_Name": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "string",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Resource,Name)",
          "ParameterType(0).Class(SpaceCenter.Resource)"
        ],
        "documentation": "<doc>\n<summary>\nThe name of the resource.\n</summary>\n</doc>"
      },
      "Resource_get_Part": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Resource,Part)",
          "ParameterType(0).Class(SpaceCenter.Resource)",
          "ReturnType.Class(SpaceCenter.Part)"
        ],
        "documentation": "<doc>\n<summary>\nThe part containing the resource.\n</summary>\n</doc>"
      },
      "Resource_get_Max": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Resource,Max)",
          "ParameterType(0).Class(SpaceCenter.Resource)"
        ],
        "documentation": "<doc>\n<summary>\nThe total amount of the resource that can be stored in the part.\n</summary>\n</doc>"
      },
      "Resource_get_Amount": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Resource,Amount)",
          "ParameterType(0).Class(SpaceCenter.Resource)"
        ],
        "documentation": "<doc>\n<summary>\nThe amount of the resource that is currently stored in the part.\n</summary>\n</doc>"
      },
      "Resource_get_Density": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Resource,Density)",
          "ParameterType(0).Class(SpaceCenter.Resource)"
        ],
        "documentation": "<doc>\n<summary>\nThe density of the resource, in <math>kg/l</math>.\n</summary>\n</doc>"
      },
      "Resource_get_FlowMode": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "int32",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Resource,FlowMode)",
          "ParameterType(0).Class(SpaceCenter.Resource)",
          "ReturnType.Enum(SpaceCenter.ResourceFlowMode)"
        ],
        "documentation": "<doc>\n<summary>\nThe flow mode of the resource.\n</summary>\n</doc>"
      },
      "Resource_get_Enabled": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Resource,Enabled)",
          "ParameterType(0).Class(SpaceCenter.Resource)"
        ],
        "documentation": "<doc>\n<summary>\nWhether use of this resource is enabled.\n</summary>\n</doc>"
      },
      "Resource_set_Enabled": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Resource,Enabled)",
          "ParameterType(0).Class(SpaceCenter.Resource)"
        ],
        "documentation": "<doc>\n<summary>\nWhether use of this resource is enabled.\n</summary>\n</doc>"
      },
      "ResourceTransfer_Start": {
        "parameters": [
          {
            "name": "fromPart",
            "type": "uint64"
          },
          {
            "name": "toPart",
            "type": "uint64"
          },
          {
            "name": "resource",
            "type": "string"
          },
          {
            "name": "maxAmount",
            "type": "float"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.StaticMethod(SpaceCenter.ResourceTransfer,Start)",
          "ParameterType(0).Class(SpaceCenter.Part)",
          "ParameterType(1).Class(SpaceCenter.Part)",
          "ReturnType.Class(SpaceCenter.ResourceTransfer)"
        ],
        "documentation": "<doc>\n<summary>\nStart transferring a resource transfer between a pair of parts. The transfer will move at most\n<paramref name=\"maxAmount\" /> units of the resource, depending on how much of the resource is\navailable in the source part and how much storage is available in the destination part.\nUse <see cref=\"M:SpaceCenter.ResourceTransfer.Complete\" /> to check if the transfer is complete.\nUse <see cref=\"M:SpaceCenter.ResourceTransfer.Amount\" /> to see how much of the resource has been transferred.\n</summary>\n<param name=\"fromPart\">The part to transfer to.</param>\n<param name=\"toPart\">The part to transfer from.</param>\n<param name=\"resource\">The name of the resource to transfer.</param>\n<param name=\"maxAmount\">The maximum amount of resource to transfer.</param>\n</doc>"
      },
      "ResourceTransfer_get_Complete": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.ResourceTransfer,Complete)",
          "ParameterType(0).Class(SpaceCenter.ResourceTransfer)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the transfer has completed.\n</summary>\n</doc>"
      },
      "ResourceTransfer_get_Amount": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.ResourceTransfer,Amount)",
          "ParameterType(0).Class(SpaceCenter.ResourceTransfer)"
        ],
        "documentation": "<doc>\n<summary>\nThe amount of the resource that has been transferred.\n</summary>\n</doc>"
      },
      "Resources_WithResource": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "name",
            "type": "string"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Method(SpaceCenter.Resources,WithResource)",
          "ParameterType(0).Class(SpaceCenter.Resources)",
          "ReturnType.List(Class(SpaceCenter.Resource))"
        ],
        "documentation": "<doc>\n<summary>\nAll the individual resources with the given name that can be stored.\n</summary>\n</doc>"
      },
      "Resources_HasResource": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "name",
            "type": "string"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Method(SpaceCenter.Resources,HasResource)",
          "ParameterType(0).Class(SpaceCenter.Resources)"
        ],
        "documentation": "<doc>\n<summary>\nCheck whether the named resource can be stored.\n</summary>\n<param name=\"name\">The name of the resource.</param>\n</doc>"
      },
      "Resources_Max": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "name",
            "type": "string"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Method(SpaceCenter.Resources,Max)",
          "ParameterType(0).Class(SpaceCenter.Resources)"
        ],
        "documentation": "<doc>\n<summary>\nReturns the amount of a resource that can be stored.\n</summary>\n<param name=\"name\">The name of the resource.</param>\n</doc>"
      },
      "Resources_Amount": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "name",
            "type": "string"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Method(SpaceCenter.Resources,Amount)",
          "ParameterType(0).Class(SpaceCenter.Resources)"
        ],
        "documentation": "<doc>\n<summary>\nReturns the amount of a resource that is currently stored.\n</summary>\n<param name=\"name\">The name of the resource.</param>\n</doc>"
      },
      "Resources_Density": {
        "parameters": [
          {
            "name": "name",
            "type": "string"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.StaticMethod(SpaceCenter.Resources,Density)"
        ],
        "documentation": "<doc>\n<summary>\nReturns the density of a resource, in kg/l.\n</summary>\n<param name=\"name\">The name of the resource.</param>\n</doc>"
      },
      "Resources_FlowMode": {
        "parameters": [
          {
            "name": "name",
            "type": "string"
          }
        ],
        "return_type": "int32",
        "attributes": [
          "Class.StaticMethod(SpaceCenter.Resources,FlowMode)",
          "ReturnType.Enum(SpaceCenter.ResourceFlowMode)"
        ],
        "documentation": "<doc>\n<summary>\nReturns the flow mode of a resource.\n</summary>\n<param name=\"name\">The name of the resource.</param>\n</doc>"
      },
      "Resources_get_All": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Resources,All)",
          "ParameterType(0).Class(SpaceCenter.Resources)",
          "ReturnType.List(Class(SpaceCenter.Resource))"
        ],
        "documentation": "<doc>\n<summary>\nAll the individual resources that can be stored.\n</summary>\n</doc>"
      },
      "Resources_get_Names": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Resources,Names)",
          "ParameterType(0).Class(SpaceCenter.Resources)",
          "ReturnType.List(string)"
        ],
        "documentation": "<doc>\n<summary>\nA list of resource names that can be stored.\n</summary>\n</doc>"
      },
      "Resources_get_Enabled": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Resources,Enabled)",
          "ParameterType(0).Class(SpaceCenter.Resources)"
        ],
        "documentation": "<doc>\n<summary>\nWhether use of all the resources are enabled.\n</summary>\n<remarks>\nThis is true if all of the resources are enabled. If any of the resources are not enabled, this is false.\n</remarks>\n</doc>"
      },
      "Resources_set_Enabled": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "bool"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Resources,Enabled)",
          "ParameterType(0).Class(SpaceCenter.Resources)"
        ],
        "documentation": "<doc>\n<summary>\nWhether use of all the resources are enabled.\n</summary>\n<remarks>\nThis is true if all of the resources are enabled. If any of the resources are not enabled, this is false.\n</remarks>\n</doc>"
      },
      "Vessel_Recover": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "attributes": [
          "Class.Method(SpaceCenter.Vessel,Recover)",
          "ParameterType(0).Class(SpaceCenter.Vessel)"
        ],
        "documentation": "<doc>\n<summary>\nRecover the vessel.\n</summary>\n</doc>"
      },
      "Vessel_Flight": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "referenceFrame",
            "type": "uint64",
            "default_value": "AA=="
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Method(SpaceCenter.Vessel,Flight)",
          "ParameterType(0).Class(SpaceCenter.Vessel)",
          "ParameterType(1).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Class(SpaceCenter.Flight)"
        ],
        "documentation": "<doc>\n<summary>\nReturns a <see cref=\"T:SpaceCenter.Flight\" /> object that can be used to get flight\ntelemetry for the vessel, in the specified reference frame.\n</summary>\n<param name=\"referenceFrame\">\nReference frame. Defaults to the vessel's surface reference frame (<see cref=\"M:SpaceCenter.Vessel.SurfaceReferenceFrame\" />).\n</param>\n</doc>"
      },
      "Vessel_ResourcesInDecoupleStage": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "stage",
            "type": "int32"
          },
          {
            "name": "cumulative",
            "type": "bool",
            "default_value": "AQ=="
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Method(SpaceCenter.Vessel,ResourcesInDecoupleStage)",
          "ParameterType(0).Class(SpaceCenter.Vessel)",
          "ReturnType.Class(SpaceCenter.Resources)"
        ],
        "documentation": "<doc>\n<summary>\nReturns a <see cref=\"T:SpaceCenter.Resources\" /> object, that can used to get\ninformation about resources stored in a given <paramref name=\"stage\" />.\n</summary>\n<param name=\"stage\">Get resources for parts that are decoupled in this stage.</param>\n<param name=\"cumulative\">When <c>false</c>, returns the resources for parts\ndecoupled in just the given stage. When <c>true</c> returns the resources decoupled in\nthe given stage and all subsequent stages combined.</param>\n</doc>"
      },
      "Vessel_Position": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "referenceFrame",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Method(SpaceCenter.Vessel,Position)",
          "ParameterType(0).Class(SpaceCenter.Vessel)",
          "ParameterType(1).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nReturns the position vector of the center of mass of the vessel in the given reference frame.\n</summary>\n<param name=\"referenceFrame\"></param>\n</doc>"
      },
      "Vessel_BoundingBox": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "referenceFrame",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Method(SpaceCenter.Vessel,BoundingBox)",
          "ParameterType(0).Class(SpaceCenter.Vessel)",
          "ParameterType(1).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(Tuple(double,double,double),Tuple(double,double,double))"
        ],
        "documentation": "<doc>\n<summary>\nThe axis-aligned bounding box of the vessel in the given reference frame.\nReturns the minimum and maximum vertices of the box.\n</summary>\n<param name=\"referenceFrame\"></param>\n</doc>"
      },
      "Vessel_Velocity": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "referenceFrame",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Method(SpaceCenter.Vessel,Velocity)",
          "ParameterType(0).Class(SpaceCenter.Vessel)",
          "ParameterType(1).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nReturns the velocity vector of the center of mass of the vessel in the given reference frame.\n</summary>\n<param name=\"referenceFrame\"></param>\n</doc>"
      },
      "Vessel_Rotation": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "referenceFrame",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Method(SpaceCenter.Vessel,Rotation)",
          "ParameterType(0).Class(SpaceCenter.Vessel)",
          "ParameterType(1).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(double,double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nReturns the rotation of the center of mass of the vessel in the given reference frame.\n</summary>\n<param name=\"referenceFrame\"></param>\n</doc>"
      },
      "Vessel_Direction": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "referenceFrame",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Method(SpaceCenter.Vessel,Direction)",
          "ParameterType(0).Class(SpaceCenter.Vessel)",
          "ParameterType(1).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nReturns the direction in which the vessel is pointing, as a unit vector, in the given reference frame.\n</summary>\n<param name=\"referenceFrame\"></param>\n</doc>"
      },
      "Vessel_AngularVelocity": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "referenceFrame",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Method(SpaceCenter.Vessel,AngularVelocity)",
          "ParameterType(0).Class(SpaceCenter.Vessel)",
          "ParameterType(1).Class(SpaceCenter.ReferenceFrame)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nReturns the angular velocity of the vessel in the given reference frame. The magnitude of the returned\nvector is the rotational speed in radians per second, and the direction of the vector indicates the\naxis of rotation (using the right hand rule).\n</summary>\n<param name=\"referenceFrame\"></param>\n</doc>"
      },
      "Vessel_get_Name": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "string",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Vessel,Name)",
          "ParameterType(0).Class(SpaceCenter.Vessel)"
        ],
        "documentation": "<doc>\n<summary>\nThe name of the vessel.\n</summary>\n</doc>"
      },
      "Vessel_set_Name": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "string"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Vessel,Name)",
          "ParameterType(0).Class(SpaceCenter.Vessel)"
        ],
        "documentation": "<doc>\n<summary>\nThe name of the vessel.\n</summary>\n</doc>"
      },
      "Vessel_get_Type": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "int32",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Vessel,Type)",
          "ParameterType(0).Class(SpaceCenter.Vessel)",
          "ReturnType.Enum(SpaceCenter.VesselType)"
        ],
        "documentation": "<doc>\n<summary>\nThe type of the vessel.\n</summary>\n</doc>"
      },
      "Vessel_set_Type": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "int32"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Vessel,Type)",
          "ParameterType(0).Class(SpaceCenter.Vessel)",
          "ParameterType(1).Enum(SpaceCenter.VesselType)"
        ],
        "documentation": "<doc>\n<summary>\nThe type of the vessel.\n</summary>\n</doc>"
      },
      "Vessel_get_Situation": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "int32",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Vessel,Situation)",
          "ParameterType(0).Class(SpaceCenter.Vessel)",
          "ReturnType.Enum(SpaceCenter.VesselSituation)"
        ],
        "documentation": "<doc>\n<summary>\nThe situation the vessel is in.\n</summary>\n</doc>"
      },
      "Vessel_get_Recoverable": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Vessel,Recoverable)",
          "ParameterType(0).Class(SpaceCenter.Vessel)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the vessel is recoverable.\n</summary>\n</doc>"
      },
      "Vessel_get_MET": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Vessel,MET)",
          "ParameterType(0).Class(SpaceCenter.Vessel)"
        ],
        "documentation": "<doc>\n<summary>\nThe mission elapsed time in seconds.\n</summary>\n</doc>"
      },
      "Vessel_get_Biome": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "string",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Vessel,Biome)",
          "ParameterType(0).Class(SpaceCenter.Vessel)"
        ],
        "documentation": "<doc>\n<summary>\nThe name of the biome the vessel is currently in.\n</summary>\n</doc>"
      },
      "Vessel_get_Orbit": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Vessel,Orbit)",
          "ParameterType(0).Class(SpaceCenter.Vessel)",
          "ReturnType.Class(SpaceCenter.Orbit)"
        ],
        "documentation": "<doc>\n<summary>\nThe current orbit of the vessel.\n</summary>\n</doc>"
      },
      "Vessel_get_Control": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Vessel,Control)",
          "ParameterType(0).Class(SpaceCenter.Vessel)",
          "ReturnType.Class(SpaceCenter.Control)"
        ],
        "documentation": "<doc>\n<summary>\nReturns a <see cref=\"T:SpaceCenter.Control\" /> object that can be used to manipulate\nthe vessel's control inputs. For example, its pitch/yaw/roll controls,\nRCS and thrust.\n</summary>\n</doc>"
      },
      "Vessel_get_AutoPilot": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Vessel,AutoPilot)",
          "ParameterType(0).Class(SpaceCenter.Vessel)",
          "ReturnType.Class(SpaceCenter.AutoPilot)"
        ],
        "documentation": "<doc>\n<summary>\nAn <see cref=\"T:SpaceCenter.AutoPilot\" /> object, that can be used to perform\nsimple auto-piloting of the vessel.\n</summary>\n</doc>"
      },
      "Vessel_get_Resources": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Vessel,Resources)",
          "ParameterType(0).Class(SpaceCenter.Vessel)",
          "ReturnType.Class(SpaceCenter.Resources)"
        ],
        "documentation": "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.Resources\" /> object, that can used to get information\nabout resources stored in the vessel.\n</summary>\n</doc>"
      },
      "Vessel_get_Parts": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Vessel,Parts)",
          "ParameterType(0).Class(SpaceCenter.Vessel)",
          "ReturnType.Class(SpaceCenter.Parts)"
        ],
        "documentation": "<doc>\n<summary>\nA <see cref=\"T:SpaceCenter.Parts\" /> object, that can used to interact with the parts that make up this vessel.\n</summary>\n</doc>"
      },
      "Vessel_get_Mass": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Vessel,Mass)",
          "ParameterType(0).Class(SpaceCenter.Vessel)"
        ],
        "documentation": "<doc>\n<summary>\nThe total mass of the vessel, including resources, in kg.\n</summary>\n</doc>"
      },
      "Vessel_get_DryMass": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Vessel,DryMass)",
          "ParameterType(0).Class(SpaceCenter.Vessel)"
        ],
        "documentation": "<doc>\n<summary>\nThe total mass of the vessel, excluding resources, in kg.\n</summary>\n</doc>"
      },
      "Vessel_get_Thrust": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Vessel,Thrust)",
          "ParameterType(0).Class(SpaceCenter.Vessel)"
        ],
        "documentation": "<doc>\n<summary>\nThe total thrust currently being produced by the vessel's engines, in\nNewtons. This is computed by summing <see cref=\"M:SpaceCenter.Engine.Thrust\" /> for\nevery engine in the vessel.\n</summary>\n</doc>"
      },
      "Vessel_get_AvailableThrust": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Vessel,AvailableThrust)",
          "ParameterType(0).Class(SpaceCenter.Vessel)"
        ],
        "documentation": "<doc>\n<summary>\nGets the total available thrust that can be produced by the vessel's\nactive engines, in Newtons. This is computed by summing\n<see cref=\"M:SpaceCenter.Engine.AvailableThrust\" /> for every active engine in the vessel.\n</summary>\n</doc>"
      },
      "Vessel_get_MaxThrust": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Vessel,MaxThrust)",
          "ParameterType(0).Class(SpaceCenter.Vessel)"
        ],
        "documentation": "<doc>\n<summary>\nThe total maximum thrust that can be produced by the vessel's active\nengines, in Newtons. This is computed by summing\n<see cref=\"M:SpaceCenter.Engine.MaxThrust\" /> for every active engine.\n</summary>\n</doc>"
      },
      "Vessel_get_MaxVacuumThrust": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Vessel,MaxVacuumThrust)",
          "ParameterType(0).Class(SpaceCenter.Vessel)"
        ],
        "documentation": "<doc>\n<summary>\nThe total maximum thrust that can be produced by the vessel's active\nengines when the vessel is in a vacuum, in Newtons. This is computed by\nsumming <see cref=\"M:SpaceCenter.Engine.MaxVacuumThrust\" /> for every active engine.\n</summary>\n</doc>"
      },
      "Vessel_get_SpecificImpulse": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Vessel,SpecificImpulse)",
          "ParameterType(0).Class(SpaceCenter.Vessel)"
        ],
        "documentation": "<doc>\n<summary>\nThe combined specific impulse of all active engines, in seconds. This is computed using the formula\n<a href=\"http://wiki.kerbalspaceprogram.com/wiki/Specific_impulse#Multiple_engines\">described here</a>.\n</summary>\n</doc>"
      },
      "Vessel_get_VacuumSpecificImpulse": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Vessel,VacuumSpecificImpulse)",
          "ParameterType(0).Class(SpaceCenter.Vessel)"
        ],
        "documentation": "<doc>\n<summary>\nThe combined vacuum specific impulse of all active engines, in seconds. This is computed using the formula\n<a href=\"http://wiki.kerbalspaceprogram.com/wiki/Specific_impulse#Multiple_engines\">described here</a>.\n</summary>\n</doc>"
      },
      "Vessel_get_KerbinSeaLevelSpecificImpulse": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "float",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Vessel,KerbinSeaLevelSpecificImpulse)",
          "ParameterType(0).Class(SpaceCenter.Vessel)"
        ],
        "documentation": "<doc>\n<summary>\nThe combined specific impulse of all active engines at sea level on Kerbin, in seconds.\nThis is computed using the formula\n<a href=\"http://wiki.kerbalspaceprogram.com/wiki/Specific_impulse#Multiple_engines\">described here</a>.\n</summary>\n</doc>"
      },
      "Vessel_get_MomentOfInertia": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Vessel,MomentOfInertia)",
          "ParameterType(0).Class(SpaceCenter.Vessel)",
          "ReturnType.Tuple(double,double,double)"
        ],
        "documentation": "<doc>\n<summary>\nThe moment of inertia of the vessel around its center of mass in <math>kg.m^2</math>.\nThe inertia values are around the pitch, roll and yaw directions respectively.\nThis corresponds to the vessels reference frame (<see cref=\"M:SpaceCenter.Vessel.ReferenceFrame\" />).\n</summary>\n</doc>"
      },
      "Vessel_get_InertiaTensor": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Vessel,InertiaTensor)",
          "ParameterType(0).Class(SpaceCenter.Vessel)",
          "ReturnType.List(double)"
        ],
        "documentation": "<doc>\n<summary>\nThe inertia tensor of the vessel around its center of mass, in the vessels reference frame (<see cref=\"M:SpaceCenter.Vessel.ReferenceFrame\" />).\nReturns the 3x3 matrix as a list of elements, in row-major order.\n</summary>\n</doc>"
      },
      "Vessel_get_AvailableTorque": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Vessel,AvailableTorque)",
          "ParameterType(0).Class(SpaceCenter.Vessel)",
          "ReturnType.Tuple(Tuple(double,double,double),Tuple(double,double,double))"
        ],
        "documentation": "<doc>\n<summary>\nThe maximum torque that the vessel generate. Includes contributions from reaction wheels,\nRCS, gimballed engines and aerodynamic control surfaces.\nReturns the torques in <math>N.m</math> around each of the coordinate axes of the\nvessels reference frame (<see cref=\"M:SpaceCenter.Vessel.ReferenceFrame\" />).\nThese axes are equivalent to the pitch, roll and yaw axes of the vessel.\n</summary>\n</doc>"
      },
      "Vessel_get_AvailableReactionWheelTorque": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Vessel,AvailableReactionWheelTorque)",
          "ParameterType(0).Class(SpaceCenter.Vessel)",
          "ReturnType.Tuple(Tuple(double,double,double),Tuple(double,double,double))"
        ],
        "documentation": "<doc>\n<summary>\nThe maximum torque that the currently active and powered reaction wheels can generate.\nReturns the torques in <math>N.m</math> around each of the coordinate axes of the\nvessels reference frame (<see cref=\"M:SpaceCenter.Vessel.ReferenceFrame\" />).\nThese axes are equivalent to the pitch, roll and yaw axes of the vessel.\n</summary>\n</doc>"
      },
      "Vessel_get_AvailableRCSTorque": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Vessel,AvailableRCSTorque)",
          "ParameterType(0).Class(SpaceCenter.Vessel)",
          "ReturnType.Tuple(Tuple(double,double,double),Tuple(double,double,double))"
        ],
        "documentation": "<doc>\n<summary>\nThe maximum torque that the currently active RCS thrusters can generate.\nReturns the torques in <math>N.m</math> around each of the coordinate axes of the\nvessels reference frame (<see cref=\"M:SpaceCenter.Vessel.ReferenceFrame\" />).\nThese axes are equivalent to the pitch, roll and yaw axes of the vessel.\n</summary>\n</doc>"
      },
      "Vessel_get_AvailableEngineTorque": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Vessel,AvailableEngineTorque)",
          "ParameterType(0).Class(SpaceCenter.Vessel)",
          "ReturnType.Tuple(Tuple(double,double,double),Tuple(double,double,double))"
        ],
        "documentation": "<doc>\n<summary>\nThe maximum torque that the currently active and gimballed engines can generate.\nReturns the torques in <math>N.m</math> around each of the coordinate axes of the\nvessels reference frame (<see cref=\"M:SpaceCenter.Vessel.ReferenceFrame\" />).\nThese axes are equivalent to the pitch, roll and yaw axes of the vessel.\n</summary>\n</doc>"
      },
      "Vessel_get_AvailableControlSurfaceTorque": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Vessel,AvailableControlSurfaceTorque)",
          "ParameterType(0).Class(SpaceCenter.Vessel)",
          "ReturnType.Tuple(Tuple(double,double,double),Tuple(double,double,double))"
        ],
        "documentation": "<doc>\n<summary>\nThe maximum torque that the aerodynamic control surfaces can generate.\nReturns the torques in <math>N.m</math> around each of the coordinate axes of the\nvessels reference frame (<see cref=\"M:SpaceCenter.Vessel.ReferenceFrame\" />).\nThese axes are equivalent to the pitch, roll and yaw axes of the vessel.\n</summary>\n</doc>"
      },
      "Vessel_get_AvailableOtherTorque": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Tuple",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Vessel,AvailableOtherTorque)",
          "ParameterType(0).Class(SpaceCenter.Vessel)",
          "ReturnType.Tuple(Tuple(double,double,double),Tuple(double,double,double))"
        ],
        "documentation": "<doc>\n<summary>\nThe maximum torque that parts (excluding reaction wheels, gimballed engines, RCS and control surfaces) can generate.\nReturns the torques in <math>N.m</math> around each of the coordinate axes of the\nvessels reference frame (<see cref=\"M:SpaceCenter.Vessel.ReferenceFrame\" />).\nThese axes are equivalent to the pitch, roll and yaw axes of the vessel.\n</summary>\n</doc>"
      },
      "Vessel_get_ReferenceFrame": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Vessel,ReferenceFrame)",
          "ParameterType(0).Class(SpaceCenter.Vessel)",
          "ReturnType.Class(SpaceCenter.ReferenceFrame)"
        ],
        "documentation": "<doc>\n<summary>\nThe reference frame that is fixed relative to the vessel, and orientated with the vessel.\n<list type=\"bullet\"><item><description>The origin is at the center of mass of the vessel.</description></item><item><description>The axes rotate with the vessel.</description></item><item><description>The x-axis points out to the right of the vessel.</description></item><item><description>The y-axis points in the forward direction of the vessel.</description></item><item><description>The z-axis points out of the bottom off the vessel.</description></item></list></summary>\n</doc>"
      },
      "Vessel_get_OrbitalReferenceFrame": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Vessel,OrbitalReferenceFrame)",
          "ParameterType(0).Class(SpaceCenter.Vessel)",
          "ReturnType.Class(SpaceCenter.ReferenceFrame)"
        ],
        "documentation": "<doc>\n<summary>\nThe reference frame that is fixed relative to the vessel, and orientated with the vessels\norbital prograde/normal/radial directions.\n<list type=\"bullet\"><item><description>The origin is at the center of mass of the vessel.</description></item><item><description>The axes rotate with the orbital prograde/normal/radial directions.</description></item><item><description>The x-axis points in the orbital anti-radial direction.</description></item><item><description>The y-axis points in the orbital prograde direction.</description></item><item><description>The z-axis points in the orbital normal direction.</description></item></list></summary>\n<remarks>\nBe careful not to confuse this with 'orbit' mode on the navball.\n</remarks>\n</doc>"
      },
      "Vessel_get_SurfaceReferenceFrame": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Vessel,SurfaceReferenceFrame)",
          "ParameterType(0).Class(SpaceCenter.Vessel)",
          "ReturnType.Class(SpaceCenter.ReferenceFrame)"
        ],
        "documentation": "<doc>\n<summary>\nThe reference frame that is fixed relative to the vessel, and orientated with the surface\nof the body being orbited.\n<list type=\"bullet\"><item><description>The origin is at the center of mass of the vessel.</description></item><item><description>The axes rotate with the north and up directions on the surface of the body.</description></item><item><description>The x-axis points in the <a href=\"https://en.wikipedia.org/wiki/Zenith\">zenith</a>\ndirection (upwards, normal to the body being orbited, from the center of the body towards the center of\nmass of the vessel).</description></item><item><description>The y-axis points northwards towards the\n<a href=\"https://en.wikipedia.org/wiki/Horizon\">astronomical horizon</a> (north, and tangential to the\nsurface of the body -- the direction in which a compass would point when on the surface).</description></item><item><description>The z-axis points eastwards towards the\n<a href=\"https://en.wikipedia.org/wiki/Horizon\">astronomical horizon</a> (east, and tangential to the\nsurface of the body -- east on a compass when on the surface).</description></item></list></summary>\n<remarks>\nBe careful not to confuse this with 'surface' mode on the navball.\n</remarks>\n</doc>"
      },
      "Vessel_get_SurfaceVelocityReferenceFrame": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Vessel,SurfaceVelocityReferenceFrame)",
          "ParameterType(0).Class(SpaceCenter.Vessel)",
          "ReturnType.Class(SpaceCenter.ReferenceFrame)"
        ],
        "documentation": "<doc>\n<summary>\nThe reference frame that is fixed relative to the vessel, and orientated with the velocity\nvector of the vessel relative to the surface of the body being orbited.\n<list type=\"bullet\"><item><description>The origin is at the center of mass of the vessel.</description></item><item><description>The axes rotate with the vessel's velocity vector.</description></item><item><description>The y-axis points in the direction of the vessel's velocity vector,\nrelative to the surface of the body being orbited.</description></item><item><description>The z-axis is in the plane of the\n<a href=\"https://en.wikipedia.org/wiki/Horizon\">astronomical horizon</a>.</description></item><item><description>The x-axis is orthogonal to the other two axes.</description></item></list></summary>\n</doc>"
      },
      "Waypoint_Remove": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "attributes": [
          "Class.Method(SpaceCenter.Waypoint,Remove)",
          "ParameterType(0).Class(SpaceCenter.Waypoint)"
        ],
        "documentation": "<doc>\n<summary>\nRemoves the waypoint.\n</summary>\n</doc>"
      },
      "Waypoint_get_Body": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Waypoint,Body)",
          "ParameterType(0).Class(SpaceCenter.Waypoint)",
          "ReturnType.Class(SpaceCenter.CelestialBody)"
        ],
        "documentation": "<doc>\n<summary>\nCelestial body the waypoint is attached to.\n</summary>\n</doc>"
      },
      "Waypoint_set_Body": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "uint64"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Waypoint,Body)",
          "ParameterType(0).Class(SpaceCenter.Waypoint)",
          "ParameterType(1).Class(SpaceCenter.CelestialBody)"
        ],
        "documentation": "<doc>\n<summary>\nCelestial body the waypoint is attached to.\n</summary>\n</doc>"
      },
      "Waypoint_get_Name": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "string",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Waypoint,Name)",
          "ParameterType(0).Class(SpaceCenter.Waypoint)"
        ],
        "documentation": "<doc>\n<summary>\nName of the waypoint as it appears on the map and the contract.\n</summary>\n</doc>"
      },
      "Waypoint_set_Name": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "string"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Waypoint,Name)",
          "ParameterType(0).Class(SpaceCenter.Waypoint)"
        ],
        "documentation": "<doc>\n<summary>\nName of the waypoint as it appears on the map and the contract.\n</summary>\n</doc>"
      },
      "Waypoint_get_Color": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "int32",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Waypoint,Color)",
          "ParameterType(0).Class(SpaceCenter.Waypoint)"
        ],
        "documentation": "<doc>\n<summary>\nThe seed of the icon color. See <see cref=\"M:SpaceCenter.WaypointManager.Colors\" /> for example colors.\n</summary>\n</doc>"
      },
      "Waypoint_set_Color": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "int32"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Waypoint,Color)",
          "ParameterType(0).Class(SpaceCenter.Waypoint)"
        ],
        "documentation": "<doc>\n<summary>\nThe seed of the icon color. See <see cref=\"M:SpaceCenter.WaypointManager.Colors\" /> for example colors.\n</summary>\n</doc>"
      },
      "Waypoint_get_Icon": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "string",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Waypoint,Icon)",
          "ParameterType(0).Class(SpaceCenter.Waypoint)"
        ],
        "documentation": "<doc>\n<summary>\nThe icon of the waypoint.\n</summary>\n</doc>"
      },
      "Waypoint_set_Icon": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "string"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Waypoint,Icon)",
          "ParameterType(0).Class(SpaceCenter.Waypoint)"
        ],
        "documentation": "<doc>\n<summary>\nThe icon of the waypoint.\n</summary>\n</doc>"
      },
      "Waypoint_get_Latitude": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Waypoint,Latitude)",
          "ParameterType(0).Class(SpaceCenter.Waypoint)"
        ],
        "documentation": "<doc>\n<summary>\nThe latitude of the waypoint.\n</summary>\n</doc>"
      },
      "Waypoint_set_Latitude": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "double"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Waypoint,Latitude)",
          "ParameterType(0).Class(SpaceCenter.Waypoint)"
        ],
        "documentation": "<doc>\n<summary>\nThe latitude of the waypoint.\n</summary>\n</doc>"
      },
      "Waypoint_get_Longitude": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Waypoint,Longitude)",
          "ParameterType(0).Class(SpaceCenter.Waypoint)"
        ],
        "documentation": "<doc>\n<summary>\nThe longitude of the waypoint.\n</summary>\n</doc>"
      },
      "Waypoint_set_Longitude": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "double"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Waypoint,Longitude)",
          "ParameterType(0).Class(SpaceCenter.Waypoint)"
        ],
        "documentation": "<doc>\n<summary>\nThe longitude of the waypoint.\n</summary>\n</doc>"
      },
      "Waypoint_get_MeanAltitude": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Waypoint,MeanAltitude)",
          "ParameterType(0).Class(SpaceCenter.Waypoint)"
        ],
        "documentation": "<doc>\n<summary>\nThe altitude of the waypoint above sea level, in meters.\n</summary>\n</doc>"
      },
      "Waypoint_set_MeanAltitude": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "double"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Waypoint,MeanAltitude)",
          "ParameterType(0).Class(SpaceCenter.Waypoint)"
        ],
        "documentation": "<doc>\n<summary>\nThe altitude of the waypoint above sea level, in meters.\n</summary>\n</doc>"
      },
      "Waypoint_get_SurfaceAltitude": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Waypoint,SurfaceAltitude)",
          "ParameterType(0).Class(SpaceCenter.Waypoint)"
        ],
        "documentation": "<doc>\n<summary>\nThe altitude of the waypoint above the surface of the body or sea level, whichever is closer, in meters.\n</summary>\n</doc>"
      },
      "Waypoint_set_SurfaceAltitude": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "double"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Waypoint,SurfaceAltitude)",
          "ParameterType(0).Class(SpaceCenter.Waypoint)"
        ],
        "documentation": "<doc>\n<summary>\nThe altitude of the waypoint above the surface of the body or sea level, whichever is closer, in meters.\n</summary>\n</doc>"
      },
      "Waypoint_get_BedrockAltitude": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "double",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Waypoint,BedrockAltitude)",
          "ParameterType(0).Class(SpaceCenter.Waypoint)"
        ],
        "documentation": "<doc>\n<summary>\nThe altitude of the waypoint above the surface of the body, in meters. When over water, this is the altitude above the sea floor.\n</summary>\n</doc>"
      },
      "Waypoint_set_BedrockAltitude": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "value",
            "type": "double"
          }
        ],
        "attributes": [
          "Class.Property.Set(SpaceCenter.Waypoint,BedrockAltitude)",
          "ParameterType(0).Class(SpaceCenter.Waypoint)"
        ],
        "documentation": "<doc>\n<summary>\nThe altitude of the waypoint above the surface of the body, in meters. When over water, this is the altitude above the sea floor.\n</summary>\n</doc>"
      },
      "Waypoint_get_NearSurface": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Waypoint,NearSurface)",
          "ParameterType(0).Class(SpaceCenter.Waypoint)"
        ],
        "documentation": "<doc>\n<summary>\nTrue if waypoint is a point near or on the body rather than high in orbit.\n</summary>\n</doc>"
      },
      "Waypoint_get_Grounded": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Waypoint,Grounded)",
          "ParameterType(0).Class(SpaceCenter.Waypoint)"
        ],
        "documentation": "<doc>\n<summary>\nTrue if waypoint is actually glued to the ground.\n</summary>\n</doc>"
      },
      "Waypoint_get_Index": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "int32",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Waypoint,Index)",
          "ParameterType(0).Class(SpaceCenter.Waypoint)"
        ],
        "documentation": "<doc>\n<summary>\nThe integer index of this waypoint amongst its cluster of sibling waypoints. \nIn other words, when you have a cluster of waypoints called \"Somewhere Alpha\", \"Somewhere Beta\", and \"Somewhere Gamma\", \nthen the alpha site has index 0, the beta site has index 1 and the gamma site has index 2. \nWhen <see cref=\"M:SpaceCenter.Waypoint.Clustered\" /> is false, this value is zero but meaningless.\n</summary>\n</doc>"
      },
      "Waypoint_get_Clustered": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Waypoint,Clustered)",
          "ParameterType(0).Class(SpaceCenter.Waypoint)"
        ],
        "documentation": "<doc>\n<summary>\nTrue if this waypoint is part of a set of clustered waypoints with greek letter names appended (Alpha, Beta, Gamma, etc). \nIf true, there is a one-to-one correspondence with the greek letter name and the <see cref=\"M:SpaceCenter.Waypoint.Index\" />.\n</summary>\n</doc>"
      },
      "Waypoint_get_HasContract": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "bool",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Waypoint,HasContract)",
          "ParameterType(0).Class(SpaceCenter.Waypoint)"
        ],
        "documentation": "<doc>\n<summary>\nWhether the waypoint belongs to a contract.\n</summary>\n</doc>"
      },
      "Waypoint_get_ContractId": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "int64",
        "attributes": [
          "Class.Property.Get(SpaceCenter.Waypoint,ContractId)",
          "ParameterType(0).Class(SpaceCenter.Waypoint)"
        ],
        "documentation": "<doc>\n<summary>\nThe id of the associated contract.\nReturns 0 if the waypoint does not belong to a contract.\n</summary>\n</doc>"
      },
      "WaypointManager_AddWaypoint": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          },
          {
            "name": "latitude",
            "type": "double"
          },
          {
            "name": "longitude",
            "type": "double"
          },
          {
            "name": "body",
            "type": "uint64"
          },
          {
            "name": "name",
            "type": "string"
          }
        ],
        "return_type": "uint64",
        "attributes": [
          "Class.Method(SpaceCenter.WaypointManager,AddWaypoint)",
          "ParameterType(0).Class(SpaceCenter.WaypointManager)",
          "ParameterType(3).Class(SpaceCenter.CelestialBody)",
          "ReturnType.Class(SpaceCenter.Waypoint)"
        ],
        "documentation": "<doc>\n<summary>\nCreates a waypoint at the given position at ground level, and returns a\n<see cref=\"T:SpaceCenter.Waypoint\" /> object that can be used to modify it.\n</summary>\n<param name=\"latitude\">Latitude of the waypoint.</param>\n<param name=\"longitude\">Longitude of the waypoint.</param>\n<param name=\"body\">Celestial body the waypoint is attached to.</param>\n<param name=\"name\">Name of the waypoint.</param>\n<returns></returns>\n</doc>"
      },
      "WaypointManager_get_Waypoints": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.WaypointManager,Waypoints)",
          "ParameterType(0).Class(SpaceCenter.WaypointManager)",
          "ReturnType.List(Class(SpaceCenter.Waypoint))"
        ],
        "documentation": "<doc>\n<summary>\nA list of all existing waypoints.\n</summary>\n</doc>"
      },
      "WaypointManager_get_Icons": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.List",
        "attributes": [
          "Class.Property.Get(SpaceCenter.WaypointManager,Icons)",
          "ParameterType(0).Class(SpaceCenter.WaypointManager)",
          "ReturnType.List(string)"
        ],
        "documentation": "<doc>\n<summary>\nReturns all available icons (from \"GameData/Squad/Contracts/Icons/\").\n</summary>\n</doc>"
      },
      "WaypointManager_get_Colors": {
        "parameters": [
          {
            "name": "this",
            "type": "uint64"
          }
        ],
        "return_type": "KRPC.Dictionary",
        "attributes": [
          "Class.Property.Get(SpaceCenter.WaypointManager,Colors)",
          "ParameterType(0).Class(SpaceCenter.WaypointManager)",
          "ReturnType.Dictionary(string,int32)"
        ],
        "documentation": "<doc>\n<summary>\nAn example map of known color - seed pairs. \nAny other integers may be used as seed.\n</summary>\n</doc>"
      }
    },
    "classes": {
      "AutoPilot": {
        "documentation": "<doc>\n<summary>\nProvides basic auto-piloting utilities for a vessel.\nCreated by calling <see cref=\"M:SpaceCenter.Vessel.AutoPilot\" />.\n</summary>\n<remarks>\nIf a client engages the auto-pilot and then closes its connection to the server,\nthe auto-pilot will be disengaged and its target reference frame, direction and roll reset to default.\n</remarks>\n</doc>"
      },
      "Camera": {
        "documentation": "<doc>\n<summary>\nControls the game's camera.\nObtained by calling <see cref=\"M:SpaceCenter.Camera\" />.\n</summary>\n</doc>"
      },
      "CelestialBody": {
        "documentation": "<doc>\n<summary>\nRepresents a celestial body (such as a planet or moon).\nSee <see cref=\"M:SpaceCenter.Bodies\" />.\n</summary>\n</doc>"
      },
      "Control": {
        "documentation": "<doc>\n<summary>\nUsed to manipulate the controls of a vessel. This includes adjusting the\nthrottle, enabling/disabling systems such as SAS and RCS, or altering the\ndirection in which the vessel is pointing.\nObtained by calling <see cref=\"M:SpaceCenter.Vessel.Control\" />.\n</summary>\n<remarks>\nControl inputs (such as pitch, yaw and roll) are zeroed when all clients\nthat have set one or more of these inputs are no longer connected.\n</remarks>\n</doc>"
      },
      "Flight": {
        "documentation": "<doc>\n<summary>\nUsed to get flight telemetry for a vessel, by calling <see cref=\"M:SpaceCenter.Vessel.Flight\" />.\nAll of the information returned by this class is given in the reference frame\npassed to that method.\nObtained by calling <see cref=\"M:SpaceCenter.Vessel.Flight\" />.\n</summary>\n<remarks>\nTo get orbital information, such as the apoapsis or inclination, see <see cref=\"T:SpaceCenter.Orbit\" />.\n</remarks>\n</doc>"
      },
      "Node": {
        "documentation": "<doc>\n<summary>\nRepresents a maneuver node. Can be created using <see cref=\"M:SpaceCenter.Control.AddNode\" />.\n</summary>\n</doc>"
      },
      "Orbit": {
        "documentation": "<doc>\n<summary>\nDescribes an orbit. For example, the orbit of a vessel, obtained by calling\n<see cref=\"M:SpaceCenter.Vessel.Orbit\" />, or a celestial body, obtained by calling\n<see cref=\"M:SpaceCenter.CelestialBody.Orbit\" />.\n</summary>\n</doc>"
      },
      "CargoBay": {
        "documentation": "<doc>\n<summary>\nA cargo bay. Obtained by calling <see cref=\"M:SpaceCenter.Part.CargoBay\" />.\n</summary>\n</doc>"
      },
      "ControlSurface": {
        "documentation": "<doc>\n<summary>\nAn aerodynamic control surface. Obtained by calling <see cref=\"M:SpaceCenter.Part.ControlSurface\" />.\n</summary>\n</doc>"
      },
      "Decoupler": {
        "documentation": "<doc>\n<summary>\nA decoupler. Obtained by calling <see cref=\"M:SpaceCenter.Part.Decoupler\" /></summary>\n</doc>"
      },
      "DockingPort": {
        "documentation": "<doc>\n<summary>\nA docking port. Obtained by calling <see cref=\"M:SpaceCenter.Part.DockingPort\" /></summary>\n</doc>"
      },
      "Engine": {
        "documentation": "<doc>\n<summary>\nAn engine, including ones of various types.\nFor example liquid fuelled gimballed engines, solid rocket boosters and jet engines.\nObtained by calling <see cref=\"M:SpaceCenter.Part.Engine\" />.\n</summary>\n<remarks>\nFor RCS thrusters <see cref=\"M:SpaceCenter.Part.RCS\" />.\n</remarks>\n</doc>"
      },
      "Experiment": {
        "documentation": "<doc>\n<summary>\nObtained by calling <see cref=\"M:SpaceCenter.Part.Experiment\" />.\n</summary>\n</doc>"
      },
      "Fairing": {
        "documentation": "<doc>\n<summary>\nA fairing. Obtained by calling <see cref=\"M:SpaceCenter.Part.Fairing\" />.\n</summary>\n</doc>"
      },
      "Force": {
        "documentation": "<doc>\n<summary>\nObtained by calling <see cref=\"M:SpaceCenter.Part.AddForce\" />.\n</summary>\n</doc>"
      },
      "Intake": {
        "documentation": "<doc>\n<summary>\nAn air intake. Obtained by calling <see cref=\"M:SpaceCenter.Part.Intake\" />.\n</summary>\n</doc>"
      },
      "LandingGear": {
        "documentation": "<doc>\n<summary>\nLanding gear with wheels. Obtained by calling <see cref=\"M:SpaceCenter.Part.LandingGear\" />.\n</summary>\n</doc>"
      },
      "LandingLeg": {
        "documentation": "<doc>\n<summary>\nA landing leg. Obtained by calling <see cref=\"M:SpaceCenter.Part.LandingLeg\" />.\n</summary>\n</doc>"
      },
      "LaunchClamp": {
        "documentation": "<doc>\n<summary>\nA launch clamp. Obtained by calling <see cref=\"M:SpaceCenter.Part.LaunchClamp\" />.\n</summary>\n</doc>"
      },
      "Light": {
        "documentation": "<doc>\n<summary>\nA light. Obtained by calling <see cref=\"M:SpaceCenter.Part.Light\" />.\n</summary>\n</doc>"
      },
      "Module": {
        "documentation": "<doc>\n<summary>\nThis can be used to interact with a specific part module. This includes part modules in stock KSP,\nand those added by mods.\n\nIn KSP, each part has zero or more\n<a href=\"http://wiki.kerbalspaceprogram.com/wiki/CFG_File_Documentation#MODULES\">PartModules</a>\nassociated with it. Each one contains some of the functionality of the part.\nFor example, an engine has a \"ModuleEngines\" part module that contains all the\nfunctionality of an engine.\n</summary>\n</doc>"
      },
      "Parachute": {
        "documentation": "<doc>\n<summary>\nA parachute. Obtained by calling <see cref=\"M:SpaceCenter.Part.Parachute\" />.\n</summary>\n</doc>"
      },
      "Part": {
        "documentation": "<doc>\n<summary>\nRepresents an individual part. Vessels are made up of multiple parts.\nInstances of this class can be obtained by several methods in <see cref=\"T:SpaceCenter.Parts\" />.\n</summary>\n</doc>"
      },
      "Parts": {
        "documentation": "<doc>\n<summary>\nInstances of this class are used to interact with the parts of a vessel.\nAn instance can be obtained by calling <see cref=\"M:SpaceCenter.Vessel.Parts\" />.\n</summary>\n</doc>"
      },
      "Propellant": {
        "documentation": "<doc>\n<summary>\nA propellant for an engine. Obtains by calling <see cref=\"M:SpaceCenter.Engine.Propellants\" />.\n</summary>\n</doc>"
      },
      "RCS": {
        "documentation": "<doc>\n<summary>\nAn RCS block or thruster. Obtained by calling <see cref=\"M:SpaceCenter.Part.RCS\" />.\n</summary>\n</doc>"
      },
      "Radiator": {
        "documentation": "<doc>\n<summary>\nA radiator. Obtained by calling <see cref=\"M:SpaceCenter.Part.Radiator\" />.\n</summary>\n</doc>"
      },
      "ReactionWheel": {
        "documentation": "<doc>\n<summary>\nA reaction wheel. Obtained by calling <see cref=\"M:SpaceCenter.Part.ReactionWheel\" />.\n</summary>\n</doc>"
      },
      "ResourceConverter": {
        "documentation": "<doc>\n<summary>\nA resource converter. Obtained by calling <see cref=\"M:SpaceCenter.Part.ResourceConverter\" />.\n</summary>\n</doc>"
      },
      "ResourceHarvester": {
        "documentation": "<doc>\n<summary>\nA resource harvester (drill). Obtained by calling <see cref=\"M:SpaceCenter.Part.ResourceHarvester\" />.\n</summary>\n</doc>"
      },
      "ScienceData": {
        "documentation": "<doc>\n<summary>\nObtained by calling <see cref=\"M:SpaceCenter.Experiment.Data\" />.\n</summary>\n</doc>"
      },
      "ScienceSubject": {
        "documentation": "<doc>\n<summary>\nObtained by calling <see cref=\"M:SpaceCenter.Experiment.ScienceSubject\" />.\n</summary>\n</doc>"
      },
      "Sensor": {
        "documentation": "<doc>\n<summary>\nA sensor, such as a thermometer. Obtained by calling <see cref=\"M:SpaceCenter.Part.Sensor\" />.\n</summary>\n</doc>"
      },
      "SolarPanel": {
        "documentation": "<doc>\n<summary>\nA solar panel. Obtained by calling <see cref=\"M:SpaceCenter.Part.SolarPanel\" />.\n</summary>\n</doc>"
      },
      "Thruster": {
        "documentation": "<doc>\n<summary>\nThe component of an <see cref=\"T:SpaceCenter.Engine\" /> or <see cref=\"T:SpaceCenter.RCS\" /> part that generates thrust.\nCan obtained by calling <see cref=\"M:SpaceCenter.Engine.Thrusters\" /> or <see cref=\"M:SpaceCenter.RCS.Thrusters\" />.\n</summary>\n<remarks>\nEngines can consist of multiple thrusters.\nFor example, the S3 KS-25x4 \"Mammoth\" has four rocket nozzels, and so consists of four thrusters.\n</remarks>\n</doc>"
      },
      "ReferenceFrame": {
        "documentation": "<doc>\n<summary>\nRepresents a reference frame for positions, rotations and\nvelocities. Contains:\n<list type=\"bullet\"><item><description>The position of the origin.</description></item><item><description>The directions of the x, y and z axes.</description></item><item><description>The linear velocity of the frame.</description></item><item><description>The angular velocity of the frame.</description></item></list></summary>\n<remarks>\nThis class does not contain any properties or methods. It is only\nused as a parameter to other functions.\n</remarks>\n</doc>"
      },
      "Resource": {
        "documentation": "<doc>\n<summary>\nAn individual resource stored within a part.\nCreated using methods in the <see cref=\"T:SpaceCenter.Resources\" /> class.\n</summary>\n</doc>"
      },
      "ResourceTransfer": {
        "documentation": "<doc>\n<summary>\nTransfer resources between parts.\n</summary>\n</doc>"
      },
      "Resources": {
        "documentation": "<doc>\n<summary>\nRepresents the collection of resources stored in a vessel, stage or part.\nCreated by calling <see cref=\"M:SpaceCenter.Vessel.Resources\" />,\n<see cref=\"M:SpaceCenter.Vessel.ResourcesInDecoupleStage\" /> or\n<see cref=\"M:SpaceCenter.Part.Resources\" />.\n</summary>\n</doc>"
      },
      "Vessel": {
        "documentation": "<doc>\n<summary>\nThese objects are used to interact with vessels in KSP. This includes getting\norbital and flight data, manipulating control inputs and managing resources.\nCreated using <see cref=\"M:SpaceCenter.ActiveVessel\" /> or <see cref=\"M:SpaceCenter.Vessels\" />.\n</summary>\n</doc>"
      },
      "Waypoint": {
        "documentation": "<doc>\n<summary>\nRepresents a waypoint. Can be created using <see cref=\"M:SpaceCenter.WaypointManager.AddWaypoint\" />.\n</summary>\n</doc>"
      },
      "WaypointManager": {
        "documentation": "<doc>\n<summary>\nWaypoints are the location markers you can see on the map view showing you where contracts are targeted for. \nWith this structure, you can obtain coordinate data for the locations of these waypoints.\nObtained by calling <see cref=\"M:SpaceCenter.WaypointManager\" />.\n</summary>\n</doc>"
      }
    },
    "enumerations": {
      "CameraMode": {
        "documentation": "<doc>\n<summary>\nSee <see cref=\"M:SpaceCenter.Camera.Mode\" />.\n</summary>\n</doc>",
        "values": [
          {
            "name": "Automatic",
            "value": 0,
            "documentation": "<doc>\n<summary>\nThe camera is showing the active vessel, in \"auto\" mode.\n</summary>\n</doc>"
          },
          {
            "name": "Free",
            "value": 1,
            "documentation": "<doc>\n<summary>\nThe camera is showing the active vessel, in \"free\" mode.\n</summary>\n</doc>"
          },
          {
            "name": "Chase",
            "value": 2,
            "documentation": "<doc>\n<summary>\nThe camera is showing the active vessel, in \"chase\" mode.\n</summary>\n</doc>"
          },
          {
            "name": "Locked",
            "value": 3,
            "documentation": "<doc>\n<summary>\nThe camera is showing the active vessel, in \"locked\" mode.\n</summary>\n</doc>"
          },
          {
            "name": "Orbital",
            "value": 4,
            "documentation": "<doc>\n<summary>\nThe camera is showing the active vessel, in \"orbital\" mode.\n</summary>\n</doc>"
          },
          {
            "name": "IVA",
            "value": 5,
            "documentation": "<doc>\n<summary>\nThe Intra-Vehicular Activity view is being shown.\n</summary>\n</doc>"
          },
          {
            "name": "Map",
            "value": 6,
            "documentation": "<doc>\n<summary>\nThe map view is being shown.\n</summary>\n</doc>"
          }
        ]
      },
      "CargoBayState": {
        "documentation": "<doc>\n<summary>\nThe state of a cargo bay. See <see cref=\"M:SpaceCenter.CargoBay.State\" />.\n</summary>\n</doc>",
        "values": [
          {
            "name": "Open",
            "value": 0,
            "documentation": "<doc>\n<summary>\nCargo bay is fully open.\n</summary>\n</doc>"
          },
          {
            "name": "Closed",
            "value": 1,
            "documentation": "<doc>\n<summary>\nCargo bay closed and locked.\n</summary>\n</doc>"
          },
          {
            "name": "Opening",
            "value": 2,
            "documentation": "<doc>\n<summary>\nCargo bay is opening.\n</summary>\n</doc>"
          },
          {
            "name": "Closing",
            "value": 3,
            "documentation": "<doc>\n<summary>\nCargo bay is closing.\n</summary>\n</doc>"
          }
        ]
      },
      "DockingPortState": {
        "documentation": "<doc>\n<summary>\nThe state of a docking port. See <see cref=\"M:SpaceCenter.DockingPort.State\" />.\n</summary>\n</doc>",
        "values": [
          {
            "name": "Ready",
            "value": 0,
            "documentation": "<doc>\n<summary>\nThe docking port is ready to dock to another docking port.\n</summary>\n</doc>"
          },
          {
            "name": "Docked",
            "value": 1,
            "documentation": "<doc>\n<summary>\nThe docking port is docked to another docking port, or docked to\nanother part (from the VAB/SPH).\n</summary>\n</doc>"
          },
          {
            "name": "Docking",
            "value": 2,
            "documentation": "<doc>\n<summary>\nThe docking port is very close to another docking port,\nbut has not docked. It is using magnetic force to acquire a solid dock.\n</summary>\n</doc>"
          },
          {
            "name": "Undocking",
            "value": 3,
            "documentation": "<doc>\n<summary>\nThe docking port has just been undocked from another docking port,\nand is disabled until it moves away by a sufficient distance\n(<see cref=\"M:SpaceCenter.DockingPort.ReengageDistance\" />).\n</summary>\n</doc>"
          },
          {
            "name": "Shielded",
            "value": 4,
            "documentation": "<doc>\n<summary>\nThe docking port has a shield, and the shield is closed.\n</summary>\n</doc>"
          },
          {
            "name": "Moving",
            "value": 5,
            "documentation": "<doc>\n<summary>\nThe docking ports shield is currently opening/closing.\n</summary>\n</doc>"
          }
        ]
      },
      "LandingGearState": {
        "documentation": "<doc>\n<summary>\nThe state of a landing gear. See <see cref=\"M:SpaceCenter.LandingGear.State\" />.\n</summary>\n</doc>",
        "values": [
          {
            "name": "Deployed",
            "value": 0,
            "documentation": "<doc>\n<summary>\nLanding gear is fully deployed.\n</summary>\n</doc>"
          },
          {
            "name": "Retracted",
            "value": 1,
            "documentation": "<doc>\n<summary>\nLanding gear is fully retracted.\n</summary>\n</doc>"
          },
          {
            "name": "Deploying",
            "value": 2,
            "documentation": "<doc>\n<summary>\nLanding gear is being deployed.\n</summary>\n</doc>"
          },
          {
            "name": "Retracting",
            "value": 3,
            "documentation": "<doc>\n<summary>\nLanding gear is being retracted.\n</summary>\n</doc>"
          },
          {
            "name": "Broken",
            "value": 4,
            "documentation": "<doc>\n<summary>\nLanding gear is broken.\n</summary>\n</doc>"
          }
        ]
      },
      "LandingLegState": {
        "documentation": "<doc>\n<summary>\nThe state of a landing leg. See <see cref=\"M:SpaceCenter.LandingLeg.State\" />.\n</summary>\n</doc>",
        "values": [
          {
            "name": "Deployed",
            "value": 0,
            "documentation": "<doc>\n<summary>\nLanding leg is fully deployed.\n</summary>\n</doc>"
          },
          {
            "name": "Retracted",
            "value": 1,
            "documentation": "<doc>\n<summary>\nLanding leg is fully retracted.\n</summary>\n</doc>"
          },
          {
            "name": "Deploying",
            "value": 2,
            "documentation": "<doc>\n<summary>\nLanding leg is being deployed.\n</summary>\n</doc>"
          },
          {
            "name": "Retracting",
            "value": 3,
            "documentation": "<doc>\n<summary>\nLanding leg is being retracted.\n</summary>\n</doc>"
          },
          {
            "name": "Broken",
            "value": 4,
            "documentation": "<doc>\n<summary>\nLanding leg is broken.\n</summary>\n</doc>"
          }
        ]
      },
      "ParachuteState": {
        "documentation": "<doc>\n<summary>\nThe state of a parachute. See <see cref=\"M:SpaceCenter.Parachute.State\" />.\n</summary>\n</doc>",
        "values": [
          {
            "name": "Active",
            "value": 0,
            "documentation": "<doc>\n<summary>\nThe parachute is still stowed, but ready to semi-deploy.\n</summary>\n</doc>"
          },
          {
            "name": "Cut",
            "value": 1,
            "documentation": "<doc>\n<summary>\nThe parachute has been cut.\n</summary>\n</doc>"
          },
          {
            "name": "Deployed",
            "value": 2,
            "documentation": "<doc>\n<summary>\nThe parachute is fully deployed.\n</summary>\n</doc>"
          },
          {
            "name": "SemiDeployed",
            "value": 3,
            "documentation": "<doc>\n<summary>\nThe parachute has been deployed and is providing some drag,\nbut is not fully deployed yet.\n</summary>\n</doc>"
          },
          {
            "name": "Stowed",
            "value": 4,
            "documentation": "<doc>\n<summary>\nThe parachute is safely tucked away inside its housing.\n</summary>\n</doc>"
          }
        ]
      },
      "RadiatorState": {
        "documentation": "<doc>\n<summary>\nThe state of a radiator. <see cref=\"T:SpaceCenter.RadiatorState\" /></summary>\n</doc>",
        "values": [
          {
            "name": "Extended",
            "value": 0,
            "documentation": "<doc>\n<summary>\nRadiator is fully extended.\n</summary>\n</doc>"
          },
          {
            "name": "Retracted",
            "value": 1,
            "documentation": "<doc>\n<summary>\nRadiator is fully retracted.\n</summary>\n</doc>"
          },
          {
            "name": "Extending",
            "value": 2,
            "documentation": "<doc>\n<summary>\nRadiator is being extended.\n</summary>\n</doc>"
          },
          {
            "name": "Retracting",
            "value": 3,
            "documentation": "<doc>\n<summary>\nRadiator is being retracted.\n</summary>\n</doc>"
          },
          {
            "name": "Broken",
            "value": 4,
            "documentation": "<doc>\n<summary>\nRadiator is being broken.\n</summary>\n</doc>"
          }
        ]
      },
      "ResourceConverterState": {
        "documentation": "<doc>\n<summary>\nThe state of a resource converter. See <see cref=\"M:SpaceCenter.ResourceConverter.State\" />.\n</summary>\n</doc>",
        "values": [
          {
            "name": "Running",
            "value": 0,
            "documentation": "<doc>\n<summary>\nConverter is running.\n</summary>\n</doc>"
          },
          {
            "name": "Idle",
            "value": 1,
            "documentation": "<doc>\n<summary>\nConverter is idle.\n</summary>\n</doc>"
          },
          {
            "name": "MissingResource",
            "value": 2,
            "documentation": "<doc>\n<summary>\nConverter is missing a required resource.\n</summary>\n</doc>"
          },
          {
            "name": "StorageFull",
            "value": 3,
            "documentation": "<doc>\n<summary>\nNo available storage for output resource.\n</summary>\n</doc>"
          },
          {
            "name": "Capacity",
            "value": 4,
            "documentation": "<doc>\n<summary>\nAt preset resource capacity.\n</summary>\n</doc>"
          },
          {
            "name": "Unknown",
            "value": 5,
            "documentation": "<doc>\n<summary>\nUnknown state. Possible with modified resource converters.\nIn this case, check <see cref=\"M:SpaceCenter.ResourceConverter.StatusInfo\" /> for more information.\n</summary>\n</doc>"
          }
        ]
      },
      "ResourceHarvesterState": {
        "documentation": "<doc>\n<summary>\nThe state of a resource harvester. See <see cref=\"M:SpaceCenter.ResourceHarvester.State\" />.\n</summary>\n</doc>",
        "values": [
          {
            "name": "Deploying",
            "value": 0,
            "documentation": "<doc>\n<summary>\nThe drill is deploying.\n</summary>\n</doc>"
          },
          {
            "name": "Deployed",
            "value": 1,
            "documentation": "<doc>\n<summary>\nThe drill is deployed and ready.\n</summary>\n</doc>"
          },
          {
            "name": "Retracting",
            "value": 2,
            "documentation": "<doc>\n<summary>\nThe drill is retracting.\n</summary>\n</doc>"
          },
          {
            "name": "Retracted",
            "value": 3,
            "documentation": "<doc>\n<summary>\nThe drill is retracted.\n</summary>\n</doc>"
          },
          {
            "name": "Active",
            "value": 4,
            "documentation": "<doc>\n<summary>\nThe drill is running.\n</summary>\n</doc>"
          }
        ]
      },
      "SolarPanelState": {
        "documentation": "<doc>\n<summary>\nThe state of a solar panel. See <see cref=\"M:SpaceCenter.SolarPanel.State\" />.\n</summary>\n</doc>",
        "values": [
          {
            "name": "Extended",
            "value": 0,
            "documentation": "<doc>\n<summary>\nSolar panel is fully extended.\n</summary>\n</doc>"
          },
          {
            "name": "Retracted",
            "value": 1,
            "documentation": "<doc>\n<summary>\nSolar panel is fully retracted.\n</summary>\n</doc>"
          },
          {
            "name": "Extending",
            "value": 2,
            "documentation": "<doc>\n<summary>\nSolar panel is being extended.\n</summary>\n</doc>"
          },
          {
            "name": "Retracting",
            "value": 3,
            "documentation": "<doc>\n<summary>\nSolar panel is being retracted.\n</summary>\n</doc>"
          },
          {
            "name": "Broken",
            "value": 4,
            "documentation": "<doc>\n<summary>\nSolar panel is broken.\n</summary>\n</doc>"
          }
        ]
      },
      "ResourceFlowMode": {
        "documentation": "<doc>\n<summary>\nThe way in which a resource flows between parts. See <see cref=\"M:SpaceCenter.Resources.FlowMode\" />.\n</summary>\n</doc>",
        "values": [
          {
            "name": "Vessel",
            "value": 0,
            "documentation": "<doc>\n<summary>\nThe resource flows to any part in the vessel. For example, electric charge.\n</summary>\n</doc>"
          },
          {
            "name": "Stage",
            "value": 1,
            "documentation": "<doc>\n<summary>\nThe resource flows from parts in the first stage, followed by the second,\nand so on. For example, mono-propellant.\n</summary>\n</doc>"
          },
          {
            "name": "Adjacent",
            "value": 2,
            "documentation": "<doc>\n<summary>\nThe resource flows between adjacent parts within the vessel. For example,\nliquid fuel or oxidizer.\n</summary>\n</doc>"
          },
          {
            "name": "None",
            "value": 3,
            "documentation": "<doc>\n<summary>\nThe resource does not flow. For example, solid fuel.\n</summary>\n</doc>"
          }
        ]
      },
      "SASMode": {
        "documentation": "<doc>\n<summary>\nThe behavior of the SAS auto-pilot. See <see cref=\"M:SpaceCenter.AutoPilot.SASMode\" />.\n</summary>\n</doc>",
        "values": [
          {
            "name": "StabilityAssist",
            "value": 0,
            "documentation": "<doc>\n<summary>\nStability assist mode. Dampen out any rotation.\n</summary>\n</doc>"
          },
          {
            "name": "Maneuver",
            "value": 1,
            "documentation": "<doc>\n<summary>\nPoint in the burn direction of the next maneuver node.\n</summary>\n</doc>"
          },
          {
            "name": "Prograde",
            "value": 2,
            "documentation": "<doc>\n<summary>\nPoint in the prograde direction.\n</summary>\n</doc>"
          },
          {
            "name": "Retrograde",
            "value": 3,
            "documentation": "<doc>\n<summary>\nPoint in the retrograde direction.\n</summary>\n</doc>"
          },
          {
            "name": "Normal",
            "value": 4,
            "documentation": "<doc>\n<summary>\nPoint in the orbit normal direction.\n</summary>\n</doc>"
          },
          {
            "name": "AntiNormal",
            "value": 5,
            "documentation": "<doc>\n<summary>\nPoint in the orbit anti-normal direction.\n</summary>\n</doc>"
          },
          {
            "name": "Radial",
            "value": 6,
            "documentation": "<doc>\n<summary>\nPoint in the orbit radial direction.\n</summary>\n</doc>"
          },
          {
            "name": "AntiRadial",
            "value": 7,
            "documentation": "<doc>\n<summary>\nPoint in the orbit anti-radial direction.\n</summary>\n</doc>"
          },
          {
            "name": "Target",
            "value": 8,
            "documentation": "<doc>\n<summary>\nPoint in the direction of the current target.\n</summary>\n</doc>"
          },
          {
            "name": "AntiTarget",
            "value": 9,
            "documentation": "<doc>\n<summary>\nPoint away from the current target.\n</summary>\n</doc>"
          }
        ]
      },
      "SpeedMode": {
        "documentation": "<doc>\n<summary>\nThe mode of the speed reported in the navball.\nSee <see cref=\"M:SpaceCenter.Control.SpeedMode\" />.\n</summary>\n</doc>",
        "values": [
          {
            "name": "Orbit",
            "value": 0,
            "documentation": "<doc>\n<summary>\nSpeed is relative to the vessel's orbit.\n</summary>\n</doc>"
          },
          {
            "name": "Surface",
            "value": 1,
            "documentation": "<doc>\n<summary>\nSpeed is relative to the surface of the body being orbited.\n</summary>\n</doc>"
          },
          {
            "name": "Target",
            "value": 2,
            "documentation": "<doc>\n<summary>\nSpeed is relative to the current target.\n</summary>\n</doc>"
          }
        ]
      },
      "VesselSituation": {
        "documentation": "<doc>\n<summary>\nThe situation a vessel is in.\nSee <see cref=\"M:SpaceCenter.Vessel.Situation\" />.\n</summary>\n</doc>",
        "values": [
          {
            "name": "PreLaunch",
            "value": 0,
            "documentation": "<doc>\n<summary>\nVessel is awaiting launch.\n</summary>\n</doc>"
          },
          {
            "name": "Orbiting",
            "value": 1,
            "documentation": "<doc>\n<summary>\nVessel is orbiting a body.\n</summary>\n</doc>"
          },
          {
            "name": "SubOrbital",
            "value": 2,
            "documentation": "<doc>\n<summary>\nVessel is on a sub-orbital trajectory.\n</summary>\n</doc>"
          },
          {
            "name": "Escaping",
            "value": 3,
            "documentation": "<doc>\n<summary>\nEscaping.\n</summary>\n</doc>"
          },
          {
            "name": "Flying",
            "value": 4,
            "documentation": "<doc>\n<summary>\nVessel is flying through an atmosphere.\n</summary>\n</doc>"
          },
          {
            "name": "Landed",
            "value": 5,
            "documentation": "<doc>\n<summary>\nVessel is landed on the surface of a body.\n</summary>\n</doc>"
          },
          {
            "name": "Splashed",
            "value": 6,
            "documentation": "<doc>\n<summary>\nVessel has splashed down in an ocean.\n</summary>\n</doc>"
          },
          {
            "name": "Docked",
            "value": 7,
            "documentation": "<doc>\n<summary>\nVessel is docked to another.\n</summary>\n</doc>"
          }
        ]
      },
      "VesselType": {
        "documentation": "<doc>\n<summary>\nThe type of a vessel.\nSee <see cref=\"M:SpaceCenter.Vessel.Type\" />.\n</summary>\n</doc>",
        "values": [
          {
            "name": "Ship",
            "value": 0,
            "documentation": "<doc>\n<summary>\nShip.\n</summary>\n</doc>"
          },
          {
            "name": "Station",
            "value": 1,
            "documentation": "<doc>\n<summary>\nStation.\n</summary>\n</doc>"
          },
          {
            "name": "Lander",
            "value": 2,
            "documentation": "<doc>\n<summary>\nLander.\n</summary>\n</doc>"
          },
          {
            "name": "Probe",
            "value": 3,
            "documentation": "<doc>\n<summary>\nProbe.\n</summary>\n</doc>"
          },
          {
            "name": "Rover",
            "value": 4,
            "documentation": "<doc>\n<summary>\nRover.\n</summary>\n</doc>"
          },
          {
            "name": "Base",
            "value": 5,
            "documentation": "<doc>\n<summary>\nBase.\n</summary>\n</doc>"
          },
          {
            "name": "Debris",
            "value": 6,
            "documentation": "<doc>\n<summary>\nDebris.\n</summary>\n</doc>"
          }
        ]
      },
      "WarpMode": {
        "documentation": "<doc>\n<summary>\nThe time warp mode.\nReturned by <see cref=\"T:SpaceCenter.WarpMode\" /></summary>\n</doc>",
        "values": [
          {
            "name": "Rails",
            "value": 0,
            "documentation": "<doc>\n<summary>\nTime warp is active, and in regular \"on-rails\" mode.\n</summary>\n</doc>"
          },
          {
            "name": "Physics",
            "value": 1,
            "documentation": "<doc>\n<summary>\nTime warp is active, and in physical time warp mode.\n</summary>\n</doc>"
          },
          {
            "name": "None",
            "value": 2,
            "documentation": "<doc>\n<summary>\nTime warp is not active.\n</summary>\n</doc>"
          }
        ]
      }
    }
  }
}