// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/krpc.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace KRPC.Schema.KRPC {

  /// <summary>Holder for reflection information generated from protobuf/krpc.proto</summary>
  public static partial class KrpcReflection {

    #region Descriptor
    /// <summary>File descriptor for protobuf/krpc.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static KrpcReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNwcm90b2J1Zi9rcnBjLnByb3RvEgtrcnBjLnNjaGVtYSJXCgdSZXF1ZXN0",
            "Eg8KB3NlcnZpY2UYASABKAkSEQoJcHJvY2VkdXJlGAIgASgJEigKCWFyZ3Vt",
            "ZW50cxgDIAMoCzIVLmtycGMuc2NoZW1hLkFyZ3VtZW50IisKCEFyZ3VtZW50",
            "EhAKCHBvc2l0aW9uGAEgASgNEg0KBXZhbHVlGAIgASgMImoKCFJlc3BvbnNl",
            "EgwKBHRpbWUYASABKAESEQoJaGFzX2Vycm9yGAIgASgIEg0KBWVycm9yGAMg",
            "ASgJEhgKEGhhc19yZXR1cm5fdmFsdWUYBCABKAgSFAoMcmV0dXJuX3ZhbHVl",
            "GAUgASgMIj8KDVN0cmVhbU1lc3NhZ2USLgoJcmVzcG9uc2VzGAEgAygLMhsu",
            "a3JwYy5zY2hlbWEuU3RyZWFtUmVzcG9uc2UiRQoOU3RyZWFtUmVzcG9uc2US",
            "CgoCaWQYASABKA0SJwoIcmVzcG9uc2UYAiABKAsyFS5rcnBjLnNjaGVtYS5S",
            "ZXNwb25zZSIyCghTZXJ2aWNlcxImCghzZXJ2aWNlcxgBIAMoCzIULmtycGMu",
            "c2NoZW1hLlNlcnZpY2UirwEKB1NlcnZpY2USDAoEbmFtZRgBIAEoCRIqCgpw",
            "cm9jZWR1cmVzGAIgAygLMhYua3JwYy5zY2hlbWEuUHJvY2VkdXJlEiMKB2Ns",
            "YXNzZXMYAyADKAsyEi5rcnBjLnNjaGVtYS5DbGFzcxIuCgxlbnVtZXJhdGlv",
            "bnMYBCADKAsyGC5rcnBjLnNjaGVtYS5FbnVtZXJhdGlvbhIVCg1kb2N1bWVu",
            "dGF0aW9uGAUgASgJIp4BCglQcm9jZWR1cmUSDAoEbmFtZRgBIAEoCRIqCgpw",
            "YXJhbWV0ZXJzGAIgAygLMhYua3JwYy5zY2hlbWEuUGFyYW1ldGVyEhcKD2hh",
            "c19yZXR1cm5fdHlwZRgDIAEoCBITCgtyZXR1cm5fdHlwZRgEIAEoCRISCgph",
            "dHRyaWJ1dGVzGAUgAygJEhUKDWRvY3VtZW50YXRpb24YBiABKAkiWQoJUGFy",
            "YW1ldGVyEgwKBG5hbWUYASABKAkSDAoEdHlwZRgCIAEoCRIZChFoYXNfZGVm",
            "YXVsdF92YWx1ZRgDIAEoCBIVCg1kZWZhdWx0X3ZhbHVlGAQgASgMIiwKBUNs",
            "YXNzEgwKBG5hbWUYASABKAkSFQoNZG9jdW1lbnRhdGlvbhgCIAEoCSJhCgtF",
            "bnVtZXJhdGlvbhIMCgRuYW1lGAEgASgJEi0KBnZhbHVlcxgCIAMoCzIdLmty",
            "cGMuc2NoZW1hLkVudW1lcmF0aW9uVmFsdWUSFQoNZG9jdW1lbnRhdGlvbhgD",
            "IAEoCSJGChBFbnVtZXJhdGlvblZhbHVlEgwKBG5hbWUYASABKAkSDQoFdmFs",
            "dWUYAiABKAUSFQoNZG9jdW1lbnRhdGlvbhgDIAEoCSIVCgRMaXN0Eg0KBWl0",
            "ZW1zGAEgAygMIjsKCkRpY3Rpb25hcnkSLQoHZW50cmllcxgBIAMoCzIcLmty",
            "cGMuc2NoZW1hLkRpY3Rpb25hcnlFbnRyeSItCg9EaWN0aW9uYXJ5RW50cnkS",
            "CwoDa2V5GAEgASgMEg0KBXZhbHVlGAIgASgMIhQKA1NldBINCgVpdGVtcxgB",
            "IAMoDCIWCgVUdXBsZRINCgVpdGVtcxgBIAMoDCL0AwoGU3RhdHVzEg8KB3Zl",
            "cnNpb24YASABKAkSEgoKYnl0ZXNfcmVhZBgCIAEoBBIVCg1ieXRlc193cml0",
            "dGVuGAMgASgEEhcKD2J5dGVzX3JlYWRfcmF0ZRgEIAEoAhIaChJieXRlc193",
            "cml0dGVuX3JhdGUYBSABKAISFQoNcnBjc19leGVjdXRlZBgGIAEoBBIQCghy",
            "cGNfcmF0ZRgHIAEoAhIaChJvbmVfcnBjX3Blcl91cGRhdGUYCCABKAgSGwoT",
            "bWF4X3RpbWVfcGVyX3VwZGF0ZRgJIAEoDRIdChVhZGFwdGl2ZV9yYXRlX2Nv",
            "bnRyb2wYCiABKAgSFQoNYmxvY2tpbmdfcmVjdhgLIAEoCBIUCgxyZWN2X3Rp",
            "bWVvdXQYDCABKA0SGwoTdGltZV9wZXJfcnBjX3VwZGF0ZRgNIAEoAhIgChhw",
            "b2xsX3RpbWVfcGVyX3JwY191cGRhdGUYDiABKAISIAoYZXhlY190aW1lX3Bl",
            "cl9ycGNfdXBkYXRlGA8gASgCEhMKC3N0cmVhbV9ycGNzGBAgASgNEhwKFHN0",
            "cmVhbV9ycGNzX2V4ZWN1dGVkGBEgASgEEhcKD3N0cmVhbV9ycGNfcmF0ZRgS",
            "IAEoAhIeChZ0aW1lX3Blcl9zdHJlYW1fdXBkYXRlGBMgASgCQiYKC2tycGMu",
            "c2NoZW1hQgRLUlBDqgIQS1JQQy5TY2hlbWEuS1JQQ2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.Request), global::KRPC.Schema.KRPC.Request.Parser, new[]{ "Service", "Procedure", "Arguments" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.Argument), global::KRPC.Schema.KRPC.Argument.Parser, new[]{ "Position", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.Response), global::KRPC.Schema.KRPC.Response.Parser, new[]{ "Time", "HasError", "Error", "HasReturnValue", "ReturnValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.StreamMessage), global::KRPC.Schema.KRPC.StreamMessage.Parser, new[]{ "Responses" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.StreamResponse), global::KRPC.Schema.KRPC.StreamResponse.Parser, new[]{ "Id", "Response" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.Services), global::KRPC.Schema.KRPC.Services.Parser, new[]{ "Services_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.Service), global::KRPC.Schema.KRPC.Service.Parser, new[]{ "Name", "Procedures", "Classes", "Enumerations", "Documentation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.Procedure), global::KRPC.Schema.KRPC.Procedure.Parser, new[]{ "Name", "Parameters", "HasReturnType", "ReturnType", "Attributes", "Documentation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.Parameter), global::KRPC.Schema.KRPC.Parameter.Parser, new[]{ "Name", "Type", "HasDefaultValue", "DefaultValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.Class), global::KRPC.Schema.KRPC.Class.Parser, new[]{ "Name", "Documentation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.Enumeration), global::KRPC.Schema.KRPC.Enumeration.Parser, new[]{ "Name", "Values", "Documentation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.EnumerationValue), global::KRPC.Schema.KRPC.EnumerationValue.Parser, new[]{ "Name", "Value", "Documentation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.List), global::KRPC.Schema.KRPC.List.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.Dictionary), global::KRPC.Schema.KRPC.Dictionary.Parser, new[]{ "Entries" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.DictionaryEntry), global::KRPC.Schema.KRPC.DictionaryEntry.Parser, new[]{ "Key", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.Set), global::KRPC.Schema.KRPC.Set.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.Tuple), global::KRPC.Schema.KRPC.Tuple.Parser, new[]{ "Items" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::KRPC.Schema.KRPC.Status), global::KRPC.Schema.KRPC.Status.Parser, new[]{ "Version", "BytesRead", "BytesWritten", "BytesReadRate", "BytesWrittenRate", "RpcsExecuted", "RpcRate", "OneRpcPerUpdate", "MaxTimePerUpdate", "AdaptiveRateControl", "BlockingRecv", "RecvTimeout", "TimePerRpcUpdate", "PollTimePerRpcUpdate", "ExecTimePerRpcUpdate", "StreamRpcs", "StreamRpcsExecuted", "StreamRpcRate", "TimePerStreamUpdate" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Request : pb::IMessage<Request> {
    private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request(Request other) : this() {
      service_ = other.service_;
      procedure_ = other.procedure_;
      arguments_ = other.arguments_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request Clone() {
      return new Request(this);
    }

    /// <summary>Field number for the "service" field.</summary>
    public const int ServiceFieldNumber = 1;
    private string service_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Service {
      get { return service_; }
      set {
        service_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "procedure" field.</summary>
    public const int ProcedureFieldNumber = 2;
    private string procedure_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Procedure {
      get { return procedure_; }
      set {
        procedure_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "arguments" field.</summary>
    public const int ArgumentsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::KRPC.Schema.KRPC.Argument> _repeated_arguments_codec
        = pb::FieldCodec.ForMessage(26, global::KRPC.Schema.KRPC.Argument.Parser);
    private readonly pbc::RepeatedField<global::KRPC.Schema.KRPC.Argument> arguments_ = new pbc::RepeatedField<global::KRPC.Schema.KRPC.Argument>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KRPC.Schema.KRPC.Argument> Arguments {
      get { return arguments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Service != other.Service) return false;
      if (Procedure != other.Procedure) return false;
      if(!arguments_.Equals(other.arguments_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Service.Length != 0) hash ^= Service.GetHashCode();
      if (Procedure.Length != 0) hash ^= Procedure.GetHashCode();
      hash ^= arguments_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Service.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Service);
      }
      if (Procedure.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Procedure);
      }
      arguments_.WriteTo(output, _repeated_arguments_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Service.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Service);
      }
      if (Procedure.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Procedure);
      }
      size += arguments_.CalculateSize(_repeated_arguments_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Request other) {
      if (other == null) {
        return;
      }
      if (other.Service.Length != 0) {
        Service = other.Service;
      }
      if (other.Procedure.Length != 0) {
        Procedure = other.Procedure;
      }
      arguments_.Add(other.arguments_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Service = input.ReadString();
            break;
          }
          case 18: {
            Procedure = input.ReadString();
            break;
          }
          case 26: {
            arguments_.AddEntriesFrom(input, _repeated_arguments_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Argument : pb::IMessage<Argument> {
    private static readonly pb::MessageParser<Argument> _parser = new pb::MessageParser<Argument>(() => new Argument());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Argument> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Argument() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Argument(Argument other) : this() {
      position_ = other.position_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Argument Clone() {
      return new Argument(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private uint position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private pb::ByteString value_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Argument);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Argument other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Position != other.Position) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Position != 0) hash ^= Position.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Position != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Position);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Position);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Argument other) {
      if (other == null) {
        return;
      }
      if (other.Position != 0) {
        Position = other.Position;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Position = input.ReadUInt32();
            break;
          }
          case 18: {
            Value = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Response : pb::IMessage<Response> {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response(Response other) : this() {
      time_ = other.time_;
      hasError_ = other.hasError_;
      error_ = other.error_;
      hasReturnValue_ = other.hasReturnValue_;
      returnValue_ = other.returnValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response Clone() {
      return new Response(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private double time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "has_error" field.</summary>
    public const int HasErrorFieldNumber = 2;
    private bool hasError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasError {
      get { return hasError_; }
      set {
        hasError_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 3;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "has_return_value" field.</summary>
    public const int HasReturnValueFieldNumber = 4;
    private bool hasReturnValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReturnValue {
      get { return hasReturnValue_; }
      set {
        hasReturnValue_ = value;
      }
    }

    /// <summary>Field number for the "return_value" field.</summary>
    public const int ReturnValueFieldNumber = 5;
    private pb::ByteString returnValue_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ReturnValue {
      get { return returnValue_; }
      set {
        returnValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      if (HasError != other.HasError) return false;
      if (Error != other.Error) return false;
      if (HasReturnValue != other.HasReturnValue) return false;
      if (ReturnValue != other.ReturnValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0D) hash ^= Time.GetHashCode();
      if (HasError != false) hash ^= HasError.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (HasReturnValue != false) hash ^= HasReturnValue.GetHashCode();
      if (ReturnValue.Length != 0) hash ^= ReturnValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Time);
      }
      if (HasError != false) {
        output.WriteRawTag(16);
        output.WriteBool(HasError);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Error);
      }
      if (HasReturnValue != false) {
        output.WriteRawTag(32);
        output.WriteBool(HasReturnValue);
      }
      if (ReturnValue.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(ReturnValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0D) {
        size += 1 + 8;
      }
      if (HasError != false) {
        size += 1 + 1;
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (HasReturnValue != false) {
        size += 1 + 1;
      }
      if (ReturnValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ReturnValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0D) {
        Time = other.Time;
      }
      if (other.HasError != false) {
        HasError = other.HasError;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      if (other.HasReturnValue != false) {
        HasReturnValue = other.HasReturnValue;
      }
      if (other.ReturnValue.Length != 0) {
        ReturnValue = other.ReturnValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Time = input.ReadDouble();
            break;
          }
          case 16: {
            HasError = input.ReadBool();
            break;
          }
          case 26: {
            Error = input.ReadString();
            break;
          }
          case 32: {
            HasReturnValue = input.ReadBool();
            break;
          }
          case 42: {
            ReturnValue = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StreamMessage : pb::IMessage<StreamMessage> {
    private static readonly pb::MessageParser<StreamMessage> _parser = new pb::MessageParser<StreamMessage>(() => new StreamMessage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamMessage(StreamMessage other) : this() {
      responses_ = other.responses_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamMessage Clone() {
      return new StreamMessage(this);
    }

    /// <summary>Field number for the "responses" field.</summary>
    public const int ResponsesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::KRPC.Schema.KRPC.StreamResponse> _repeated_responses_codec
        = pb::FieldCodec.ForMessage(10, global::KRPC.Schema.KRPC.StreamResponse.Parser);
    private readonly pbc::RepeatedField<global::KRPC.Schema.KRPC.StreamResponse> responses_ = new pbc::RepeatedField<global::KRPC.Schema.KRPC.StreamResponse>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KRPC.Schema.KRPC.StreamResponse> Responses {
      get { return responses_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!responses_.Equals(other.responses_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= responses_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      responses_.WriteTo(output, _repeated_responses_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += responses_.CalculateSize(_repeated_responses_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamMessage other) {
      if (other == null) {
        return;
      }
      responses_.Add(other.responses_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            responses_.AddEntriesFrom(input, _repeated_responses_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StreamResponse : pb::IMessage<StreamResponse> {
    private static readonly pb::MessageParser<StreamResponse> _parser = new pb::MessageParser<StreamResponse>(() => new StreamResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamResponse(StreamResponse other) : this() {
      id_ = other.id_;
      Response = other.response_ != null ? other.Response.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamResponse Clone() {
      return new StreamResponse(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 2;
    private global::KRPC.Schema.KRPC.Response response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::KRPC.Schema.KRPC.Response Response {
      get { return response_; }
      set {
        response_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Response, other.Response)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (response_ != null) hash ^= Response.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (response_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Response);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (response_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Response);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamResponse other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.response_ != null) {
        if (response_ == null) {
          response_ = new global::KRPC.Schema.KRPC.Response();
        }
        Response.MergeFrom(other.Response);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            if (response_ == null) {
              response_ = new global::KRPC.Schema.KRPC.Response();
            }
            input.ReadMessage(response_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Services : pb::IMessage<Services> {
    private static readonly pb::MessageParser<Services> _parser = new pb::MessageParser<Services>(() => new Services());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Services> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Services() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Services(Services other) : this() {
      services_ = other.services_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Services Clone() {
      return new Services(this);
    }

    /// <summary>Field number for the "services" field.</summary>
    public const int Services_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::KRPC.Schema.KRPC.Service> _repeated_services_codec
        = pb::FieldCodec.ForMessage(10, global::KRPC.Schema.KRPC.Service.Parser);
    private readonly pbc::RepeatedField<global::KRPC.Schema.KRPC.Service> services_ = new pbc::RepeatedField<global::KRPC.Schema.KRPC.Service>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KRPC.Schema.KRPC.Service> Services_ {
      get { return services_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Services);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Services other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!services_.Equals(other.services_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= services_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      services_.WriteTo(output, _repeated_services_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += services_.CalculateSize(_repeated_services_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Services other) {
      if (other == null) {
        return;
      }
      services_.Add(other.services_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            services_.AddEntriesFrom(input, _repeated_services_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Service : pb::IMessage<Service> {
    private static readonly pb::MessageParser<Service> _parser = new pb::MessageParser<Service>(() => new Service());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Service> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Service() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Service(Service other) : this() {
      name_ = other.name_;
      procedures_ = other.procedures_.Clone();
      classes_ = other.classes_.Clone();
      enumerations_ = other.enumerations_.Clone();
      documentation_ = other.documentation_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Service Clone() {
      return new Service(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "procedures" field.</summary>
    public const int ProceduresFieldNumber = 2;
    private static readonly pb::FieldCodec<global::KRPC.Schema.KRPC.Procedure> _repeated_procedures_codec
        = pb::FieldCodec.ForMessage(18, global::KRPC.Schema.KRPC.Procedure.Parser);
    private readonly pbc::RepeatedField<global::KRPC.Schema.KRPC.Procedure> procedures_ = new pbc::RepeatedField<global::KRPC.Schema.KRPC.Procedure>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KRPC.Schema.KRPC.Procedure> Procedures {
      get { return procedures_; }
    }

    /// <summary>Field number for the "classes" field.</summary>
    public const int ClassesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::KRPC.Schema.KRPC.Class> _repeated_classes_codec
        = pb::FieldCodec.ForMessage(26, global::KRPC.Schema.KRPC.Class.Parser);
    private readonly pbc::RepeatedField<global::KRPC.Schema.KRPC.Class> classes_ = new pbc::RepeatedField<global::KRPC.Schema.KRPC.Class>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KRPC.Schema.KRPC.Class> Classes {
      get { return classes_; }
    }

    /// <summary>Field number for the "enumerations" field.</summary>
    public const int EnumerationsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::KRPC.Schema.KRPC.Enumeration> _repeated_enumerations_codec
        = pb::FieldCodec.ForMessage(34, global::KRPC.Schema.KRPC.Enumeration.Parser);
    private readonly pbc::RepeatedField<global::KRPC.Schema.KRPC.Enumeration> enumerations_ = new pbc::RepeatedField<global::KRPC.Schema.KRPC.Enumeration>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KRPC.Schema.KRPC.Enumeration> Enumerations {
      get { return enumerations_; }
    }

    /// <summary>Field number for the "documentation" field.</summary>
    public const int DocumentationFieldNumber = 5;
    private string documentation_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Documentation {
      get { return documentation_; }
      set {
        documentation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Service);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Service other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!procedures_.Equals(other.procedures_)) return false;
      if(!classes_.Equals(other.classes_)) return false;
      if(!enumerations_.Equals(other.enumerations_)) return false;
      if (Documentation != other.Documentation) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= procedures_.GetHashCode();
      hash ^= classes_.GetHashCode();
      hash ^= enumerations_.GetHashCode();
      if (Documentation.Length != 0) hash ^= Documentation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      procedures_.WriteTo(output, _repeated_procedures_codec);
      classes_.WriteTo(output, _repeated_classes_codec);
      enumerations_.WriteTo(output, _repeated_enumerations_codec);
      if (Documentation.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Documentation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += procedures_.CalculateSize(_repeated_procedures_codec);
      size += classes_.CalculateSize(_repeated_classes_codec);
      size += enumerations_.CalculateSize(_repeated_enumerations_codec);
      if (Documentation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Documentation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Service other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      procedures_.Add(other.procedures_);
      classes_.Add(other.classes_);
      enumerations_.Add(other.enumerations_);
      if (other.Documentation.Length != 0) {
        Documentation = other.Documentation;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            procedures_.AddEntriesFrom(input, _repeated_procedures_codec);
            break;
          }
          case 26: {
            classes_.AddEntriesFrom(input, _repeated_classes_codec);
            break;
          }
          case 34: {
            enumerations_.AddEntriesFrom(input, _repeated_enumerations_codec);
            break;
          }
          case 42: {
            Documentation = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Procedure : pb::IMessage<Procedure> {
    private static readonly pb::MessageParser<Procedure> _parser = new pb::MessageParser<Procedure>(() => new Procedure());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Procedure> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Procedure() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Procedure(Procedure other) : this() {
      name_ = other.name_;
      parameters_ = other.parameters_.Clone();
      hasReturnType_ = other.hasReturnType_;
      returnType_ = other.returnType_;
      attributes_ = other.attributes_.Clone();
      documentation_ = other.documentation_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Procedure Clone() {
      return new Procedure(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parameters" field.</summary>
    public const int ParametersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::KRPC.Schema.KRPC.Parameter> _repeated_parameters_codec
        = pb::FieldCodec.ForMessage(18, global::KRPC.Schema.KRPC.Parameter.Parser);
    private readonly pbc::RepeatedField<global::KRPC.Schema.KRPC.Parameter> parameters_ = new pbc::RepeatedField<global::KRPC.Schema.KRPC.Parameter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KRPC.Schema.KRPC.Parameter> Parameters {
      get { return parameters_; }
    }

    /// <summary>Field number for the "has_return_type" field.</summary>
    public const int HasReturnTypeFieldNumber = 3;
    private bool hasReturnType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReturnType {
      get { return hasReturnType_; }
      set {
        hasReturnType_ = value;
      }
    }

    /// <summary>Field number for the "return_type" field.</summary>
    public const int ReturnTypeFieldNumber = 4;
    private string returnType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReturnType {
      get { return returnType_; }
      set {
        returnType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attributes" field.</summary>
    public const int AttributesFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_attributes_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> attributes_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Attributes {
      get { return attributes_; }
    }

    /// <summary>Field number for the "documentation" field.</summary>
    public const int DocumentationFieldNumber = 6;
    private string documentation_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Documentation {
      get { return documentation_; }
      set {
        documentation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Procedure);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Procedure other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!parameters_.Equals(other.parameters_)) return false;
      if (HasReturnType != other.HasReturnType) return false;
      if (ReturnType != other.ReturnType) return false;
      if(!attributes_.Equals(other.attributes_)) return false;
      if (Documentation != other.Documentation) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= parameters_.GetHashCode();
      if (HasReturnType != false) hash ^= HasReturnType.GetHashCode();
      if (ReturnType.Length != 0) hash ^= ReturnType.GetHashCode();
      hash ^= attributes_.GetHashCode();
      if (Documentation.Length != 0) hash ^= Documentation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      parameters_.WriteTo(output, _repeated_parameters_codec);
      if (HasReturnType != false) {
        output.WriteRawTag(24);
        output.WriteBool(HasReturnType);
      }
      if (ReturnType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ReturnType);
      }
      attributes_.WriteTo(output, _repeated_attributes_codec);
      if (Documentation.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Documentation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += parameters_.CalculateSize(_repeated_parameters_codec);
      if (HasReturnType != false) {
        size += 1 + 1;
      }
      if (ReturnType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReturnType);
      }
      size += attributes_.CalculateSize(_repeated_attributes_codec);
      if (Documentation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Documentation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Procedure other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      parameters_.Add(other.parameters_);
      if (other.HasReturnType != false) {
        HasReturnType = other.HasReturnType;
      }
      if (other.ReturnType.Length != 0) {
        ReturnType = other.ReturnType;
      }
      attributes_.Add(other.attributes_);
      if (other.Documentation.Length != 0) {
        Documentation = other.Documentation;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            parameters_.AddEntriesFrom(input, _repeated_parameters_codec);
            break;
          }
          case 24: {
            HasReturnType = input.ReadBool();
            break;
          }
          case 34: {
            ReturnType = input.ReadString();
            break;
          }
          case 42: {
            attributes_.AddEntriesFrom(input, _repeated_attributes_codec);
            break;
          }
          case 50: {
            Documentation = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Parameter : pb::IMessage<Parameter> {
    private static readonly pb::MessageParser<Parameter> _parser = new pb::MessageParser<Parameter>(() => new Parameter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Parameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parameter(Parameter other) : this() {
      name_ = other.name_;
      type_ = other.type_;
      hasDefaultValue_ = other.hasDefaultValue_;
      defaultValue_ = other.defaultValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Parameter Clone() {
      return new Parameter(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "has_default_value" field.</summary>
    public const int HasDefaultValueFieldNumber = 3;
    private bool hasDefaultValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDefaultValue {
      get { return hasDefaultValue_; }
      set {
        hasDefaultValue_ = value;
      }
    }

    /// <summary>Field number for the "default_value" field.</summary>
    public const int DefaultValueFieldNumber = 4;
    private pb::ByteString defaultValue_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DefaultValue {
      get { return defaultValue_; }
      set {
        defaultValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Parameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Parameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (HasDefaultValue != other.HasDefaultValue) return false;
      if (DefaultValue != other.DefaultValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (HasDefaultValue != false) hash ^= HasDefaultValue.GetHashCode();
      if (DefaultValue.Length != 0) hash ^= DefaultValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (HasDefaultValue != false) {
        output.WriteRawTag(24);
        output.WriteBool(HasDefaultValue);
      }
      if (DefaultValue.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(DefaultValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (HasDefaultValue != false) {
        size += 1 + 1;
      }
      if (DefaultValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DefaultValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Parameter other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.HasDefaultValue != false) {
        HasDefaultValue = other.HasDefaultValue;
      }
      if (other.DefaultValue.Length != 0) {
        DefaultValue = other.DefaultValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 24: {
            HasDefaultValue = input.ReadBool();
            break;
          }
          case 34: {
            DefaultValue = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Class : pb::IMessage<Class> {
    private static readonly pb::MessageParser<Class> _parser = new pb::MessageParser<Class>(() => new Class());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Class> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Class() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Class(Class other) : this() {
      name_ = other.name_;
      documentation_ = other.documentation_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Class Clone() {
      return new Class(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "documentation" field.</summary>
    public const int DocumentationFieldNumber = 2;
    private string documentation_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Documentation {
      get { return documentation_; }
      set {
        documentation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Class);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Class other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Documentation != other.Documentation) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Documentation.Length != 0) hash ^= Documentation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Documentation.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Documentation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Documentation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Documentation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Class other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Documentation.Length != 0) {
        Documentation = other.Documentation;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Documentation = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Enumeration : pb::IMessage<Enumeration> {
    private static readonly pb::MessageParser<Enumeration> _parser = new pb::MessageParser<Enumeration>(() => new Enumeration());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Enumeration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Enumeration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Enumeration(Enumeration other) : this() {
      name_ = other.name_;
      values_ = other.values_.Clone();
      documentation_ = other.documentation_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Enumeration Clone() {
      return new Enumeration(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::KRPC.Schema.KRPC.EnumerationValue> _repeated_values_codec
        = pb::FieldCodec.ForMessage(18, global::KRPC.Schema.KRPC.EnumerationValue.Parser);
    private readonly pbc::RepeatedField<global::KRPC.Schema.KRPC.EnumerationValue> values_ = new pbc::RepeatedField<global::KRPC.Schema.KRPC.EnumerationValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KRPC.Schema.KRPC.EnumerationValue> Values {
      get { return values_; }
    }

    /// <summary>Field number for the "documentation" field.</summary>
    public const int DocumentationFieldNumber = 3;
    private string documentation_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Documentation {
      get { return documentation_; }
      set {
        documentation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Enumeration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Enumeration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!values_.Equals(other.values_)) return false;
      if (Documentation != other.Documentation) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= values_.GetHashCode();
      if (Documentation.Length != 0) hash ^= Documentation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      values_.WriteTo(output, _repeated_values_codec);
      if (Documentation.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Documentation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += values_.CalculateSize(_repeated_values_codec);
      if (Documentation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Documentation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Enumeration other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      values_.Add(other.values_);
      if (other.Documentation.Length != 0) {
        Documentation = other.Documentation;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
          case 26: {
            Documentation = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnumerationValue : pb::IMessage<EnumerationValue> {
    private static readonly pb::MessageParser<EnumerationValue> _parser = new pb::MessageParser<EnumerationValue>(() => new EnumerationValue());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnumerationValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnumerationValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnumerationValue(EnumerationValue other) : this() {
      name_ = other.name_;
      value_ = other.value_;
      documentation_ = other.documentation_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnumerationValue Clone() {
      return new EnumerationValue(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "documentation" field.</summary>
    public const int DocumentationFieldNumber = 3;
    private string documentation_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Documentation {
      get { return documentation_; }
      set {
        documentation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnumerationValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnumerationValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Value != other.Value) return false;
      if (Documentation != other.Documentation) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (Documentation.Length != 0) hash ^= Documentation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (Documentation.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Documentation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (Documentation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Documentation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnumerationValue other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      if (other.Documentation.Length != 0) {
        Documentation = other.Documentation;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
          case 26: {
            Documentation = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class List : pb::IMessage<List> {
    private static readonly pb::MessageParser<List> _parser = new pb::MessageParser<List>(() => new List());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<List> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public List() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public List(List other) : this() {
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public List Clone() {
      return new List(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_items_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> items_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as List);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(List other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(List other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Dictionary : pb::IMessage<Dictionary> {
    private static readonly pb::MessageParser<Dictionary> _parser = new pb::MessageParser<Dictionary>(() => new Dictionary());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Dictionary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dictionary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dictionary(Dictionary other) : this() {
      entries_ = other.entries_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dictionary Clone() {
      return new Dictionary(this);
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::KRPC.Schema.KRPC.DictionaryEntry> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(10, global::KRPC.Schema.KRPC.DictionaryEntry.Parser);
    private readonly pbc::RepeatedField<global::KRPC.Schema.KRPC.DictionaryEntry> entries_ = new pbc::RepeatedField<global::KRPC.Schema.KRPC.DictionaryEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::KRPC.Schema.KRPC.DictionaryEntry> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Dictionary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Dictionary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entries_.Equals(other.entries_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entries_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entries_.WriteTo(output, _repeated_entries_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entries_.CalculateSize(_repeated_entries_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Dictionary other) {
      if (other == null) {
        return;
      }
      entries_.Add(other.entries_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DictionaryEntry : pb::IMessage<DictionaryEntry> {
    private static readonly pb::MessageParser<DictionaryEntry> _parser = new pb::MessageParser<DictionaryEntry>(() => new DictionaryEntry());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DictionaryEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DictionaryEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DictionaryEntry(DictionaryEntry other) : this() {
      key_ = other.key_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DictionaryEntry Clone() {
      return new DictionaryEntry(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private pb::ByteString key_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private pb::ByteString value_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DictionaryEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DictionaryEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DictionaryEntry other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadBytes();
            break;
          }
          case 18: {
            Value = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Set : pb::IMessage<Set> {
    private static readonly pb::MessageParser<Set> _parser = new pb::MessageParser<Set>(() => new Set());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Set> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Set() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Set(Set other) : this() {
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Set Clone() {
      return new Set(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_items_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> items_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Set);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Set other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Set other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Tuple : pb::IMessage<Tuple> {
    private static readonly pb::MessageParser<Tuple> _parser = new pb::MessageParser<Tuple>(() => new Tuple());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Tuple> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tuple() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tuple(Tuple other) : this() {
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tuple Clone() {
      return new Tuple(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_items_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> items_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Tuple);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Tuple other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Tuple other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Status : pb::IMessage<Status> {
    private static readonly pb::MessageParser<Status> _parser = new pb::MessageParser<Status>(() => new Status());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Status> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::KRPC.Schema.KRPC.KrpcReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status(Status other) : this() {
      version_ = other.version_;
      bytesRead_ = other.bytesRead_;
      bytesWritten_ = other.bytesWritten_;
      bytesReadRate_ = other.bytesReadRate_;
      bytesWrittenRate_ = other.bytesWrittenRate_;
      rpcsExecuted_ = other.rpcsExecuted_;
      rpcRate_ = other.rpcRate_;
      oneRpcPerUpdate_ = other.oneRpcPerUpdate_;
      maxTimePerUpdate_ = other.maxTimePerUpdate_;
      adaptiveRateControl_ = other.adaptiveRateControl_;
      blockingRecv_ = other.blockingRecv_;
      recvTimeout_ = other.recvTimeout_;
      timePerRpcUpdate_ = other.timePerRpcUpdate_;
      pollTimePerRpcUpdate_ = other.pollTimePerRpcUpdate_;
      execTimePerRpcUpdate_ = other.execTimePerRpcUpdate_;
      streamRpcs_ = other.streamRpcs_;
      streamRpcsExecuted_ = other.streamRpcsExecuted_;
      streamRpcRate_ = other.streamRpcRate_;
      timePerStreamUpdate_ = other.timePerStreamUpdate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status Clone() {
      return new Status(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bytes_read" field.</summary>
    public const int BytesReadFieldNumber = 2;
    private ulong bytesRead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BytesRead {
      get { return bytesRead_; }
      set {
        bytesRead_ = value;
      }
    }

    /// <summary>Field number for the "bytes_written" field.</summary>
    public const int BytesWrittenFieldNumber = 3;
    private ulong bytesWritten_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BytesWritten {
      get { return bytesWritten_; }
      set {
        bytesWritten_ = value;
      }
    }

    /// <summary>Field number for the "bytes_read_rate" field.</summary>
    public const int BytesReadRateFieldNumber = 4;
    private float bytesReadRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BytesReadRate {
      get { return bytesReadRate_; }
      set {
        bytesReadRate_ = value;
      }
    }

    /// <summary>Field number for the "bytes_written_rate" field.</summary>
    public const int BytesWrittenRateFieldNumber = 5;
    private float bytesWrittenRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BytesWrittenRate {
      get { return bytesWrittenRate_; }
      set {
        bytesWrittenRate_ = value;
      }
    }

    /// <summary>Field number for the "rpcs_executed" field.</summary>
    public const int RpcsExecutedFieldNumber = 6;
    private ulong rpcsExecuted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RpcsExecuted {
      get { return rpcsExecuted_; }
      set {
        rpcsExecuted_ = value;
      }
    }

    /// <summary>Field number for the "rpc_rate" field.</summary>
    public const int RpcRateFieldNumber = 7;
    private float rpcRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RpcRate {
      get { return rpcRate_; }
      set {
        rpcRate_ = value;
      }
    }

    /// <summary>Field number for the "one_rpc_per_update" field.</summary>
    public const int OneRpcPerUpdateFieldNumber = 8;
    private bool oneRpcPerUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OneRpcPerUpdate {
      get { return oneRpcPerUpdate_; }
      set {
        oneRpcPerUpdate_ = value;
      }
    }

    /// <summary>Field number for the "max_time_per_update" field.</summary>
    public const int MaxTimePerUpdateFieldNumber = 9;
    private uint maxTimePerUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxTimePerUpdate {
      get { return maxTimePerUpdate_; }
      set {
        maxTimePerUpdate_ = value;
      }
    }

    /// <summary>Field number for the "adaptive_rate_control" field.</summary>
    public const int AdaptiveRateControlFieldNumber = 10;
    private bool adaptiveRateControl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AdaptiveRateControl {
      get { return adaptiveRateControl_; }
      set {
        adaptiveRateControl_ = value;
      }
    }

    /// <summary>Field number for the "blocking_recv" field.</summary>
    public const int BlockingRecvFieldNumber = 11;
    private bool blockingRecv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BlockingRecv {
      get { return blockingRecv_; }
      set {
        blockingRecv_ = value;
      }
    }

    /// <summary>Field number for the "recv_timeout" field.</summary>
    public const int RecvTimeoutFieldNumber = 12;
    private uint recvTimeout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RecvTimeout {
      get { return recvTimeout_; }
      set {
        recvTimeout_ = value;
      }
    }

    /// <summary>Field number for the "time_per_rpc_update" field.</summary>
    public const int TimePerRpcUpdateFieldNumber = 13;
    private float timePerRpcUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TimePerRpcUpdate {
      get { return timePerRpcUpdate_; }
      set {
        timePerRpcUpdate_ = value;
      }
    }

    /// <summary>Field number for the "poll_time_per_rpc_update" field.</summary>
    public const int PollTimePerRpcUpdateFieldNumber = 14;
    private float pollTimePerRpcUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PollTimePerRpcUpdate {
      get { return pollTimePerRpcUpdate_; }
      set {
        pollTimePerRpcUpdate_ = value;
      }
    }

    /// <summary>Field number for the "exec_time_per_rpc_update" field.</summary>
    public const int ExecTimePerRpcUpdateFieldNumber = 15;
    private float execTimePerRpcUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ExecTimePerRpcUpdate {
      get { return execTimePerRpcUpdate_; }
      set {
        execTimePerRpcUpdate_ = value;
      }
    }

    /// <summary>Field number for the "stream_rpcs" field.</summary>
    public const int StreamRpcsFieldNumber = 16;
    private uint streamRpcs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StreamRpcs {
      get { return streamRpcs_; }
      set {
        streamRpcs_ = value;
      }
    }

    /// <summary>Field number for the "stream_rpcs_executed" field.</summary>
    public const int StreamRpcsExecutedFieldNumber = 17;
    private ulong streamRpcsExecuted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StreamRpcsExecuted {
      get { return streamRpcsExecuted_; }
      set {
        streamRpcsExecuted_ = value;
      }
    }

    /// <summary>Field number for the "stream_rpc_rate" field.</summary>
    public const int StreamRpcRateFieldNumber = 18;
    private float streamRpcRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StreamRpcRate {
      get { return streamRpcRate_; }
      set {
        streamRpcRate_ = value;
      }
    }

    /// <summary>Field number for the "time_per_stream_update" field.</summary>
    public const int TimePerStreamUpdateFieldNumber = 19;
    private float timePerStreamUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TimePerStreamUpdate {
      get { return timePerStreamUpdate_; }
      set {
        timePerStreamUpdate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Status);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Status other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (BytesRead != other.BytesRead) return false;
      if (BytesWritten != other.BytesWritten) return false;
      if (BytesReadRate != other.BytesReadRate) return false;
      if (BytesWrittenRate != other.BytesWrittenRate) return false;
      if (RpcsExecuted != other.RpcsExecuted) return false;
      if (RpcRate != other.RpcRate) return false;
      if (OneRpcPerUpdate != other.OneRpcPerUpdate) return false;
      if (MaxTimePerUpdate != other.MaxTimePerUpdate) return false;
      if (AdaptiveRateControl != other.AdaptiveRateControl) return false;
      if (BlockingRecv != other.BlockingRecv) return false;
      if (RecvTimeout != other.RecvTimeout) return false;
      if (TimePerRpcUpdate != other.TimePerRpcUpdate) return false;
      if (PollTimePerRpcUpdate != other.PollTimePerRpcUpdate) return false;
      if (ExecTimePerRpcUpdate != other.ExecTimePerRpcUpdate) return false;
      if (StreamRpcs != other.StreamRpcs) return false;
      if (StreamRpcsExecuted != other.StreamRpcsExecuted) return false;
      if (StreamRpcRate != other.StreamRpcRate) return false;
      if (TimePerStreamUpdate != other.TimePerStreamUpdate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (BytesRead != 0UL) hash ^= BytesRead.GetHashCode();
      if (BytesWritten != 0UL) hash ^= BytesWritten.GetHashCode();
      if (BytesReadRate != 0F) hash ^= BytesReadRate.GetHashCode();
      if (BytesWrittenRate != 0F) hash ^= BytesWrittenRate.GetHashCode();
      if (RpcsExecuted != 0UL) hash ^= RpcsExecuted.GetHashCode();
      if (RpcRate != 0F) hash ^= RpcRate.GetHashCode();
      if (OneRpcPerUpdate != false) hash ^= OneRpcPerUpdate.GetHashCode();
      if (MaxTimePerUpdate != 0) hash ^= MaxTimePerUpdate.GetHashCode();
      if (AdaptiveRateControl != false) hash ^= AdaptiveRateControl.GetHashCode();
      if (BlockingRecv != false) hash ^= BlockingRecv.GetHashCode();
      if (RecvTimeout != 0) hash ^= RecvTimeout.GetHashCode();
      if (TimePerRpcUpdate != 0F) hash ^= TimePerRpcUpdate.GetHashCode();
      if (PollTimePerRpcUpdate != 0F) hash ^= PollTimePerRpcUpdate.GetHashCode();
      if (ExecTimePerRpcUpdate != 0F) hash ^= ExecTimePerRpcUpdate.GetHashCode();
      if (StreamRpcs != 0) hash ^= StreamRpcs.GetHashCode();
      if (StreamRpcsExecuted != 0UL) hash ^= StreamRpcsExecuted.GetHashCode();
      if (StreamRpcRate != 0F) hash ^= StreamRpcRate.GetHashCode();
      if (TimePerStreamUpdate != 0F) hash ^= TimePerStreamUpdate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      if (BytesRead != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(BytesRead);
      }
      if (BytesWritten != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(BytesWritten);
      }
      if (BytesReadRate != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(BytesReadRate);
      }
      if (BytesWrittenRate != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(BytesWrittenRate);
      }
      if (RpcsExecuted != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(RpcsExecuted);
      }
      if (RpcRate != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(RpcRate);
      }
      if (OneRpcPerUpdate != false) {
        output.WriteRawTag(64);
        output.WriteBool(OneRpcPerUpdate);
      }
      if (MaxTimePerUpdate != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(MaxTimePerUpdate);
      }
      if (AdaptiveRateControl != false) {
        output.WriteRawTag(80);
        output.WriteBool(AdaptiveRateControl);
      }
      if (BlockingRecv != false) {
        output.WriteRawTag(88);
        output.WriteBool(BlockingRecv);
      }
      if (RecvTimeout != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(RecvTimeout);
      }
      if (TimePerRpcUpdate != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(TimePerRpcUpdate);
      }
      if (PollTimePerRpcUpdate != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(PollTimePerRpcUpdate);
      }
      if (ExecTimePerRpcUpdate != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(ExecTimePerRpcUpdate);
      }
      if (StreamRpcs != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(StreamRpcs);
      }
      if (StreamRpcsExecuted != 0UL) {
        output.WriteRawTag(136, 1);
        output.WriteUInt64(StreamRpcsExecuted);
      }
      if (StreamRpcRate != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(StreamRpcRate);
      }
      if (TimePerStreamUpdate != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(TimePerStreamUpdate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (BytesRead != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BytesRead);
      }
      if (BytesWritten != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BytesWritten);
      }
      if (BytesReadRate != 0F) {
        size += 1 + 4;
      }
      if (BytesWrittenRate != 0F) {
        size += 1 + 4;
      }
      if (RpcsExecuted != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RpcsExecuted);
      }
      if (RpcRate != 0F) {
        size += 1 + 4;
      }
      if (OneRpcPerUpdate != false) {
        size += 1 + 1;
      }
      if (MaxTimePerUpdate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxTimePerUpdate);
      }
      if (AdaptiveRateControl != false) {
        size += 1 + 1;
      }
      if (BlockingRecv != false) {
        size += 1 + 1;
      }
      if (RecvTimeout != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RecvTimeout);
      }
      if (TimePerRpcUpdate != 0F) {
        size += 1 + 4;
      }
      if (PollTimePerRpcUpdate != 0F) {
        size += 1 + 4;
      }
      if (ExecTimePerRpcUpdate != 0F) {
        size += 1 + 4;
      }
      if (StreamRpcs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(StreamRpcs);
      }
      if (StreamRpcsExecuted != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(StreamRpcsExecuted);
      }
      if (StreamRpcRate != 0F) {
        size += 2 + 4;
      }
      if (TimePerStreamUpdate != 0F) {
        size += 2 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Status other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.BytesRead != 0UL) {
        BytesRead = other.BytesRead;
      }
      if (other.BytesWritten != 0UL) {
        BytesWritten = other.BytesWritten;
      }
      if (other.BytesReadRate != 0F) {
        BytesReadRate = other.BytesReadRate;
      }
      if (other.BytesWrittenRate != 0F) {
        BytesWrittenRate = other.BytesWrittenRate;
      }
      if (other.RpcsExecuted != 0UL) {
        RpcsExecuted = other.RpcsExecuted;
      }
      if (other.RpcRate != 0F) {
        RpcRate = other.RpcRate;
      }
      if (other.OneRpcPerUpdate != false) {
        OneRpcPerUpdate = other.OneRpcPerUpdate;
      }
      if (other.MaxTimePerUpdate != 0) {
        MaxTimePerUpdate = other.MaxTimePerUpdate;
      }
      if (other.AdaptiveRateControl != false) {
        AdaptiveRateControl = other.AdaptiveRateControl;
      }
      if (other.BlockingRecv != false) {
        BlockingRecv = other.BlockingRecv;
      }
      if (other.RecvTimeout != 0) {
        RecvTimeout = other.RecvTimeout;
      }
      if (other.TimePerRpcUpdate != 0F) {
        TimePerRpcUpdate = other.TimePerRpcUpdate;
      }
      if (other.PollTimePerRpcUpdate != 0F) {
        PollTimePerRpcUpdate = other.PollTimePerRpcUpdate;
      }
      if (other.ExecTimePerRpcUpdate != 0F) {
        ExecTimePerRpcUpdate = other.ExecTimePerRpcUpdate;
      }
      if (other.StreamRpcs != 0) {
        StreamRpcs = other.StreamRpcs;
      }
      if (other.StreamRpcsExecuted != 0UL) {
        StreamRpcsExecuted = other.StreamRpcsExecuted;
      }
      if (other.StreamRpcRate != 0F) {
        StreamRpcRate = other.StreamRpcRate;
      }
      if (other.TimePerStreamUpdate != 0F) {
        TimePerStreamUpdate = other.TimePerStreamUpdate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 16: {
            BytesRead = input.ReadUInt64();
            break;
          }
          case 24: {
            BytesWritten = input.ReadUInt64();
            break;
          }
          case 37: {
            BytesReadRate = input.ReadFloat();
            break;
          }
          case 45: {
            BytesWrittenRate = input.ReadFloat();
            break;
          }
          case 48: {
            RpcsExecuted = input.ReadUInt64();
            break;
          }
          case 61: {
            RpcRate = input.ReadFloat();
            break;
          }
          case 64: {
            OneRpcPerUpdate = input.ReadBool();
            break;
          }
          case 72: {
            MaxTimePerUpdate = input.ReadUInt32();
            break;
          }
          case 80: {
            AdaptiveRateControl = input.ReadBool();
            break;
          }
          case 88: {
            BlockingRecv = input.ReadBool();
            break;
          }
          case 96: {
            RecvTimeout = input.ReadUInt32();
            break;
          }
          case 109: {
            TimePerRpcUpdate = input.ReadFloat();
            break;
          }
          case 117: {
            PollTimePerRpcUpdate = input.ReadFloat();
            break;
          }
          case 125: {
            ExecTimePerRpcUpdate = input.ReadFloat();
            break;
          }
          case 128: {
            StreamRpcs = input.ReadUInt32();
            break;
          }
          case 136: {
            StreamRpcsExecuted = input.ReadUInt64();
            break;
          }
          case 149: {
            StreamRpcRate = input.ReadFloat();
            break;
          }
          case 157: {
            TimePerStreamUpdate = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
